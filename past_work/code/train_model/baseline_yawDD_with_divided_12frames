{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"ZdDyC79-c6OZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741135575826,"user_tz":-540,"elapsed":18403,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"d651df1a-287c-41e2-ecb1-04c151caab6c"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["# functions.py"],"metadata":{"id":"e243KGF9ifTR"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"cIxwAkjPiX-C","executionInfo":{"status":"ok","timestamp":1741135595022,"user_tz":-540,"elapsed":13169,"user":{"displayName":"somin shim","userId":"00972152430439357273"}}},"outputs":[],"source":["import os\n","import numpy as np\n","from PIL import Image\n","from torch.utils import data\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","from tqdm import tqdm\n","\n","\n","## ------------------- label conversion tools ------------------ ##\n","def labels2cat(label_encoder, list):\n","    return label_encoder.transform(list)\n","\n","\n","def labels2onehot(OneHotEncoder, label_encoder, list):\n","    return OneHotEncoder.transform(\n","        label_encoder.transform(list).reshape(-1, 1)\n","    ).toarray()\n","\n","\n","def onehot2labels(label_encoder, y_onehot):\n","    return label_encoder.inverse_transform(np.where(y_onehot == 1)[1]).tolist()\n","\n","\n","def cat2labels(label_encoder, y_cat):\n","    return label_encoder.inverse_transform(y_cat).tolist()\n","\n","\n","## ---------------------- Dataloaders ---------------------- ##\n","# for CRNN\n","class Dataset_CRNN(data.Dataset):\n","    # Pytorch의 Dataset을 상속받아 구현됨\n","\n","    def __init__(self, data_path, folders, labels, transform=None):\n","        \"Initialization\"\n","        self.data_path = data_path\n","        self.labels = labels\n","        self.folders = folders\n","        self.transform = transform\n","\n","    # 데이터 개수 반환\n","    # DataLoader가 batch를 만들 때, 전체 데이터 개수를 알 수 있도록 제공해야 함\n","    def __len__(self):\n","        \"Denotes the total number of samples\"\n","        return len(self.folders)\n","\n","    # 특정 비디오 폴더에서 원하는 프레임들을 불러옴\n","    def read_images(self, path, selected_folder, use_transform):\n","        X = []\n","\n","        frame_files = sorted([f for f in os.listdir(os.path.join(path, selected_folder)) if f.endswith('.jpg')])\n","\n","        for frame_filename in frame_files:\n","          frame_path = os.path.join(path, selected_folder, frame_filename)\n","\n","          image = Image.open(frame_path)\n","\n","          if use_transform is not None:\n","              image = use_transform(image)\n","\n","          X.append(image)\n","\n","        # 모델에 입력 가능하도록 1개의 텐서로 변환\n","        X = torch.stack(X, dim=0)\n","\n","        return X\n","\n","    def __getitem__(self, index):\n","        \"Generates one sample of data\"\n","        # Select sample\n","        folder = self.folders[index]\n","\n","        # Load data\n","        X = self.read_images(self.data_path, folder, self.transform)  # (input) spatial images\n","        y = torch.LongTensor([self.labels[index]])  # (labels) LongTensor are for int64 instead of FloatTensor\n","\n","        # print(X.shape)\n","        return X, y\n","\n","\n","## ---------------------- end of Dataloaders ---------------------- ##\n","\n","\n","## -------------------- (reload) model prediction ---------------------- ##\n","\n","def CRNN_final_prediction(model, device, loader):\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.eval()\n","    rnn_decoder.eval()\n","\n","    all_y_pred = []\n","    with torch.no_grad():\n","        for batch_idx, (X, y) in enumerate(tqdm(loader)):\n","            # distribute data to device\n","            X = X.to(device)\n","            output = rnn_decoder(cnn_encoder(X))\n","            y_pred = output.max(1, keepdim=True)[\n","                1\n","            ]  # location of max log-probability as prediction\n","            all_y_pred.extend(y_pred.cpu().data.squeeze().numpy().tolist())\n","\n","    return all_y_pred\n","\n","## -------------------- end of model prediction ---------------------- ##\n","\n","\n","## ------------------------ CRNN module ---------------------- ##\n","\n","def conv2D_output_size(img_size, padding, kernel_size, stride):\n","    # compute output shape of conv2D\n","    outshape = (\n","        np.floor(\n","            (img_size[0] + 2 * padding[0] - (kernel_size[0] - 1) - 1) / stride[0] + 1\n","        ).astype(int),\n","        np.floor(\n","            (img_size[1] + 2 * padding[1] - (kernel_size[1] - 1) - 1) / stride[1] + 1\n","        ).astype(int),\n","    )\n","    return outshape\n","\n","\n","# 2D CNN encoder train from scratch (no transfer learning)\n","class EncoderCNN(nn.Module):\n","    def __init__(\n","        self,\n","        img_x=90,\n","        img_y=120,\n","        fc_hidden1=512,\n","        fc_hidden2=512,\n","        drop_p=0.3,\n","        CNN_embed_dim=300,\n","    ):\n","        super(EncoderCNN, self).__init__()\n","\n","        self.img_x = img_x\n","        self.img_y = img_y\n","        self.CNN_embed_dim = CNN_embed_dim\n","\n","        # CNN architechtures\n","        self.ch1, self.ch2, self.ch3, self.ch4 = 32, 64, 128, 256\n","        self.k1, self.k2, self.k3, self.k4 = (\n","            (5, 5),\n","            (3, 3),\n","            (3, 3),\n","            (3, 3),\n","        )  # 2d kernal size\n","        self.s1, self.s2, self.s3, self.s4 = (\n","            (2, 2),\n","            (2, 2),\n","            (2, 2),\n","            (2, 2),\n","        )  # 2d strides\n","        self.pd1, self.pd2, self.pd3, self.pd4 = (\n","            (0, 0),\n","            (0, 0),\n","            (0, 0),\n","            (0, 0),\n","        )  # 2d padding\n","\n","        # conv2D output shapes\n","        self.conv1_outshape = conv2D_output_size(\n","            (self.img_x, self.img_y), self.pd1, self.k1, self.s1\n","        )  # Conv1 output shape\n","        self.conv2_outshape = conv2D_output_size(\n","            self.conv1_outshape, self.pd2, self.k2, self.s2\n","        )\n","        self.conv3_outshape = conv2D_output_size(\n","            self.conv2_outshape, self.pd3, self.k3, self.s3\n","        )\n","        self.conv4_outshape = conv2D_output_size(\n","            self.conv3_outshape, self.pd4, self.k4, self.s4\n","        )\n","\n","        # fully connected layer hidden nodes\n","        self.fc_hidden1, self.fc_hidden2 = fc_hidden1, fc_hidden2\n","        self.drop_p = drop_p\n","\n","        self.conv1 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=3,\n","                out_channels=self.ch1,\n","                kernel_size=self.k1,\n","                stride=self.s1,\n","                padding=self.pd1,\n","            ),\n","            nn.BatchNorm2d(self.ch1, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","        self.conv2 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch1,\n","                out_channels=self.ch2,\n","                kernel_size=self.k2,\n","                stride=self.s2,\n","                padding=self.pd2,\n","            ),\n","            nn.BatchNorm2d(self.ch2, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.conv3 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch2,\n","                out_channels=self.ch3,\n","                kernel_size=self.k3,\n","                stride=self.s3,\n","                padding=self.pd3,\n","            ),\n","            nn.BatchNorm2d(self.ch3, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.conv4 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch3,\n","                out_channels=self.ch4,\n","                kernel_size=self.k4,\n","                stride=self.s4,\n","                padding=self.pd4,\n","            ),\n","            nn.BatchNorm2d(self.ch4, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.drop = nn.Dropout2d(self.drop_p)\n","        self.pool = nn.MaxPool2d(2)\n","        self.fc1 = nn.Linear(\n","            self.ch4 * self.conv4_outshape[0] * self.conv4_outshape[1], self.fc_hidden1\n","        )  # fully connected layer, output k classes\n","        self.fc2 = nn.Linear(self.fc_hidden1, self.fc_hidden2)\n","        self.fc3 = nn.Linear(\n","            self.fc_hidden2, self.CNN_embed_dim\n","        )  # output = CNN embedding latent variables\n","\n","    def forward(self, x_3d):\n","        cnn_embed_seq = []\n","        for t in range(x_3d.size(1)):\n","            # CNNs\n","            x = self.conv1(x_3d[:, t, :, :, :])\n","            x = self.conv2(x)\n","            x = self.conv3(x)\n","            x = self.conv4(x)\n","            x = x.view(x.size(0), -1)  # flatten the output of conv\n","\n","            # FC layers\n","            x = F.relu(self.fc1(x))\n","            # x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = F.relu(self.fc2(x))\n","            x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = self.fc3(x)\n","            cnn_embed_seq.append(x)\n","\n","        # swap time and sample dim such that (sample dim, time dim, CNN latent dim)\n","        cnn_embed_seq = torch.stack(cnn_embed_seq, dim=0).transpose_(0, 1)\n","        # cnn_embed_seq: shape=(batch, time_step, input_size)\n","\n","        return cnn_embed_seq\n","\n","\n","# 2D CNN encoder using ResNet-152 pretrained\n","class ResCNNEncoder(nn.Module):\n","    def __init__(self, fc_hidden1=512, fc_hidden2=512, drop_p=0.3, CNN_embed_dim=300):\n","        \"\"\"Load the pretrained ResNet-152 and replace top fc layer.\"\"\"\n","        super(ResCNNEncoder, self).__init__()\n","\n","        self.fc_hidden1, self.fc_hidden2 = fc_hidden1, fc_hidden2\n","        self.drop_p = drop_p\n","\n","        resnet = models.resnet152(pretrained=True) # 사전 학습된 ResNet-152 사용\n","        modules = list(resnet.children())[:-1] # 마지막 FC layer 제거\n","\n","        self.resnet = nn.Sequential(*modules)\n","        self.fc1 = nn.Linear(resnet.fc.in_features, fc_hidden1)\n","        self.bn1 = nn.BatchNorm1d(fc_hidden1, momentum=0.01)\n","        self.fc2 = nn.Linear(fc_hidden1, fc_hidden2)\n","        self.bn2 = nn.BatchNorm1d(fc_hidden2, momentum=0.01)\n","        self.fc3 = nn.Linear(fc_hidden2, CNN_embed_dim)\n","\n","    def forward(self, x_3d):\n","        cnn_embed_seq = []\n","        for t in range(x_3d.size(1)): # 프레임 단위로 CNN 처리\n","            # ResNet CNN\n","            with torch.no_grad():\n","                x = self.resnet(x_3d[:, t, :, :, :])  # ResNet\n","                x = x.view(x.size(0), -1)  # flatten output of conv\n","\n","            # FC layers\n","            x = self.bn1(self.fc1(x))\n","            x = F.relu(x)\n","            x = self.bn2(self.fc2(x))\n","            x = F.relu(x)\n","            x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = self.fc3(x)\n","\n","            cnn_embed_seq.append(x)\n","\n","        # swap time and sample dim such that (sample dim, time dim, CNN latent dim)\n","        cnn_embed_seq = torch.stack(cnn_embed_seq, dim=0).transpose_(0, 1)\n","        # cnn_embed_seq: shape=(batch, time_step, input_size)\n","\n","        return cnn_embed_seq\n","\n","\n","class DecoderRNN(nn.Module):\n","    def __init__(\n","        self,\n","        CNN_embed_dim=300,\n","        h_RNN_layers=3,\n","        h_RNN=256,\n","        h_FC_dim=128,\n","        drop_p=0.3,\n","        num_classes=50,\n","    ):\n","        super(DecoderRNN, self).__init__()\n","\n","        self.RNN_input_size = CNN_embed_dim  # CNN에서 온 512차원 벡터 입력\n","        self.h_RNN_layers = h_RNN_layers  # RNN hidden layers(512)\n","        self.h_RNN = h_RNN\n","        self.h_FC_dim = h_FC_dim\n","        self.drop_p = drop_p\n","        self.num_classes = num_classes\n","\n","        self.LSTM = nn.LSTM(\n","            input_size=self.RNN_input_size,\n","            hidden_size=self.h_RNN,\n","            num_layers=h_RNN_layers,\n","            batch_first=True,  # input & output will has batch size as 1s dimension. e.g. (batch, time_step, input_size)\n","        )\n","\n","        self.fc1 = nn.Linear(self.h_RNN, self.h_FC_dim)\n","        self.fc2 = nn.Linear(self.h_FC_dim, self.num_classes)\n","\n","    def forward(self, x_RNN):\n","\n","        self.LSTM.flatten_parameters()\n","        RNN_out, (h_n, h_c) = self.LSTM(x_RNN, None)\n","        \"\"\" h_n shape (n_layers, batch, hidden_size), h_c shape (n_layers, batch, hidden_size) \"\"\"\n","        \"\"\" None represents zero initial hidden state. RNN_out has shape=(batch, time_step, output_size) \"\"\"\n","\n","        # FC layers\n","        x = self.fc1(RNN_out[:, -1, :])  # choose RNN_out at the last time step\n","        x = F.relu(x)\n","        x = F.dropout(x, p=self.drop_p, training=self.training)\n","        x = self.fc2(x)\n","\n","        return x\n","\n","\n","## ---------------------- end of CRNN module ---------------------- ##\n"]},{"cell_type":"markdown","source":["## ResNetCRNN"],"metadata":{"id":"gfbvxru3i1BB"}},{"cell_type":"code","source":["def train(log_interval, model, device, train_loader, optimizer, epoch):\n","    # set model as training mode\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.train()\n","    rnn_decoder.train()\n","\n","    losses = []\n","    scores = []\n","    N_count = 0  # 총 학습 샘플 수\n","    for batch_idx, (X, y) in enumerate(tqdm(train_loader)):  # 배치 단위로 데이터 로드\n","        # distribute data to device\n","        X, y = X.to(device), y.to(device).view(\n","            -1,\n","        )\n","\n","        N_count += X.size(0)\n","\n","        optimizer.zero_grad()\n","        output = rnn_decoder(  # CNN + RNN 통과\n","                            cnn_encoder(X)\n","                        )  # output has dim = (batch, number of classes)\n","\n","        loss = F.cross_entropy(output, y)  # 손실 함수 계산\n","        losses.append(loss.item())\n","\n","        # to compute accuracy\n","        # torch.max() -> 샘플에서 가장 큰 점수를 가진 클래스 값과 해당 클래스 인덱스를 반환\n","        # 반환된 튜플에서 두번째 값(인덱스)를 선택하여, 각 샘플의 예측된 클래스 인덱스를 y_pred에 저장\n","        y_pred = torch.max(output, 1)[1]\n","        # 해당 배치에서의 정확도\n","        step_score = accuracy_score(\n","            # GPU에 있던 데이터를 GPU로 옮김\n","            y.cpu().data.squeeze().numpy(),\n","            y_pred.cpu().data.squeeze().numpy(),\n","        )\n","        scores.append(step_score)  # computed on CPU\n","\n","        loss.backward()  # 역전파 수행 = 각 파라미터에 대한 기울기를 계산\n","        optimizer.step()  # 계산된 기울기를 기반으로 모델의 파라미터를 업데이트\n","\n","        # show information\n","        if (batch_idx + 1) % log_interval == 0:\n","            print(\n","                \"Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}, Accu: {:.2f}%\".format(\n","                    epoch + 1,\n","                    N_count,\n","                    len(train_loader.dataset),\n","                    100.0 * (batch_idx + 1) / len(train_loader),\n","                    loss.item(),\n","                    100 * step_score,\n","                )\n","            )\n","\n","    return losses, scores\n","\n","\n","def validation(model, device, optimizer, test_loader):\n","    # set model as testing mode\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.eval()\n","    rnn_decoder.eval()\n","\n","    test_loss = 0\n","    all_y = []\n","    all_y_pred = []\n","    with torch.no_grad():\n","        for X, y in test_loader:\n","            # distribute data to device\n","            X, y = X.to(device), y.to(device).view(\n","                -1,\n","            )\n","\n","            output = rnn_decoder(cnn_encoder(X))\n","\n","            loss = F.cross_entropy(output, y, reduction=\"sum\")\n","            test_loss += loss.item()  # sum up batch loss\n","            y_pred = output.max(1, keepdim=True)[\n","                1\n","            ]  # (y_pred != output) get the index of the max log-probability\n","\n","            # collect all y and y_pred in all batches\n","            all_y.extend(y)\n","            all_y_pred.extend(y_pred)\n","\n","    test_loss /= len(test_loader.dataset)\n","\n","    # compute accuracy\n","    all_y = torch.stack(all_y, dim=0)\n","    all_y_pred = torch.stack(all_y_pred, dim=0)\n","    test_score = accuracy_score(\n","        all_y.cpu().data.squeeze().numpy(), all_y_pred.cpu().data.squeeze().numpy()\n","    )\n","\n","    # show information\n","    print(\n","        \"\\nTest set ({:d} samples): Average loss: {:.4f}, Accuracy: {:.2f}%\\n\".format(\n","            len(all_y), test_loss, 100 * test_score\n","        )\n","    )\n","\n","    os.makedirs(save_model_path, exist_ok=True)\n","\n","    # save Pytorch models of best record\n","    torch.save(\n","        cnn_encoder.state_dict(),\n","        os.path.join(save_model_path, \"cnn_encoder_epoch{}.pth\".format(epoch + 1)),\n","    )  # save spatial_encoder\n","    torch.save(\n","        rnn_decoder.state_dict(),\n","        os.path.join(save_model_path, \"rnn_decoder_epoch{}.pth\".format(epoch + 1)),\n","    )  # save motion_encoder\n","    torch.save(\n","        optimizer.state_dict(),\n","        os.path.join(save_model_path, \"optimizer_epoch{}.pth\".format(epoch + 1)),\n","    )  # save optimizer\n","    print(\"Epoch {} model saved!\".format(epoch + 1))\n","\n","    return test_loss, test_score"],"metadata":{"id":"-0uQPYQqCJnE","executionInfo":{"status":"ok","timestamp":1741135600602,"user_tz":-540,"elapsed":34,"user":{"displayName":"somin shim","userId":"00972152430439357273"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import os\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","import torch.utils.data as data\n","import torchvision\n","from torch.autograd import Variable\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","\n","# 데이터 경로\n","data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset\"\n","train_data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset/train_dataset\"\n","test_data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset/test_dataset\"\n","save_model_path = \"/content/drive/MyDrive/DMS/ResNetCRNN_yawDD_with_divided_12frames_ckpt\"  # 학습된 모델 저장 경로\n","\n","# CNN(ResNet) 설정\n","CNN_fc_hidden1, CNN_fc_hidden2 = 1024, 768  # 첫번째, 두번째 fc layer 뉴런 개수\n","CNN_embed_dim = 512  # 2D CNN이 추출하는 특징 벡터 크기\n","res_size = 224  # ResNet 이미지 크기\n","dropout_p = 0.2  # 드롭아웃 비율\n","\n","# RNN 설정\n","# RNN 출력(512 차원) -> 256차원으로 변환\n","RNN_hidden_layers = 3  # 3-layer LSTM\n","# 각 time step 마다 RNN이 기억하는 상태 크기, RNN의 출력 크기도 기본적으로 512\n","RNN_hidden_nodes = 512\n","RNN_FC_dim = 256\n","\n","# 학습 파라미터\n","k = 2  # Normal, Yawning, PhoneCall, Text\n","epochs = 30 # 총 학습 횟수\n","batch_size = 10\n","learning_rate = 1e-3\n","log_interval = 5  # 몇 번의 배치마다 로그를 출력할지\n","\n","\n","use_cuda = torch.cuda.is_available()  # GPU 사용 여부 확인\n","device = torch.device(\"cuda\" if use_cuda else \"cpu\")  # use CPU or GPU\n","\n","# 데이터 로더 파라미터\n","params = (\n","    {\n","        \"batch_size\": batch_size,  # 한 번에 처리할 데이터 개수\n","        \"shuffle\": True,  # 데이터 섞기\n","        \"num_workers\": 2,  # 데이터를 로드하는 프로세스 개수 (병렬 처리))\n","        \"pin_memory\": True,  # CUDA 사용 시 메모리 핀 설정으로 속도 향상\n","        \"drop_last\": True # 마지막 배치 크기가 1이면 해당 배치를 버림\n","    }\n","    if use_cuda\n","    else {}\n",")\n","\n","# action_names = ['normal', 'phonecall', 'text', 'yawn']\n","action_names = ['normal', 'yawn']\n","\n","# convert labels -> category\n","le = LabelEncoder()\n","le.fit(action_names)\n","\n","# show how many classes there are\n","list(le.classes_)\n","\n","# convert category -> 1-hot\n","action_category = le.transform(action_names).reshape(-1, 1)\n","enc = OneHotEncoder()\n","enc.fit(action_category)\n","\n","train_fnames = ['normal_yawDD', 'yawn_yawDD']\n","test_fnames = ['normal_yawDD', 'yawn_yawDD']\n","\n","# train_fnames = os.listdir(train_data_path)\n","# test_fnames = os.listdir(test_data_path)\n","\n","train_actions = []\n","train_files = []\n","test_actions = []\n","test_files = []\n","\n","for label_dir in train_fnames: # normal_DMD, normal_yawDD, phonecall_DMD, text_DMD, yawn_yawDD\n","    label_dirs_path = os.path.join(train_data_path, label_dir)\n","    label = label_dir.split('_')[0]\n","\n","    for clipped_dirs in os.listdir(label_dirs_path):\n","        file_path = os.path.join(\"train_dataset\", label_dir, clipped_dirs)\n","        train_actions.append(label)  # 파일의 액션(Label) 저장\n","        train_files.append(file_path)  # 전체 파일 경로 저장\n","\n","for label_dir in test_fnames: # normal_DMD, normal_yawDD, phonecall_DMD, text_DMD, yawn_yawDD\n","    label_dirs_path = os.path.join(test_data_path, label_dir)\n","    label = label_dir.split('_')[0]\n","\n","    for clipped_dirs in os.listdir(label_dirs_path):\n","        file_path = os.path.join(\"test_dataset\", label_dir, clipped_dirs)\n","        test_actions.append(label)  # 파일의 액션(Label) 저장\n","        test_files.append(file_path)  # 전체 파일 경로 저장\n","\n","train_list = train_files\n","test_list = test_files\n","train_label = labels2cat(le, train_actions)\n","test_label = labels2cat(le, test_actions)"],"metadata":{"id":"xAl2D7eli28a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(train_list))\n","print(len(train_label))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DZXEgzToDcGR","executionInfo":{"status":"ok","timestamp":1741092357333,"user_tz":-540,"elapsed":11,"user":{"displayName":"심소민","userId":"13422866620659141828"}},"outputId":"447048bd-6c4e-449b-d1fd-2a60bd6c5d17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["577\n","577\n"]}]},{"cell_type":"code","source":["577%32"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6swum5vtag-F","executionInfo":{"status":"ok","timestamp":1741092357347,"user_tz":-540,"elapsed":12,"user":{"displayName":"심소민","userId":"13422866620659141828"}},"outputId":"4ed76998-ba46-4ac9-ee86-070844519461"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["np.unique(train_label)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5aOrQVLAKoAS","executionInfo":{"status":"ok","timestamp":1741092357362,"user_tz":-540,"elapsed":14,"user":{"displayName":"심소민","userId":"13422866620659141828"}},"outputId":"ef24f5f0-2814-41de-efba-e6c9664f5eda"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["import os\n","os.environ['CUDA_LAUNCH_BLOCKING'] = '1' # CUDA 오류를 즉시 감지하여 디버깅 가능\n","torch.backends.cudnn.enabled = False"],"metadata":{"id":"dgqKHSIuLsJ4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터 변환\n","transform = transforms.Compose(\n","    [\n","        transforms.Resize([res_size, res_size]),  # 입력 이미지 크기 조정\n","        transforms.ToTensor(),  # 이미지를 텐서로 변환\n","        # ImageNet의 평균 및 표준편차를 사용하여 정규화\n","        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","    ]\n",")\n","\n","# 데이터셋 생성\n","train_set =  Dataset_CRNN(data_path, train_list, train_label, transform=transform)\n","valid_set = Dataset_CRNN(data_path, test_list, test_label, transform=transform)\n","\n","train_loader = data.DataLoader(train_set, **params)\n","valid_loader = data.DataLoader(valid_set, **params)\n","\n","\n","# Create model\n","cnn_encoder = ResCNNEncoder(\n","                            fc_hidden1=CNN_fc_hidden1,\n","                            fc_hidden2=CNN_fc_hidden2,\n","                            drop_p=dropout_p,\n","                            CNN_embed_dim=CNN_embed_dim,\n","                        ).to(device)\n","rnn_decoder = DecoderRNN(\n","                            CNN_embed_dim=CNN_embed_dim,\n","                            h_RNN_layers=RNN_hidden_layers,\n","                            h_RNN=RNN_hidden_nodes,\n","                            h_FC_dim=RNN_FC_dim,\n","                            drop_p=dropout_p,\n","                            num_classes=k,\n","                        ).to(device)\n","\n","# Parallelize model to multiple GPUs\n","if torch.cuda.device_count() > 1:\n","    print(\"Using\", torch.cuda.device_count(), \"GPUs!\")\n","    cnn_encoder = nn.DataParallel(cnn_encoder)\n","    rnn_decoder = nn.DataParallel(rnn_decoder)\n","\n","    # Combine all EncoderCNN + DecoderRNN parameters\n","    crnn_params = (\n","        list(cnn_encoder.module.fc1.parameters())\n","        + list(cnn_encoder.module.bn1.parameters())\n","        + list(cnn_encoder.module.fc2.parameters())\n","        + list(cnn_encoder.module.bn2.parameters())\n","        + list(cnn_encoder.module.fc3.parameters())\n","        + list(rnn_decoder.parameters())\n","    )\n","\n","elif torch.cuda.device_count() == 1:\n","    print(\"Using\", torch.cuda.device_count(), \"GPU!\")\n","    # Combine all EncoderCNN + DecoderRNN parameters\n","    crnn_params = (\n","        list(cnn_encoder.fc1.parameters())\n","        + list(cnn_encoder.bn1.parameters())\n","        + list(cnn_encoder.fc2.parameters())\n","        + list(cnn_encoder.bn2.parameters())\n","        + list(cnn_encoder.fc3.parameters())\n","        + list(rnn_decoder.parameters())\n","    )\n","\n","optimizer = torch.optim.Adam(crnn_params, lr=learning_rate)\n","\n","\n","# 학습 및 검증 손실과 정확도를 저장할 리스트 생성\n","epoch_train_losses = []\n","epoch_train_scores = []\n","epoch_test_losses = []\n","epoch_test_scores = []\n","\n","# 학습 진행\n","for epoch in range(epochs):\n","    # train, test model\n","    train_losses, train_scores = train(\n","        log_interval, [cnn_encoder, rnn_decoder], device, train_loader, optimizer, epoch\n","    )\n","    epoch_test_loss, epoch_test_score = validation(\n","        [cnn_encoder, rnn_decoder], device, optimizer, valid_loader\n","    )\n","\n","    # save results\n","    epoch_train_losses.append(train_losses)\n","    epoch_train_scores.append(train_scores)\n","    epoch_test_losses.append(epoch_test_loss)\n","    epoch_test_scores.append(epoch_test_score)\n","\n","    # save all train test results\n","    A = np.array(epoch_train_losses)\n","    B = np.array(epoch_train_scores)\n","    C = np.array(epoch_test_losses)\n","    D = np.array(epoch_test_scores)\n","    np.save(\"./CRNN_epoch_training_losses.npy\", A)\n","    np.save(\"./CRNN_epoch_training_scores.npy\", B)\n","    np.save(\"./CRNN_epoch_test_loss.npy\", C)\n","    np.save(\"./CRNN_epoch_test_score.npy\", D)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jAbL96qF75Xv","executionInfo":{"status":"ok","timestamp":1741100447850,"user_tz":-540,"elapsed":8090473,"user":{"displayName":"심소민","userId":"13422866620659141828"}},"outputId":"7f1ba2f3-b898-4ef1-fb7f-4aa147b1a2fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet152_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet152_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/resnet152-394f9c45.pth\" to /root/.cache/torch/hub/checkpoints/resnet152-394f9c45.pth\n","100%|██████████| 230M/230M [00:04<00:00, 54.9MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Using 1 GPU!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [02:30<26:42, 30.83s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [50/577 (9%)]\tLoss: 0.569275, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [04:06<15:35, 19.90s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [100/577 (18%)]\tLoss: 0.512814, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [06:24<18:59, 27.13s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [150/577 (26%)]\tLoss: 0.821382, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [07:58<12:03, 19.56s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [200/577 (35%)]\tLoss: 0.605879, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [10:07<13:30, 25.32s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [250/577 (44%)]\tLoss: 0.756689, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [11:56<09:56, 22.10s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [300/577 (53%)]\tLoss: 0.679427, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [14:12<09:55, 27.05s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [350/577 (61%)]\tLoss: 0.527617, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [16:00<06:09, 21.73s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [400/577 (70%)]\tLoss: 0.717127, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [18:33<06:33, 32.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [450/577 (79%)]\tLoss: 0.529024, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [20:10<02:24, 20.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [500/577 (88%)]\tLoss: 0.372363, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [22:22<00:50, 25.48s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [550/577 (96%)]\tLoss: 0.424200, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [23:08<00:00, 24.37s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6548, Accuracy: 56.67%\n","\n","Epoch 1 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:45,  3.19s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [50/577 (9%)]\tLoss: 0.726087, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:12,  2.82s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [100/577 (18%)]\tLoss: 0.786831, Accu: 50.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:54,  2.72s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [150/577 (26%)]\tLoss: 0.373755, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:38,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [200/577 (35%)]\tLoss: 0.632007, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:23,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [250/577 (44%)]\tLoss: 0.489398, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:23<01:09,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [300/577 (53%)]\tLoss: 0.535118, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:36<00:56,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [350/577 (61%)]\tLoss: 0.589168, Accu: 50.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:49<00:44,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [400/577 (70%)]\tLoss: 0.677099, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:31,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [450/577 (79%)]\tLoss: 0.531566, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:16<00:18,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [500/577 (88%)]\tLoss: 0.651093, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:29<00:04,  2.47s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [550/577 (96%)]\tLoss: 0.563086, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.71s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6289, Accuracy: 66.67%\n","\n","Epoch 2 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:35,  2.99s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [50/577 (9%)]\tLoss: 0.457577, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:30<02:05,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [100/577 (18%)]\tLoss: 0.597164, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:43<01:52,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [150/577 (26%)]\tLoss: 0.384253, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:39,  2.68s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [200/577 (35%)]\tLoss: 0.598823, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:26,  2.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [250/577 (44%)]\tLoss: 0.411401, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:23<01:12,  2.69s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [300/577 (53%)]\tLoss: 0.693701, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:58,  2.68s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [350/577 (61%)]\tLoss: 0.679649, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:45,  2.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [400/577 (70%)]\tLoss: 0.474156, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:32,  2.69s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [450/577 (79%)]\tLoss: 0.466288, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:19,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [500/577 (88%)]\tLoss: 0.904888, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:29<00:05,  2.55s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [550/577 (96%)]\tLoss: 0.534646, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.71s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.7095, Accuracy: 68.67%\n","\n","Epoch 3 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:35,  3.00s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [50/577 (9%)]\tLoss: 0.690318, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:05,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [100/577 (18%)]\tLoss: 0.597236, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:49,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [150/577 (26%)]\tLoss: 0.819530, Accu: 50.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:37,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [200/577 (35%)]\tLoss: 0.480296, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:23,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [250/577 (44%)]\tLoss: 0.529211, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:11,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [300/577 (53%)]\tLoss: 0.334879, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:58,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [350/577 (61%)]\tLoss: 0.631174, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:44,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [400/577 (70%)]\tLoss: 0.474463, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [450/577 (79%)]\tLoss: 0.240219, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [500/577 (88%)]\tLoss: 0.517450, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:05,  2.52s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [550/577 (96%)]\tLoss: 0.464283, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.72s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6282, Accuracy: 66.67%\n","\n","Epoch 4 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:37,  3.03s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [50/577 (9%)]\tLoss: 0.499572, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:03,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [100/577 (18%)]\tLoss: 0.382390, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:49,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [150/577 (26%)]\tLoss: 0.547665, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:36,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [200/577 (35%)]\tLoss: 0.385183, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:23,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [250/577 (44%)]\tLoss: 0.295973, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [300/577 (53%)]\tLoss: 0.479341, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:57,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [350/577 (61%)]\tLoss: 0.504193, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:44,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [400/577 (70%)]\tLoss: 0.766984, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:05<00:31,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [450/577 (79%)]\tLoss: 0.528699, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [500/577 (88%)]\tLoss: 0.535830, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:05,  2.51s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [550/577 (96%)]\tLoss: 0.446999, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:36<00:00,  2.74s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.5971, Accuracy: 64.67%\n","\n","Epoch 5 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:38,  3.04s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [50/577 (9%)]\tLoss: 0.257967, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:04,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [100/577 (18%)]\tLoss: 0.429420, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:48,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [150/577 (26%)]\tLoss: 0.505559, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:34,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [200/577 (35%)]\tLoss: 1.476178, Accu: 10.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:22,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [250/577 (44%)]\tLoss: 0.296633, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [300/577 (53%)]\tLoss: 0.682662, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:56,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [350/577 (61%)]\tLoss: 0.263239, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:43,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [400/577 (70%)]\tLoss: 0.273185, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [450/577 (79%)]\tLoss: 0.337123, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [500/577 (88%)]\tLoss: 0.179930, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:05,  2.51s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [550/577 (96%)]\tLoss: 0.259368, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.74s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.7484, Accuracy: 63.33%\n","\n","Epoch 6 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:19<02:48,  3.24s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [50/577 (9%)]\tLoss: 0.458793, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:32<02:07,  2.71s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [100/577 (18%)]\tLoss: 0.540117, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:50,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [150/577 (26%)]\tLoss: 0.738782, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:36,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [200/577 (35%)]\tLoss: 0.728122, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:12<01:23,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [250/577 (44%)]\tLoss: 0.619976, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:25<01:09,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [300/577 (53%)]\tLoss: 0.652651, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:56,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [350/577 (61%)]\tLoss: 0.447047, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:43,  2.55s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [400/577 (70%)]\tLoss: 0.639686, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:05<00:30,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [450/577 (79%)]\tLoss: 0.399028, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [500/577 (88%)]\tLoss: 0.693198, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:04,  2.49s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [550/577 (96%)]\tLoss: 0.726840, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:36<00:00,  2.75s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6513, Accuracy: 69.33%\n","\n","Epoch 7 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:39,  3.07s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [50/577 (9%)]\tLoss: 0.209596, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:04,  2.66s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [100/577 (18%)]\tLoss: 0.496058, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:48,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [150/577 (26%)]\tLoss: 0.767345, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:35,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [200/577 (35%)]\tLoss: 0.381255, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:22,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [250/577 (44%)]\tLoss: 0.400213, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [300/577 (53%)]\tLoss: 0.371652, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:56,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [350/577 (61%)]\tLoss: 0.604674, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:44,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [400/577 (70%)]\tLoss: 0.287622, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [450/577 (79%)]\tLoss: 0.498805, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [500/577 (88%)]\tLoss: 0.339108, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:05,  2.51s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [550/577 (96%)]\tLoss: 0.312441, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.73s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6043, Accuracy: 72.00%\n","\n","Epoch 8 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:37,  3.03s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [50/577 (9%)]\tLoss: 0.488025, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:04,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [100/577 (18%)]\tLoss: 0.495506, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:47,  2.56s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [150/577 (26%)]\tLoss: 0.474066, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:35,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [200/577 (35%)]\tLoss: 0.455824, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:22,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [250/577 (44%)]\tLoss: 0.461503, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [300/577 (53%)]\tLoss: 0.763925, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:57,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [350/577 (61%)]\tLoss: 0.594658, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:43,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [400/577 (70%)]\tLoss: 0.538911, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [450/577 (79%)]\tLoss: 0.289240, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [500/577 (88%)]\tLoss: 0.367362, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:04,  2.49s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [550/577 (96%)]\tLoss: 0.636989, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:36<00:00,  2.74s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.8025, Accuracy: 67.33%\n","\n","Epoch 9 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:49,  3.27s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [50/577 (9%)]\tLoss: 0.815854, Accu: 50.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:12,  2.81s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [100/577 (18%)]\tLoss: 0.635244, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:56,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [150/577 (26%)]\tLoss: 0.379029, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:42,  2.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [200/577 (35%)]\tLoss: 0.291588, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:25,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [250/577 (44%)]\tLoss: 0.418276, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [300/577 (53%)]\tLoss: 0.475391, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:57,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [350/577 (61%)]\tLoss: 0.355925, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:44,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [400/577 (70%)]\tLoss: 0.387372, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [450/577 (79%)]\tLoss: 0.417666, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [500/577 (88%)]\tLoss: 0.681323, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:04,  2.48s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [550/577 (96%)]\tLoss: 0.328205, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.73s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6511, Accuracy: 70.00%\n","\n","Epoch 10 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:19<02:52,  3.32s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [50/577 (9%)]\tLoss: 0.219279, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:32<02:13,  2.84s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [100/577 (18%)]\tLoss: 0.228143, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:55,  2.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [150/577 (26%)]\tLoss: 0.206014, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:39,  2.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [200/577 (35%)]\tLoss: 0.727232, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:24,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [250/577 (44%)]\tLoss: 0.085871, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:09,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [300/577 (53%)]\tLoss: 0.193675, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:56,  2.56s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [350/577 (61%)]\tLoss: 0.142974, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:43,  2.54s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [400/577 (70%)]\tLoss: 0.704750, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:30,  2.53s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [450/577 (79%)]\tLoss: 0.191439, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [500/577 (88%)]\tLoss: 0.354167, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:04,  2.48s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [550/577 (96%)]\tLoss: 0.268415, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.73s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6905, Accuracy: 64.00%\n","\n","Epoch 11 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:48,  3.24s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [50/577 (9%)]\tLoss: 0.530550, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:13,  2.84s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [100/577 (18%)]\tLoss: 0.181943, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:56,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [150/577 (26%)]\tLoss: 0.227109, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:37,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [200/577 (35%)]\tLoss: 0.285630, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:23,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [250/577 (44%)]\tLoss: 0.066500, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [300/577 (53%)]\tLoss: 0.359601, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:57,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [350/577 (61%)]\tLoss: 0.858246, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:44,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [400/577 (70%)]\tLoss: 0.401264, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [450/577 (79%)]\tLoss: 0.732764, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [500/577 (88%)]\tLoss: 0.273027, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:04,  2.46s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [550/577 (96%)]\tLoss: 0.295241, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.74s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.7284, Accuracy: 62.67%\n","\n","Epoch 12 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:40,  3.09s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [50/577 (9%)]\tLoss: 0.439461, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:05,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [100/577 (18%)]\tLoss: 0.169788, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:49,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [150/577 (26%)]\tLoss: 0.308010, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:35,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [200/577 (35%)]\tLoss: 0.204116, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:21,  2.56s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [250/577 (44%)]\tLoss: 0.449569, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:09,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [300/577 (53%)]\tLoss: 0.334072, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:56,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [350/577 (61%)]\tLoss: 0.415069, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:44,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [400/577 (70%)]\tLoss: 0.389997, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [450/577 (79%)]\tLoss: 0.837737, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [500/577 (88%)]\tLoss: 0.153404, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:04,  2.48s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [550/577 (96%)]\tLoss: 0.812381, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.73s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6650, Accuracy: 70.67%\n","\n","Epoch 13 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:46,  3.20s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [50/577 (9%)]\tLoss: 0.195421, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:32<02:13,  2.85s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [100/577 (18%)]\tLoss: 0.330217, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:56,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [150/577 (26%)]\tLoss: 0.538695, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:59<01:39,  2.69s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [200/577 (35%)]\tLoss: 0.176544, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:12<01:24,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [250/577 (44%)]\tLoss: 0.342955, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:25<01:11,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [300/577 (53%)]\tLoss: 0.506654, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:39<00:57,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [350/577 (61%)]\tLoss: 0.142037, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:52<00:43,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [400/577 (70%)]\tLoss: 0.094427, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:05<00:31,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [450/577 (79%)]\tLoss: 0.710758, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [500/577 (88%)]\tLoss: 0.622374, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:32<00:05,  2.50s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [550/577 (96%)]\tLoss: 0.353261, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:37<00:00,  2.76s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6277, Accuracy: 65.33%\n","\n","Epoch 14 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:39,  3.07s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [50/577 (9%)]\tLoss: 0.239288, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:30<02:08,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [100/577 (18%)]\tLoss: 0.293925, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:55,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [150/577 (26%)]\tLoss: 0.195711, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:42,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [200/577 (35%)]\tLoss: 0.155628, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:28,  2.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [250/577 (44%)]\tLoss: 0.361261, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:14,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [300/577 (53%)]\tLoss: 0.050455, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<01:01,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [350/577 (61%)]\tLoss: 0.680088, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:47,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [400/577 (70%)]\tLoss: 0.477500, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:33,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [450/577 (79%)]\tLoss: 0.193051, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:19,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [500/577 (88%)]\tLoss: 0.117254, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:29<00:05,  2.52s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [550/577 (96%)]\tLoss: 0.354207, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.72s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6850, Accuracy: 68.00%\n","\n","Epoch 15 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:37,  3.03s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [50/577 (9%)]\tLoss: 0.269057, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:30<02:06,  2.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [100/577 (18%)]\tLoss: 0.198493, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:43<01:50,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [150/577 (26%)]\tLoss: 0.460805, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:56<01:39,  2.68s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [200/577 (35%)]\tLoss: 0.409438, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:09<01:26,  2.71s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [250/577 (44%)]\tLoss: 0.558705, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:22<01:13,  2.71s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [300/577 (53%)]\tLoss: 0.301674, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:35<00:59,  2.72s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [350/577 (61%)]\tLoss: 0.106617, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:48<00:46,  2.72s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [400/577 (70%)]\tLoss: 0.124783, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:01<00:32,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [450/577 (79%)]\tLoss: 0.107268, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:15<00:19,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [500/577 (88%)]\tLoss: 1.028108, Accu: 50.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:27<00:05,  2.50s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [550/577 (96%)]\tLoss: 0.405483, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:32<00:00,  2.67s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6775, Accuracy: 68.00%\n","\n","Epoch 16 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:41,  3.10s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [50/577 (9%)]\tLoss: 0.462277, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:30<02:10,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [100/577 (18%)]\tLoss: 0.608409, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:56,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [150/577 (26%)]\tLoss: 0.465647, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:42,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [200/577 (35%)]\tLoss: 0.168023, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:28,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [250/577 (44%)]\tLoss: 0.422294, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:15,  2.79s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [300/577 (53%)]\tLoss: 0.398814, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<01:02,  2.83s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [350/577 (61%)]\tLoss: 0.221854, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:47,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [400/577 (70%)]\tLoss: 0.505542, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:33,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [450/577 (79%)]\tLoss: 0.938276, Accu: 20.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:19,  2.80s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [500/577 (88%)]\tLoss: 0.718489, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:05,  2.51s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [550/577 (96%)]\tLoss: 0.714686, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.72s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6517, Accuracy: 69.33%\n","\n","Epoch 17 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:44,  3.16s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [50/577 (9%)]\tLoss: 0.488551, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:13,  2.84s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [100/577 (18%)]\tLoss: 0.244885, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:58,  2.82s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [150/577 (26%)]\tLoss: 0.152334, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:42,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [200/577 (35%)]\tLoss: 0.173354, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:29,  2.81s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [250/577 (44%)]\tLoss: 0.274284, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:15,  2.80s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [300/577 (53%)]\tLoss: 0.392823, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<01:01,  2.80s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [350/577 (61%)]\tLoss: 0.127715, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:46,  2.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [400/577 (70%)]\tLoss: 0.074477, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:33,  2.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [450/577 (79%)]\tLoss: 0.104398, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.69s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [500/577 (88%)]\tLoss: 0.573500, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:05,  2.52s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [550/577 (96%)]\tLoss: 0.137977, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.72s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6593, Accuracy: 72.67%\n","\n","Epoch 18 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:37,  3.03s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [50/577 (9%)]\tLoss: 0.347181, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:30<02:08,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [100/577 (18%)]\tLoss: 0.154839, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:43<01:53,  2.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [150/577 (26%)]\tLoss: 0.063750, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:40,  2.72s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [200/577 (35%)]\tLoss: 0.167770, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:27,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [250/577 (44%)]\tLoss: 0.151823, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:23<01:14,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [300/577 (53%)]\tLoss: 0.601053, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<01:01,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [350/577 (61%)]\tLoss: 0.071956, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:46,  2.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [400/577 (70%)]\tLoss: 0.351721, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:33,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [450/577 (79%)]\tLoss: 0.628497, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:16<00:19,  2.78s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [500/577 (88%)]\tLoss: 0.214318, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:29<00:05,  2.55s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [550/577 (96%)]\tLoss: 0.129137, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.70s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.5767, Accuracy: 76.67%\n","\n","Epoch 19 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:48,  3.24s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [50/577 (9%)]\tLoss: 0.679349, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:32<02:12,  2.81s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [100/577 (18%)]\tLoss: 0.864844, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:50,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [150/577 (26%)]\tLoss: 0.054479, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:36,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [200/577 (35%)]\tLoss: 0.117632, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:22,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [250/577 (44%)]\tLoss: 0.103937, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:08,  2.53s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [300/577 (53%)]\tLoss: 0.148998, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:55,  2.53s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [350/577 (61%)]\tLoss: 0.357019, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:42,  2.51s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [400/577 (70%)]\tLoss: 0.159121, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:30,  2.54s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [450/577 (79%)]\tLoss: 0.997833, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:16<00:17,  2.54s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [500/577 (88%)]\tLoss: 0.287940, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:29<00:04,  2.45s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [550/577 (96%)]\tLoss: 0.094527, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.71s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6546, Accuracy: 72.67%\n","\n","Epoch 20 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:35,  2.98s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [50/577 (9%)]\tLoss: 0.409712, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:04,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [100/577 (18%)]\tLoss: 0.325009, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:48,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [150/577 (26%)]\tLoss: 0.159845, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:35,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [200/577 (35%)]\tLoss: 0.982688, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:22,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [250/577 (44%)]\tLoss: 0.177891, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:23<01:09,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [300/577 (53%)]\tLoss: 0.398969, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:57,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [350/577 (61%)]\tLoss: 0.513067, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:44,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [400/577 (70%)]\tLoss: 0.074927, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [450/577 (79%)]\tLoss: 0.573328, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [500/577 (88%)]\tLoss: 0.817161, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:04,  2.50s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [550/577 (96%)]\tLoss: 0.344978, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.72s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6222, Accuracy: 72.67%\n","\n","Epoch 21 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:35,  2.99s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [50/577 (9%)]\tLoss: 0.212503, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:30<02:05,  2.66s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [100/577 (18%)]\tLoss: 0.114743, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:43<01:50,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [150/577 (26%)]\tLoss: 0.219095, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:37,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [200/577 (35%)]\tLoss: 0.051763, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:23,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [250/577 (44%)]\tLoss: 0.221679, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:23<01:10,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [300/577 (53%)]\tLoss: 0.044176, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:36<00:57,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [350/577 (61%)]\tLoss: 0.242924, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:49<00:44,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [400/577 (70%)]\tLoss: 0.200868, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:02<00:31,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [450/577 (79%)]\tLoss: 0.487338, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:15<00:18,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [500/577 (88%)]\tLoss: 0.167395, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:27<00:04,  2.49s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [550/577 (96%)]\tLoss: 0.135154, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:32<00:00,  2.68s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6690, Accuracy: 72.67%\n","\n","Epoch 22 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:44,  3.17s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [50/577 (9%)]\tLoss: 0.161660, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:12,  2.82s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [100/577 (18%)]\tLoss: 0.353896, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:55,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [150/577 (26%)]\tLoss: 0.058160, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:41,  2.73s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [200/577 (35%)]\tLoss: 0.456584, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:28,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [250/577 (44%)]\tLoss: 0.162442, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:14,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [300/577 (53%)]\tLoss: 0.078187, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<01:00,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [350/577 (61%)]\tLoss: 0.070836, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:46,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [400/577 (70%)]\tLoss: 0.281396, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:32,  2.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [450/577 (79%)]\tLoss: 0.186069, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:16<00:18,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [500/577 (88%)]\tLoss: 0.151883, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:29<00:04,  2.50s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [550/577 (96%)]\tLoss: 0.255626, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.71s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6991, Accuracy: 66.67%\n","\n","Epoch 23 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:44,  3.16s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [50/577 (9%)]\tLoss: 0.189634, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:11,  2.80s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [100/577 (18%)]\tLoss: 0.193741, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:55,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [150/577 (26%)]\tLoss: 0.355659, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:41,  2.73s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [200/577 (35%)]\tLoss: 0.496722, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:28,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [250/577 (44%)]\tLoss: 0.796214, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:14,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [300/577 (53%)]\tLoss: 0.759632, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<01:00,  2.75s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [350/577 (61%)]\tLoss: 0.281379, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:46,  2.73s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [400/577 (70%)]\tLoss: 0.395977, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:32,  2.68s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [450/577 (79%)]\tLoss: 0.355245, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:15<00:18,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [500/577 (88%)]\tLoss: 0.253533, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:28<00:04,  2.47s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [550/577 (96%)]\tLoss: 0.121108, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:33<00:00,  2.69s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6648, Accuracy: 71.33%\n","\n","Epoch 24 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:47,  3.23s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [50/577 (9%)]\tLoss: 0.128990, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:12,  2.82s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [100/577 (18%)]\tLoss: 0.191947, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:56,  2.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [150/577 (26%)]\tLoss: 0.206350, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:41,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [200/577 (35%)]\tLoss: 0.018395, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:27,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [250/577 (44%)]\tLoss: 0.088370, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:14,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [300/577 (53%)]\tLoss: 0.038857, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<01:01,  2.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [350/577 (61%)]\tLoss: 0.138545, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:46,  2.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [400/577 (70%)]\tLoss: 0.188169, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:31,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [450/577 (79%)]\tLoss: 0.298889, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:16<00:18,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [500/577 (88%)]\tLoss: 0.465817, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:29<00:04,  2.45s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [550/577 (96%)]\tLoss: 0.097746, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.71s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.7740, Accuracy: 66.67%\n","\n","Epoch 25 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:47,  3.22s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [50/577 (9%)]\tLoss: 0.049356, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:11,  2.80s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [100/577 (18%)]\tLoss: 0.423760, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:51,  2.65s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [150/577 (26%)]\tLoss: 0.142090, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:36,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [200/577 (35%)]\tLoss: 0.148677, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:23,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [250/577 (44%)]\tLoss: 0.457069, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:23<01:10,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [300/577 (53%)]\tLoss: 0.089303, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:57,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [350/577 (61%)]\tLoss: 0.176704, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:44,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [400/577 (70%)]\tLoss: 0.427653, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:03<00:31,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [450/577 (79%)]\tLoss: 0.292417, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [500/577 (88%)]\tLoss: 0.442271, Accu: 60.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:04,  2.47s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [550/577 (96%)]\tLoss: 0.056691, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:35<00:00,  2.73s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.9172, Accuracy: 66.00%\n","\n","Epoch 26 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:34,  2.98s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [50/577 (9%)]\tLoss: 0.152564, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:03,  2.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [100/577 (18%)]\tLoss: 0.058893, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:48,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [150/577 (26%)]\tLoss: 0.294428, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:35,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [200/577 (35%)]\tLoss: 0.090734, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:22,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [250/577 (44%)]\tLoss: 0.110544, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [300/577 (53%)]\tLoss: 0.146316, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:57,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [350/577 (61%)]\tLoss: 0.956154, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:44,  2.64s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [400/577 (70%)]\tLoss: 0.386636, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:05<00:31,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [450/577 (79%)]\tLoss: 0.174850, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [500/577 (88%)]\tLoss: 0.475314, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:04,  2.49s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [550/577 (96%)]\tLoss: 0.715081, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:36<00:00,  2.74s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.7210, Accuracy: 72.67%\n","\n","Epoch 27 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:42,  3.12s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [50/577 (9%)]\tLoss: 0.139560, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:32<02:07,  2.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [100/577 (18%)]\tLoss: 0.142442, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:45<01:50,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [150/577 (26%)]\tLoss: 0.075832, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:36,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [200/577 (35%)]\tLoss: 0.166329, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:23,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [250/577 (44%)]\tLoss: 0.180787, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:25<01:09,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [300/577 (53%)]\tLoss: 0.034369, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:38<00:56,  2.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [350/577 (61%)]\tLoss: 0.361019, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:43,  2.55s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [400/577 (70%)]\tLoss: 0.162965, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:30,  2.56s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [450/577 (79%)]\tLoss: 0.338433, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [500/577 (88%)]\tLoss: 0.148869, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:04,  2.47s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [550/577 (96%)]\tLoss: 0.202019, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:36<00:00,  2.74s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.7434, Accuracy: 73.33%\n","\n","Epoch 28 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:18<02:44,  3.17s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [50/577 (9%)]\tLoss: 0.288062, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:31<02:05,  2.67s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [100/577 (18%)]\tLoss: 0.330011, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:50,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [150/577 (26%)]\tLoss: 0.114067, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:58<01:36,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [200/577 (35%)]\tLoss: 0.422797, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:11<01:23,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [250/577 (44%)]\tLoss: 0.028283, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:09,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [300/577 (53%)]\tLoss: 0.176523, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:56,  2.56s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [350/577 (61%)]\tLoss: 0.548362, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:51<00:44,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [400/577 (70%)]\tLoss: 0.420235, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:30,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [450/577 (79%)]\tLoss: 0.118843, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:18<00:18,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [500/577 (88%)]\tLoss: 0.563507, Accu: 70.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:31<00:04,  2.47s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [550/577 (96%)]\tLoss: 0.132804, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:36<00:00,  2.74s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 0.6455, Accuracy: 70.00%\n","\n","Epoch 29 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["  9%|▉         | 5/57 [00:17<02:34,  2.98s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [50/577 (9%)]\tLoss: 0.247996, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 18%|█▊        | 10/57 [00:30<02:02,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [100/577 (18%)]\tLoss: 0.346659, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 26%|██▋       | 15/57 [00:44<01:48,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [150/577 (26%)]\tLoss: 0.424398, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 35%|███▌      | 20/57 [00:57<01:35,  2.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [200/577 (35%)]\tLoss: 0.278443, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 44%|████▍     | 25/57 [01:10<01:22,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [250/577 (44%)]\tLoss: 0.172750, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|█████▎    | 30/57 [01:24<01:10,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [300/577 (53%)]\tLoss: 0.215584, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 35/57 [01:37<00:57,  2.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [350/577 (61%)]\tLoss: 0.263073, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 70%|███████   | 40/57 [01:50<00:44,  2.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [400/577 (70%)]\tLoss: 0.505883, Accu: 80.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 79%|███████▉  | 45/57 [02:04<00:31,  2.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [450/577 (79%)]\tLoss: 0.260715, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 88%|████████▊ | 50/57 [02:17<00:18,  2.62s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [500/577 (88%)]\tLoss: 0.200998, Accu: 90.00%\n"]},{"output_type":"stream","name":"stderr","text":[" 96%|█████████▋| 55/57 [02:30<00:05,  2.51s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [550/577 (96%)]\tLoss: 0.061305, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 57/57 [02:34<00:00,  2.72s/it]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (150 samples): Average loss: 1.1168, Accuracy: 66.00%\n","\n","Epoch 30 model saved!\n"]}]},{"cell_type":"code","source":["# plot\n","fig = plt.figure(figsize=(10, 4))\n","plt.subplot(121)\n","plt.plot(np.arange(1, epochs + 1), A[:, -1])  # train loss (on epoch end)\n","plt.plot(np.arange(1, epochs + 1), C)  #  test loss (on epoch end)\n","plt.title(\"model loss\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"loss\")\n","plt.legend([\"train\", \"test\"], loc=\"upper left\")\n","# 2nd figure\n","plt.subplot(122)\n","plt.plot(np.arange(1, epochs + 1), B[:, -1])  # train accuracy (on epoch end)\n","plt.plot(np.arange(1, epochs + 1), D)  #  test accuracy (on epoch end)\n","plt.title(\"training scores\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"accuracy\")\n","plt.legend([\"train\", \"test\"], loc=\"upper left\")\n","title = \"./fig_UCF101_ResNetCRNN.png\"\n","plt.savefig(title, dpi=600)\n","# plt.close(fig)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_DV93YaqFUG5","executionInfo":{"status":"ok","timestamp":1741100449517,"user_tz":-540,"elapsed":1664,"user":{"displayName":"심소민","userId":"13422866620659141828"}},"outputId":"d10b3131-db61-4637-d938-46912d9bba87"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"bn4Y-gw8N01T"},"execution_count":null,"outputs":[]}]}