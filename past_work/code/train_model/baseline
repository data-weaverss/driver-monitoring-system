{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# functions.py"],"metadata":{"id":"e243KGF9ifTR"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"ZdDyC79-c6OZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741080275422,"user_tz":-540,"elapsed":23001,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"outputId":"c70126fc-ff03-48e2-d66a-423c610b76bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cIxwAkjPiX-C"},"outputs":[],"source":["import os\n","import numpy as np\n","from PIL import Image\n","from torch.utils import data\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","from tqdm import tqdm\n","\n","\n","## ------------------- label conversion tools ------------------ ##\n","def labels2cat(label_encoder, list):\n","    return label_encoder.transform(list)\n","\n","\n","def labels2onehot(OneHotEncoder, label_encoder, list):\n","    return OneHotEncoder.transform(\n","        label_encoder.transform(list).reshape(-1, 1)\n","    ).toarray()\n","\n","\n","def onehot2labels(label_encoder, y_onehot):\n","    return label_encoder.inverse_transform(np.where(y_onehot == 1)[1]).tolist()\n","\n","\n","def cat2labels(label_encoder, y_cat):\n","    return label_encoder.inverse_transform(y_cat).tolist()\n","\n","\n","## ---------------------- Dataloaders ---------------------- ##\n","# for CRNN\n","class Dataset_CRNN(data.Dataset):\n","    # Pytorch의 Dataset을 상속받아 구현됨\n","\n","    def __init__(self, data_path, folders, labels, transform=None):\n","        \"Initialization\"\n","        self.data_path = data_path\n","        self.labels = labels\n","        self.folders = folders\n","        self.transform = transform\n","\n","    # 데이터 개수 반환\n","    # DataLoader가 batch를 만들 때, 전체 데이터 개수를 알 수 있도록 제공해야 함\n","    def __len__(self):\n","        \"Denotes the total number of samples\"\n","        return len(self.folders)\n","\n","    # 특정 비디오 폴더에서 원하는 프레임들을 불러옴\n","    def read_images(self, path, selected_folder, use_transform):\n","        X = []\n","\n","        frame_files = sorted([f for f in os.listdir(os.path.join(path, selected_folder)) if f.endswith('.jpg')])\n","\n","        for frame_filename in frame_files:\n","          frame_path = os.path.join(path, selected_folder, frame_filename)\n","\n","          image = Image.open(frame_path)\n","\n","          if use_transform is not None:\n","              image = use_transform(image)\n","\n","          X.append(image)\n","\n","        # 모델에 입력 가능하도록 1개의 텐서로 변환\n","        X = torch.stack(X, dim=0)\n","\n","        return X\n","\n","    def __getitem__(self, index):\n","        \"Generates one sample of data\"\n","        # Select sample\n","        folder = self.folders[index]\n","\n","        # Load data\n","        X = self.read_images(\n","            self.data_path, folder, self.transform\n","        )  # (input) spatial images\n","        y = torch.LongTensor(\n","            [self.labels[index]]\n","        )  # (labels) LongTensor are for int64 instead of FloatTensor\n","\n","        # print(X.shape)\n","        return X, y\n","\n","\n","## ---------------------- end of Dataloaders ---------------------- ##\n","\n","\n","## -------------------- (reload) model prediction ---------------------- ##\n","\n","def CRNN_final_prediction(model, device, loader):\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.eval()\n","    rnn_decoder.eval()\n","\n","    all_y_pred = []\n","    with torch.no_grad():\n","        for batch_idx, (X, y) in enumerate(tqdm(loader)):\n","            # distribute data to device\n","            X = X.to(device)\n","            output = rnn_decoder(cnn_encoder(X))\n","            y_pred = output.max(1, keepdim=True)[\n","                1\n","            ]  # location of max log-probability as prediction\n","            all_y_pred.extend(y_pred.cpu().data.squeeze().numpy().tolist())\n","\n","    return all_y_pred\n","\n","\n","## -------------------- end of model prediction ---------------------- ##\n","\n","\n","## ------------------------ CRNN module ---------------------- ##\n","\n","\n","def conv2D_output_size(img_size, padding, kernel_size, stride):\n","    # compute output shape of conv2D\n","    outshape = (\n","        np.floor(\n","            (img_size[0] + 2 * padding[0] - (kernel_size[0] - 1) - 1) / stride[0] + 1\n","        ).astype(int),\n","        np.floor(\n","            (img_size[1] + 2 * padding[1] - (kernel_size[1] - 1) - 1) / stride[1] + 1\n","        ).astype(int),\n","    )\n","    return outshape\n","\n","\n","# 2D CNN encoder train from scratch (no transfer learning)\n","class EncoderCNN(nn.Module):\n","    def __init__(\n","        self,\n","        img_x=90,\n","        img_y=120,\n","        fc_hidden1=512,\n","        fc_hidden2=512,\n","        drop_p=0.3,\n","        CNN_embed_dim=300,\n","    ):\n","        super(EncoderCNN, self).__init__()\n","\n","        self.img_x = img_x\n","        self.img_y = img_y\n","        self.CNN_embed_dim = CNN_embed_dim\n","\n","        # CNN architechtures\n","        self.ch1, self.ch2, self.ch3, self.ch4 = 32, 64, 128, 256\n","        self.k1, self.k2, self.k3, self.k4 = (\n","            (5, 5),\n","            (3, 3),\n","            (3, 3),\n","            (3, 3),\n","        )  # 2d kernal size\n","        self.s1, self.s2, self.s3, self.s4 = (\n","            (2, 2),\n","            (2, 2),\n","            (2, 2),\n","            (2, 2),\n","        )  # 2d strides\n","        self.pd1, self.pd2, self.pd3, self.pd4 = (\n","            (0, 0),\n","            (0, 0),\n","            (0, 0),\n","            (0, 0),\n","        )  # 2d padding\n","\n","        # conv2D output shapes\n","        self.conv1_outshape = conv2D_output_size(\n","            (self.img_x, self.img_y), self.pd1, self.k1, self.s1\n","        )  # Conv1 output shape\n","        self.conv2_outshape = conv2D_output_size(\n","            self.conv1_outshape, self.pd2, self.k2, self.s2\n","        )\n","        self.conv3_outshape = conv2D_output_size(\n","            self.conv2_outshape, self.pd3, self.k3, self.s3\n","        )\n","        self.conv4_outshape = conv2D_output_size(\n","            self.conv3_outshape, self.pd4, self.k4, self.s4\n","        )\n","\n","        # fully connected layer hidden nodes\n","        self.fc_hidden1, self.fc_hidden2 = fc_hidden1, fc_hidden2\n","        self.drop_p = drop_p\n","\n","        self.conv1 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=3,\n","                out_channels=self.ch1,\n","                kernel_size=self.k1,\n","                stride=self.s1,\n","                padding=self.pd1,\n","            ),\n","            nn.BatchNorm2d(self.ch1, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","        self.conv2 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch1,\n","                out_channels=self.ch2,\n","                kernel_size=self.k2,\n","                stride=self.s2,\n","                padding=self.pd2,\n","            ),\n","            nn.BatchNorm2d(self.ch2, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.conv3 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch2,\n","                out_channels=self.ch3,\n","                kernel_size=self.k3,\n","                stride=self.s3,\n","                padding=self.pd3,\n","            ),\n","            nn.BatchNorm2d(self.ch3, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.conv4 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch3,\n","                out_channels=self.ch4,\n","                kernel_size=self.k4,\n","                stride=self.s4,\n","                padding=self.pd4,\n","            ),\n","            nn.BatchNorm2d(self.ch4, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.drop = nn.Dropout2d(self.drop_p)\n","        self.pool = nn.MaxPool2d(2)\n","        self.fc1 = nn.Linear(\n","            self.ch4 * self.conv4_outshape[0] * self.conv4_outshape[1], self.fc_hidden1\n","        )  # fully connected layer, output k classes\n","        self.fc2 = nn.Linear(self.fc_hidden1, self.fc_hidden2)\n","        self.fc3 = nn.Linear(\n","            self.fc_hidden2, self.CNN_embed_dim\n","        )  # output = CNN embedding latent variables\n","\n","    def forward(self, x_3d):\n","        cnn_embed_seq = []\n","        for t in range(x_3d.size(1)):\n","            # CNNs\n","            x = self.conv1(x_3d[:, t, :, :, :])\n","            x = self.conv2(x)\n","            x = self.conv3(x)\n","            x = self.conv4(x)\n","            x = x.view(x.size(0), -1)  # flatten the output of conv\n","\n","            # FC layers\n","            x = F.relu(self.fc1(x))\n","            # x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = F.relu(self.fc2(x))\n","            x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = self.fc3(x)\n","            cnn_embed_seq.append(x)\n","\n","        # swap time and sample dim such that (sample dim, time dim, CNN latent dim)\n","        cnn_embed_seq = torch.stack(cnn_embed_seq, dim=0).transpose_(0, 1)\n","        # cnn_embed_seq: shape=(batch, time_step, input_size)\n","\n","        return cnn_embed_seq\n","\n","\n","# 2D CNN encoder using ResNet-152 pretrained\n","class ResCNNEncoder(nn.Module):\n","    def __init__(self, fc_hidden1=512, fc_hidden2=512, drop_p=0.3, CNN_embed_dim=300):\n","        \"\"\"Load the pretrained ResNet-152 and replace top fc layer.\"\"\"\n","        super(ResCNNEncoder, self).__init__()\n","\n","        self.fc_hidden1, self.fc_hidden2 = fc_hidden1, fc_hidden2\n","        self.drop_p = drop_p\n","\n","        resnet = models.resnet152(pretrained=True)\n","        modules = list(resnet.children())[:-1]  # delete the last fc layer.\n","        self.resnet = nn.Sequential(*modules)\n","        self.fc1 = nn.Linear(resnet.fc.in_features, fc_hidden1)\n","        self.bn1 = nn.BatchNorm1d(fc_hidden1, momentum=0.01)\n","        self.fc2 = nn.Linear(fc_hidden1, fc_hidden2)\n","        self.bn2 = nn.BatchNorm1d(fc_hidden2, momentum=0.01)\n","        self.fc3 = nn.Linear(fc_hidden2, CNN_embed_dim)\n","\n","    def forward(self, x_3d):\n","        cnn_embed_seq = []\n","        for t in range(x_3d.size(1)):\n","            # ResNet CNN\n","            with torch.no_grad():\n","                x = self.resnet(x_3d[:, t, :, :, :])  # ResNet\n","                x = x.view(x.size(0), -1)  # flatten output of conv\n","\n","            # FC layers\n","            x = self.bn1(self.fc1(x))\n","            x = F.relu(x)\n","            x = self.bn2(self.fc2(x))\n","            x = F.relu(x)\n","            x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = self.fc3(x)\n","\n","            cnn_embed_seq.append(x)\n","\n","        # swap time and sample dim such that (sample dim, time dim, CNN latent dim)\n","        cnn_embed_seq = torch.stack(cnn_embed_seq, dim=0).transpose_(0, 1)\n","        # cnn_embed_seq: shape=(batch, time_step, input_size)\n","\n","        return cnn_embed_seq\n","\n","\n","class DecoderRNN(nn.Module):\n","    def __init__(\n","        self,\n","        CNN_embed_dim=300,\n","        h_RNN_layers=3,\n","        h_RNN=256,\n","        h_FC_dim=128,\n","        drop_p=0.3,\n","        num_classes=50,\n","    ):\n","        super(DecoderRNN, self).__init__()\n","\n","        self.RNN_input_size = CNN_embed_dim  # CNN에서 온 512차원 벡터 입력\n","        self.h_RNN_layers = h_RNN_layers  # RNN hidden layers(512)\n","        self.h_RNN = h_RNN\n","        self.h_FC_dim = h_FC_dim\n","        self.drop_p = drop_p\n","        self.num_classes = num_classes\n","\n","        self.LSTM = nn.LSTM(\n","            input_size=self.RNN_input_size,\n","            hidden_size=self.h_RNN,\n","            num_layers=h_RNN_layers,\n","            batch_first=True,  # input & output will has batch size as 1s dimension. e.g. (batch, time_step, input_size)\n","        )\n","\n","        self.fc1 = nn.Linear(self.h_RNN, self.h_FC_dim)\n","        self.fc2 = nn.Linear(self.h_FC_dim, self.num_classes)\n","\n","    def forward(self, x_RNN):\n","\n","        self.LSTM.flatten_parameters()\n","        RNN_out, (h_n, h_c) = self.LSTM(x_RNN, None)\n","        \"\"\" h_n shape (n_layers, batch, hidden_size), h_c shape (n_layers, batch, hidden_size) \"\"\"\n","        \"\"\" None represents zero initial hidden state. RNN_out has shape=(batch, time_step, output_size) \"\"\"\n","\n","        # FC layers\n","        x = self.fc1(RNN_out[:, -1, :])  # choose RNN_out at the last time step\n","        x = F.relu(x)\n","        x = F.dropout(x, p=self.drop_p, training=self.training)\n","        x = self.fc2(x)\n","\n","        return x\n","\n","\n","## ---------------------- end of CRNN module ---------------------- ##\n"]},{"cell_type":"markdown","source":["## ResNetCRNN"],"metadata":{"id":"gfbvxru3i1BB"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","import torch.utils.data as data\n","import torchvision\n","from torch.autograd import Variable\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","from sklearn.metrics import accuracy_score\n","\n","torch.backends.cudnn.benchmark = True\n","torch.backends.cudnn.enabled = True\n","\n","# 데이터 경로\n","data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset\"\n","train_data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset/train_dataset\"\n","test_data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset/test_dataset\"\n","save_model_path = \"/content/drive/MyDrive/DMS/ResNetCRNN_baseline_ckpt\"  # 학습된 모델 저장 경로\n","\n","# CNN(ResNet) 설정\n","CNN_fc_hidden1, CNN_fc_hidden2 = 1024, 768  # 첫번째, 두번째 fc layer 뉴런 개수\n","CNN_embed_dim = 512  # 2D CNN이 추출하는 특징 벡터 크기\n","res_size = 224  # ResNet 이미지 크기\n","dropout_p = 0.0  # 드롭아웃 비율\n","\n","# RNN 설정\n","# RNN 출력(512 차원) -> 256차원으로 변환\n","RNN_hidden_layers = 3  # 3-layer LSTM\n","# 각 time step 마다 RNN이 기억하는 상태 크기, RNN의 출력 크기도 기본적으로 512\n","RNN_hidden_nodes = 512\n","RNN_FC_dim = 256\n","\n","# 학습 파라미터\n","k = 4  # Normal, Yawning, PhoneCall, Text\n","epochs = 15 # 총 학습 횟수\n","batch_size = 32\n","learning_rate = 1e-3\n","log_interval = 5  # 몇 번의 배치마다 로그를 출력할지\n","\n","\n","from torch.cuda.amp import GradScaler, autocast\n","\n","scaler = GradScaler()\n","\n","def train(log_interval, model, device, train_loader, optimizer, epoch):\n","    # set model as training mode\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.train()\n","    rnn_decoder.train()\n","\n","    losses = []\n","    scores = []\n","    N_count = 0  # 총 학습 샘플 수\n","    for batch_idx, (X, y) in enumerate(train_loader):  # 배치 단위로 데이터 로드\n","        # distribute data to device\n","        X, y = X.to(device), y.to(device).view(\n","            -1,\n","        )\n","\n","        N_count += X.size(0)\n","        optimizer.zero_grad(set_to_none=True)\n","\n","        with torch.amp.autocast('cuda'):  # ✅ FP16 적용, Mixed Precision\n","            output = rnn_decoder(cnn_encoder(X))\n","            loss = F.cross_entropy(output, y)\n","\n","        # output = rnn_decoder(  # CNN + RNN 통과\n","        #     cnn_encoder(X)\n","        # )  # output has dim = (batch, number of classes)\n","\n","        # loss = F.cross_entropy(output, y)  # 손실 함수 계산\n","\n","        scaler.scale(loss).backward()  # ✅ FP16 적용\n","        scaler.step(optimizer)  # ✅ FP16 적용\n","        scaler.update()  # ✅ FP16 적용\n","\n","        losses.append(loss.item())\n","\n","        # to compute accuracy\n","        # torch.max() -> 샘플에서 가장 큰 점수를 가진 클래스 값과 해당 클래스 인덱스를 반환\n","        # 반환된 튜플에서 두번째 값(인덱스)를 선택하여, 각 샘플의 예측된 클래스 인덱스를 y_pred에 저장\n","        y_pred = torch.max(output, 1)[1]\n","        # 해당 배치에서의 정확도\n","        step_score = accuracy_score(\n","            # GPU에 있던 데이터를 GPU로 옮김\n","            y.cpu().data.squeeze().numpy(),\n","            y_pred.cpu().data.squeeze().numpy(),\n","        )\n","        scores.append(step_score)  # computed on CPU\n","\n","        # loss.backward()  # 역전파 수행 = 각 파라미터에 대한 기울기를 계산\n","        # optimizer.step()  # 계산된 기울기를 기반으로 모델의 파라미터를 업데이트\n","\n","        # show information\n","        if (batch_idx + 1) % log_interval == 0:\n","            print(\n","                \"Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}, Accu: {:.2f}%\".format(\n","                    epoch + 1,\n","                    N_count,\n","                    len(train_loader.dataset),\n","                    100.0 * (batch_idx + 1) / len(train_loader),\n","                    loss.item(),\n","                    100 * step_score,\n","                )\n","            )\n","\n","    return losses, scores\n","\n","\n","def validation(model, device, optimizer, test_loader):\n","    # set model as testing mode\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.eval()\n","    rnn_decoder.eval()\n","\n","    test_loss = 0\n","    all_y = []\n","    all_y_pred = []\n","    with torch.no_grad():\n","        for X, y in test_loader:\n","            # distribute data to device\n","            X, y = X.to(device), y.to(device).view(\n","                -1,\n","            )\n","\n","            output = rnn_decoder(cnn_encoder(X))\n","\n","            loss = F.cross_entropy(output, y, reduction=\"sum\")\n","            test_loss += loss.item()  # sum up batch loss\n","            y_pred = output.max(1, keepdim=True)[\n","                1\n","            ]  # (y_pred != output) get the index of the max log-probability\n","\n","            # collect all y and y_pred in all batches\n","            all_y.extend(y)\n","            all_y_pred.extend(y_pred)\n","\n","    test_loss /= len(test_loader.dataset)\n","\n","    # compute accuracy\n","    all_y = torch.stack(all_y, dim=0)\n","    all_y_pred = torch.stack(all_y_pred, dim=0)\n","    test_score = accuracy_score(\n","        all_y.cpu().data.squeeze().numpy(), all_y_pred.cpu().data.squeeze().numpy()\n","    )\n","\n","    # show information\n","    print(\n","        \"\\nTest set ({:d} samples): Average loss: {:.4f}, Accuracy: {:.2f}%\\n\".format(\n","            len(all_y), test_loss, 100 * test_score\n","        )\n","    )\n","\n","    os.makedirs(save_model_path, exist_ok=True)\n","\n","    # save Pytorch models of best record\n","    torch.save(\n","        cnn_encoder.state_dict(),\n","        os.path.join(save_model_path, \"cnn_encoder_epoch{}.pth\".format(epoch + 1)),\n","    )  # save spatial_encoder\n","    torch.save(\n","        rnn_decoder.state_dict(),\n","        os.path.join(save_model_path, \"rnn_decoder_epoch{}.pth\".format(epoch + 1)),\n","    )  # save motion_encoder\n","    torch.save(\n","        optimizer.state_dict(),\n","        os.path.join(save_model_path, \"optimizer_epoch{}.pth\".format(epoch + 1)),\n","    )  # save optimizer\n","    print(\"Epoch {} model saved!\".format(epoch + 1))\n","\n","    return test_loss, test_score\n","\n","\n","use_cuda = torch.cuda.is_available()  # GPU 사용 여부 확인\n","device = torch.device(\"cuda\" if use_cuda else \"cpu\")  # use CPU or GPU\n","\n","# 데이터 로더 파라미터\n","params = (\n","    {\n","        \"batch_size\": batch_size,  # 한 번에 처리할 데이터 개수\n","        \"shuffle\": True,  # 데이터 섞기\n","        \"num_workers\": 8,  # 데이터를 로드하는 프로세스 개수 (병렬 처리))\n","        \"pin_memory\": True,  # CUDA 사용 시 메모리 핀 설정으로 속도 향상\n","        \"persistent_workers\": True, # worker 프로세스 유지하여 속도 증가\n","        \"prefetch_factor\": 4 # 미리 데이터를 4배 더 로드하여 속도 향상\n","    }\n","    if use_cuda\n","    else {}\n",")\n","\n","\n","action_names = ['normal', 'phonecall', 'text', 'yawn']\n","\n","# convert labels -> category\n","le = LabelEncoder()\n","le.fit(action_names)\n","\n","# show how many classes there are\n","list(le.classes_)\n","\n","# convert category -> 1-hot\n","action_category = le.transform(action_names).reshape(-1, 1)\n","enc = OneHotEncoder()\n","enc.fit(action_category)\n","\n","train_fnames = os.listdir(train_data_path)\n","test_fnames = os.listdir(test_data_path)\n","\n","train_actions = []\n","train_files = []\n","test_actions = []\n","test_files = []\n","\n","for label_dir in train_fnames: # normal_DMD, normal_yawDD, phonecall_DMD, text_DMD, yawn_yawDD\n","    label_dirs_path = os.path.join(train_data_path, label_dir)\n","    label = label_dir.split('_')[0]\n","\n","    for clipped_dirs in os.listdir(label_dirs_path):\n","        file_path = os.path.join(\"train_dataset\", label_dir, clipped_dirs)\n","        train_actions.append(label)  # 파일의 액션(Label) 저장\n","        train_files.append(file_path)  # 전체 파일 경로 저장\n","\n","for label_dir in test_fnames: # normal_DMD, normal_yawDD, phonecall_DMD, text_DMD, yawn_yawDD\n","    label_dirs_path = os.path.join(test_data_path, label_dir)\n","    label = label_dir.split('_')[0]\n","\n","    for clipped_dirs in os.listdir(label_dirs_path):\n","        file_path = os.path.join(\"test_dataset\", label_dir, clipped_dirs)\n","        test_actions.append(label)  # 파일의 액션(Label) 저장\n","        test_files.append(file_path)  # 전체 파일 경로 저장\n","\n","train_list = train_files\n","test_list = test_files\n","train_label = labels2cat(le, train_actions)\n","test_label = labels2cat(le, test_actions)\n","\n","# 데이터 변환\n","transform = transforms.Compose(\n","    [\n","        transforms.Resize([res_size, res_size]),  # 입력 이미지 크기 조정\n","        transforms.ToTensor(),  # 이미지를 텐서로 변환\n","        # ImageNet의 평균 및 표준편차를 사용하여 정규화\n","        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","    ]\n",")\n","\n","# 데이터셋 생성\n","train_set, valid_set = Dataset_CRNN(\n","    data_path, train_list, train_label, transform=transform\n","), Dataset_CRNN(data_path, test_list, test_label, transform=transform)\n","\n","train_loader = data.DataLoader(train_set, **params)\n","valid_loader = data.DataLoader(valid_set, **params)\n","\n","\n","# Create model\n","cnn_encoder = ResCNNEncoder(\n","    fc_hidden1=CNN_fc_hidden1,\n","    fc_hidden2=CNN_fc_hidden2,\n","    drop_p=dropout_p,\n","    CNN_embed_dim=CNN_embed_dim,\n",").to(device)\n","rnn_decoder = DecoderRNN(\n","    CNN_embed_dim=CNN_embed_dim,\n","    h_RNN_layers=RNN_hidden_layers,\n","    h_RNN=RNN_hidden_nodes,\n","    h_FC_dim=RNN_FC_dim,\n","    drop_p=dropout_p,\n","    num_classes=k,\n",").to(device)\n","\n","# Parallelize model to multiple GPUs\n","if torch.cuda.device_count() > 1:\n","    print(\"Using\", torch.cuda.device_count(), \"GPUs!\")\n","    cnn_encoder = nn.DataParallel(cnn_encoder)\n","    rnn_decoder = nn.DataParallel(rnn_decoder)\n","\n","    # Combine all EncoderCNN + DecoderRNN parameters\n","    crnn_params = (\n","        list(cnn_encoder.module.fc1.parameters())\n","        + list(cnn_encoder.module.bn1.parameters())\n","        + list(cnn_encoder.module.fc2.parameters())\n","        + list(cnn_encoder.module.bn2.parameters())\n","        + list(cnn_encoder.module.fc3.parameters())\n","        + list(rnn_decoder.parameters())\n","    )\n","\n","elif torch.cuda.device_count() == 1:\n","    print(\"Using\", torch.cuda.device_count(), \"GPU!\")\n","    # Combine all EncoderCNN + DecoderRNN parameters\n","    crnn_params = (\n","        list(cnn_encoder.fc1.parameters())\n","        + list(cnn_encoder.bn1.parameters())\n","        + list(cnn_encoder.fc2.parameters())\n","        + list(cnn_encoder.bn2.parameters())\n","        + list(cnn_encoder.fc3.parameters())\n","        + list(rnn_decoder.parameters())\n","    )\n","\n","optimizer = torch.optim.Adam(crnn_params, lr=learning_rate)\n","\n","\n","# 학습 및 검증 손실과 정확도를 저장할 리스트 생성\n","epoch_train_losses = []\n","epoch_train_scores = []\n","epoch_test_losses = []\n","epoch_test_scores = []\n","\n","# 학습 진행\n","for epoch in range(epochs):\n","    # train, test model\n","    train_losses, train_scores = train(\n","        log_interval, [cnn_encoder, rnn_decoder], device, train_loader, optimizer, epoch\n","    )\n","    epoch_test_loss, epoch_test_score = validation(\n","        [cnn_encoder, rnn_decoder], device, optimizer, valid_loader\n","    )\n","\n","    # save results\n","    epoch_train_losses.append(train_losses)\n","    epoch_train_scores.append(train_scores)\n","    epoch_test_losses.append(epoch_test_loss)\n","    epoch_test_scores.append(epoch_test_score)\n","\n","    # save all train test results\n","    A = np.array(epoch_train_losses)\n","    B = np.array(epoch_train_scores)\n","    C = np.array(epoch_test_losses)\n","    D = np.array(epoch_test_scores)\n","    np.save(\"./CRNN_epoch_training_losses.npy\", A)\n","    np.save(\"./CRNN_epoch_training_scores.npy\", B)\n","    np.save(\"./CRNN_epoch_test_loss.npy\", C)\n","    np.save(\"./CRNN_epoch_test_score.npy\", D)\n","\n","# plot\n","fig = plt.figure(figsize=(10, 4))\n","plt.subplot(121)\n","plt.plot(np.arange(1, epochs + 1), A[:, -1])  # train loss (on epoch end)\n","plt.plot(np.arange(1, epochs + 1), C)  #  test loss (on epoch end)\n","plt.title(\"model loss\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"loss\")\n","plt.legend([\"train\", \"test\"], loc=\"upper left\")\n","# 2nd figure\n","plt.subplot(122)\n","plt.plot(np.arange(1, epochs + 1), B[:, -1])  # train accuracy (on epoch end)\n","plt.plot(np.arange(1, epochs + 1), D)  #  test accuracy (on epoch end)\n","plt.title(\"training scores\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"accuracy\")\n","plt.legend([\"train\", \"test\"], loc=\"upper left\")\n","title = \"./fig_UCF101_ResNetCRNN.png\"\n","plt.savefig(title, dpi=600)\n","# plt.close(fig)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"xAl2D7eli28a","outputId":"c736650f-280f-49ba-b6a5-d6874651e163","executionInfo":{"status":"ok","timestamp":1741095766616,"user_tz":-540,"elapsed":13865837,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-88a569b17b96>:47: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n","  scaler = GradScaler()\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet152_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet152_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"output_type":"stream","name":"stdout","text":["Using 1 GPU!\n","Train Epoch: 1 [160/8706 (2%)]\tLoss: 0.719498, Accu: 68.75%\n","Train Epoch: 1 [320/8706 (4%)]\tLoss: 0.738953, Accu: 75.00%\n","Train Epoch: 1 [480/8706 (5%)]\tLoss: 0.697296, Accu: 75.00%\n","Train Epoch: 1 [640/8706 (7%)]\tLoss: 0.974464, Accu: 75.00%\n","Train Epoch: 1 [800/8706 (9%)]\tLoss: 0.569347, Accu: 84.38%\n","Train Epoch: 1 [960/8706 (11%)]\tLoss: 0.440384, Accu: 90.62%\n","Train Epoch: 1 [1120/8706 (13%)]\tLoss: 0.519763, Accu: 87.50%\n","Train Epoch: 1 [1280/8706 (15%)]\tLoss: 0.739320, Accu: 84.38%\n","Train Epoch: 1 [1440/8706 (16%)]\tLoss: 0.699423, Accu: 78.12%\n","Train Epoch: 1 [1600/8706 (18%)]\tLoss: 0.695271, Accu: 78.12%\n","Train Epoch: 1 [1760/8706 (20%)]\tLoss: 0.627411, Accu: 81.25%\n","Train Epoch: 1 [1920/8706 (22%)]\tLoss: 0.533722, Accu: 87.50%\n","Train Epoch: 1 [2080/8706 (24%)]\tLoss: 0.526038, Accu: 84.38%\n","Train Epoch: 1 [2240/8706 (26%)]\tLoss: 0.772876, Accu: 78.12%\n","Train Epoch: 1 [2400/8706 (27%)]\tLoss: 0.467975, Accu: 90.62%\n","Train Epoch: 1 [2560/8706 (29%)]\tLoss: 0.469612, Accu: 90.62%\n","Train Epoch: 1 [2720/8706 (31%)]\tLoss: 0.589647, Accu: 81.25%\n","Train Epoch: 1 [2880/8706 (33%)]\tLoss: 0.298603, Accu: 93.75%\n","Train Epoch: 1 [3040/8706 (35%)]\tLoss: 0.471839, Accu: 84.38%\n","Train Epoch: 1 [3200/8706 (37%)]\tLoss: 0.687717, Accu: 81.25%\n","Train Epoch: 1 [3360/8706 (38%)]\tLoss: 0.390936, Accu: 90.62%\n","Train Epoch: 1 [3520/8706 (40%)]\tLoss: 0.386955, Accu: 90.62%\n","Train Epoch: 1 [3680/8706 (42%)]\tLoss: 0.319474, Accu: 93.75%\n","Train Epoch: 1 [3840/8706 (44%)]\tLoss: 0.622994, Accu: 81.25%\n","Train Epoch: 1 [4000/8706 (46%)]\tLoss: 0.384700, Accu: 87.50%\n","Train Epoch: 1 [4160/8706 (48%)]\tLoss: 0.766201, Accu: 75.00%\n","Train Epoch: 1 [4320/8706 (49%)]\tLoss: 0.614100, Accu: 78.12%\n","Train Epoch: 1 [4480/8706 (51%)]\tLoss: 0.554115, Accu: 81.25%\n","Train Epoch: 1 [4640/8706 (53%)]\tLoss: 0.302602, Accu: 93.75%\n","Train Epoch: 1 [4800/8706 (55%)]\tLoss: 0.325914, Accu: 93.75%\n","Train Epoch: 1 [4960/8706 (57%)]\tLoss: 0.362456, Accu: 90.62%\n","Train Epoch: 1 [5120/8706 (59%)]\tLoss: 0.444792, Accu: 87.50%\n","Train Epoch: 1 [5280/8706 (60%)]\tLoss: 0.493828, Accu: 81.25%\n","Train Epoch: 1 [5440/8706 (62%)]\tLoss: 0.457864, Accu: 87.50%\n","Train Epoch: 1 [5600/8706 (64%)]\tLoss: 0.481379, Accu: 84.38%\n","Train Epoch: 1 [5760/8706 (66%)]\tLoss: 0.465978, Accu: 90.62%\n","Train Epoch: 1 [5920/8706 (68%)]\tLoss: 0.719513, Accu: 75.00%\n","Train Epoch: 1 [6080/8706 (70%)]\tLoss: 0.387860, Accu: 90.62%\n","Train Epoch: 1 [6240/8706 (71%)]\tLoss: 0.539050, Accu: 81.25%\n","Train Epoch: 1 [6400/8706 (73%)]\tLoss: 0.427479, Accu: 90.62%\n","Train Epoch: 1 [6560/8706 (75%)]\tLoss: 0.530786, Accu: 81.25%\n","Train Epoch: 1 [6720/8706 (77%)]\tLoss: 0.426411, Accu: 84.38%\n","Train Epoch: 1 [6880/8706 (79%)]\tLoss: 0.414994, Accu: 87.50%\n","Train Epoch: 1 [7040/8706 (81%)]\tLoss: 0.375513, Accu: 90.62%\n","Train Epoch: 1 [7200/8706 (82%)]\tLoss: 0.686291, Accu: 81.25%\n","Train Epoch: 1 [7360/8706 (84%)]\tLoss: 0.424624, Accu: 84.38%\n","Train Epoch: 1 [7520/8706 (86%)]\tLoss: 0.701324, Accu: 75.00%\n","Train Epoch: 1 [7680/8706 (88%)]\tLoss: 0.517506, Accu: 84.38%\n","Train Epoch: 1 [7840/8706 (90%)]\tLoss: 0.393248, Accu: 87.50%\n","Train Epoch: 1 [8000/8706 (92%)]\tLoss: 0.369946, Accu: 90.62%\n","Train Epoch: 1 [8160/8706 (93%)]\tLoss: 0.863725, Accu: 84.38%\n","Train Epoch: 1 [8320/8706 (95%)]\tLoss: 0.967435, Accu: 78.12%\n","Train Epoch: 1 [8480/8706 (97%)]\tLoss: 0.467566, Accu: 90.62%\n","Train Epoch: 1 [8640/8706 (99%)]\tLoss: 0.412374, Accu: 87.50%\n","\n","Test set (1959 samples): Average loss: 1.0182, Accuracy: 70.04%\n","\n","Epoch 1 model saved!\n","Train Epoch: 2 [160/8706 (2%)]\tLoss: 0.542271, Accu: 81.25%\n","Train Epoch: 2 [320/8706 (4%)]\tLoss: 0.739601, Accu: 71.88%\n","Train Epoch: 2 [480/8706 (5%)]\tLoss: 0.503906, Accu: 84.38%\n","Train Epoch: 2 [640/8706 (7%)]\tLoss: 0.503756, Accu: 81.25%\n","Train Epoch: 2 [800/8706 (9%)]\tLoss: 0.280652, Accu: 93.75%\n","Train Epoch: 2 [960/8706 (11%)]\tLoss: 0.465386, Accu: 87.50%\n","Train Epoch: 2 [1120/8706 (13%)]\tLoss: 0.273214, Accu: 87.50%\n","Train Epoch: 2 [1280/8706 (15%)]\tLoss: 0.764959, Accu: 65.62%\n","Train Epoch: 2 [1440/8706 (16%)]\tLoss: 0.550013, Accu: 78.12%\n","Train Epoch: 2 [1600/8706 (18%)]\tLoss: 0.518903, Accu: 81.25%\n","Train Epoch: 2 [1760/8706 (20%)]\tLoss: 0.505894, Accu: 71.88%\n","Train Epoch: 2 [1920/8706 (22%)]\tLoss: 0.373873, Accu: 87.50%\n","Train Epoch: 2 [2080/8706 (24%)]\tLoss: 0.494268, Accu: 81.25%\n","Train Epoch: 2 [2240/8706 (26%)]\tLoss: 0.378986, Accu: 87.50%\n","Train Epoch: 2 [2400/8706 (27%)]\tLoss: 0.545913, Accu: 81.25%\n","Train Epoch: 2 [2560/8706 (29%)]\tLoss: 0.584663, Accu: 84.38%\n","Train Epoch: 2 [2720/8706 (31%)]\tLoss: 0.509703, Accu: 81.25%\n","Train Epoch: 2 [2880/8706 (33%)]\tLoss: 0.683130, Accu: 81.25%\n","Train Epoch: 2 [3040/8706 (35%)]\tLoss: 0.340229, Accu: 87.50%\n","Train Epoch: 2 [3200/8706 (37%)]\tLoss: 0.566078, Accu: 78.12%\n","Train Epoch: 2 [3360/8706 (38%)]\tLoss: 0.510213, Accu: 84.38%\n","Train Epoch: 2 [3520/8706 (40%)]\tLoss: 0.489694, Accu: 81.25%\n","Train Epoch: 2 [3680/8706 (42%)]\tLoss: 0.265618, Accu: 93.75%\n","Train Epoch: 2 [3840/8706 (44%)]\tLoss: 0.400958, Accu: 87.50%\n","Train Epoch: 2 [4000/8706 (46%)]\tLoss: 0.493322, Accu: 87.50%\n","Train Epoch: 2 [4160/8706 (48%)]\tLoss: 0.377959, Accu: 87.50%\n","Train Epoch: 2 [4320/8706 (49%)]\tLoss: 0.367924, Accu: 84.38%\n","Train Epoch: 2 [4480/8706 (51%)]\tLoss: 0.608690, Accu: 71.88%\n","Train Epoch: 2 [4640/8706 (53%)]\tLoss: 0.268273, Accu: 93.75%\n","Train Epoch: 2 [4800/8706 (55%)]\tLoss: 0.408166, Accu: 84.38%\n","Train Epoch: 2 [4960/8706 (57%)]\tLoss: 0.271345, Accu: 93.75%\n","Train Epoch: 2 [5120/8706 (59%)]\tLoss: 0.423284, Accu: 84.38%\n","Train Epoch: 2 [5280/8706 (60%)]\tLoss: 0.366753, Accu: 84.38%\n","Train Epoch: 2 [5440/8706 (62%)]\tLoss: 0.815840, Accu: 71.88%\n","Train Epoch: 2 [5600/8706 (64%)]\tLoss: 0.368925, Accu: 84.38%\n","Train Epoch: 2 [5760/8706 (66%)]\tLoss: 0.427056, Accu: 84.38%\n","Train Epoch: 2 [5920/8706 (68%)]\tLoss: 0.388618, Accu: 87.50%\n","Train Epoch: 2 [6080/8706 (70%)]\tLoss: 0.264299, Accu: 93.75%\n","Train Epoch: 2 [6240/8706 (71%)]\tLoss: 0.482969, Accu: 84.38%\n","Train Epoch: 2 [6400/8706 (73%)]\tLoss: 0.351652, Accu: 87.50%\n","Train Epoch: 2 [6560/8706 (75%)]\tLoss: 0.373052, Accu: 87.50%\n","Train Epoch: 2 [6720/8706 (77%)]\tLoss: 0.528908, Accu: 78.12%\n","Train Epoch: 2 [6880/8706 (79%)]\tLoss: 0.356173, Accu: 84.38%\n","Train Epoch: 2 [7040/8706 (81%)]\tLoss: 0.353177, Accu: 87.50%\n","Train Epoch: 2 [7200/8706 (82%)]\tLoss: 0.688881, Accu: 71.88%\n","Train Epoch: 2 [7360/8706 (84%)]\tLoss: 0.241077, Accu: 93.75%\n","Train Epoch: 2 [7520/8706 (86%)]\tLoss: 0.361860, Accu: 87.50%\n","Train Epoch: 2 [7680/8706 (88%)]\tLoss: 0.403546, Accu: 87.50%\n","Train Epoch: 2 [7840/8706 (90%)]\tLoss: 0.266427, Accu: 90.62%\n","Train Epoch: 2 [8000/8706 (92%)]\tLoss: 0.303704, Accu: 87.50%\n","Train Epoch: 2 [8160/8706 (93%)]\tLoss: 0.414930, Accu: 81.25%\n","Train Epoch: 2 [8320/8706 (95%)]\tLoss: 0.387167, Accu: 87.50%\n","Train Epoch: 2 [8480/8706 (97%)]\tLoss: 0.314205, Accu: 87.50%\n","Train Epoch: 2 [8640/8706 (99%)]\tLoss: 0.115077, Accu: 100.00%\n","\n","Test set (1959 samples): Average loss: 0.7259, Accuracy: 74.02%\n","\n","Epoch 2 model saved!\n","Train Epoch: 3 [160/8706 (2%)]\tLoss: 0.455880, Accu: 84.38%\n","Train Epoch: 3 [320/8706 (4%)]\tLoss: 0.264114, Accu: 93.75%\n","Train Epoch: 3 [480/8706 (5%)]\tLoss: 0.616062, Accu: 81.25%\n","Train Epoch: 3 [640/8706 (7%)]\tLoss: 0.331333, Accu: 90.62%\n","Train Epoch: 3 [800/8706 (9%)]\tLoss: 0.348114, Accu: 87.50%\n","Train Epoch: 3 [960/8706 (11%)]\tLoss: 0.147023, Accu: 93.75%\n","Train Epoch: 3 [1120/8706 (13%)]\tLoss: 0.394110, Accu: 84.38%\n","Train Epoch: 3 [1280/8706 (15%)]\tLoss: 0.309346, Accu: 90.62%\n","Train Epoch: 3 [1440/8706 (16%)]\tLoss: 0.523739, Accu: 75.00%\n","Train Epoch: 3 [1600/8706 (18%)]\tLoss: 0.423404, Accu: 81.25%\n","Train Epoch: 3 [1760/8706 (20%)]\tLoss: 0.243849, Accu: 93.75%\n","Train Epoch: 3 [1920/8706 (22%)]\tLoss: 0.418346, Accu: 78.12%\n","Train Epoch: 3 [2080/8706 (24%)]\tLoss: 0.321042, Accu: 87.50%\n","Train Epoch: 3 [2240/8706 (26%)]\tLoss: 0.536065, Accu: 78.12%\n","Train Epoch: 3 [2400/8706 (27%)]\tLoss: 0.314683, Accu: 93.75%\n","Train Epoch: 3 [2560/8706 (29%)]\tLoss: 0.289886, Accu: 87.50%\n","Train Epoch: 3 [2720/8706 (31%)]\tLoss: 0.278244, Accu: 87.50%\n","Train Epoch: 3 [2880/8706 (33%)]\tLoss: 0.261557, Accu: 96.88%\n","Train Epoch: 3 [3040/8706 (35%)]\tLoss: 0.243161, Accu: 93.75%\n","Train Epoch: 3 [3200/8706 (37%)]\tLoss: 0.348837, Accu: 84.38%\n","Train Epoch: 3 [3360/8706 (38%)]\tLoss: 0.338170, Accu: 87.50%\n","Train Epoch: 3 [3520/8706 (40%)]\tLoss: 0.365927, Accu: 81.25%\n","Train Epoch: 3 [3680/8706 (42%)]\tLoss: 0.238289, Accu: 93.75%\n","Train Epoch: 3 [3840/8706 (44%)]\tLoss: 0.231768, Accu: 90.62%\n","Train Epoch: 3 [4000/8706 (46%)]\tLoss: 0.432655, Accu: 75.00%\n","Train Epoch: 3 [4160/8706 (48%)]\tLoss: 0.457005, Accu: 84.38%\n","Train Epoch: 3 [4320/8706 (49%)]\tLoss: 0.213746, Accu: 90.62%\n","Train Epoch: 3 [4480/8706 (51%)]\tLoss: 0.383765, Accu: 81.25%\n","Train Epoch: 3 [4640/8706 (53%)]\tLoss: 0.252573, Accu: 90.62%\n","Train Epoch: 3 [4800/8706 (55%)]\tLoss: 0.274016, Accu: 84.38%\n","Train Epoch: 3 [4960/8706 (57%)]\tLoss: 0.218772, Accu: 90.62%\n","Train Epoch: 3 [5120/8706 (59%)]\tLoss: 0.479753, Accu: 81.25%\n","Train Epoch: 3 [5280/8706 (60%)]\tLoss: 0.232057, Accu: 93.75%\n","Train Epoch: 3 [5440/8706 (62%)]\tLoss: 0.176082, Accu: 87.50%\n","Train Epoch: 3 [5600/8706 (64%)]\tLoss: 0.144190, Accu: 93.75%\n","Train Epoch: 3 [5760/8706 (66%)]\tLoss: 0.198423, Accu: 90.62%\n","Train Epoch: 3 [5920/8706 (68%)]\tLoss: 0.383289, Accu: 81.25%\n","Train Epoch: 3 [6080/8706 (70%)]\tLoss: 0.859882, Accu: 78.12%\n","Train Epoch: 3 [6240/8706 (71%)]\tLoss: 0.264448, Accu: 90.62%\n","Train Epoch: 3 [6400/8706 (73%)]\tLoss: 0.476850, Accu: 84.38%\n","Train Epoch: 3 [6560/8706 (75%)]\tLoss: 0.327551, Accu: 84.38%\n","Train Epoch: 3 [6720/8706 (77%)]\tLoss: 0.317818, Accu: 87.50%\n","Train Epoch: 3 [6880/8706 (79%)]\tLoss: 0.218711, Accu: 90.62%\n","Train Epoch: 3 [7040/8706 (81%)]\tLoss: 0.193147, Accu: 90.62%\n","Train Epoch: 3 [7200/8706 (82%)]\tLoss: 0.460426, Accu: 81.25%\n","Train Epoch: 3 [7360/8706 (84%)]\tLoss: 0.233256, Accu: 90.62%\n","Train Epoch: 3 [7520/8706 (86%)]\tLoss: 0.409534, Accu: 78.12%\n","Train Epoch: 3 [7680/8706 (88%)]\tLoss: 0.254208, Accu: 87.50%\n","Train Epoch: 3 [7840/8706 (90%)]\tLoss: 0.299664, Accu: 90.62%\n","Train Epoch: 3 [8000/8706 (92%)]\tLoss: 0.357353, Accu: 78.12%\n","Train Epoch: 3 [8160/8706 (93%)]\tLoss: 0.244162, Accu: 93.75%\n","Train Epoch: 3 [8320/8706 (95%)]\tLoss: 0.412894, Accu: 81.25%\n","Train Epoch: 3 [8480/8706 (97%)]\tLoss: 0.374269, Accu: 81.25%\n","Train Epoch: 3 [8640/8706 (99%)]\tLoss: 0.185248, Accu: 87.50%\n","\n","Test set (1959 samples): Average loss: 0.7261, Accuracy: 77.49%\n","\n","Epoch 3 model saved!\n","Train Epoch: 4 [160/8706 (2%)]\tLoss: 0.349491, Accu: 87.50%\n","Train Epoch: 4 [320/8706 (4%)]\tLoss: 0.207701, Accu: 87.50%\n","Train Epoch: 4 [480/8706 (5%)]\tLoss: 0.170008, Accu: 87.50%\n","Train Epoch: 4 [640/8706 (7%)]\tLoss: 0.225574, Accu: 84.38%\n","Train Epoch: 4 [800/8706 (9%)]\tLoss: 0.189595, Accu: 93.75%\n","Train Epoch: 4 [960/8706 (11%)]\tLoss: 0.211752, Accu: 84.38%\n","Train Epoch: 4 [1120/8706 (13%)]\tLoss: 0.421651, Accu: 87.50%\n","Train Epoch: 4 [1280/8706 (15%)]\tLoss: 0.327385, Accu: 84.38%\n","Train Epoch: 4 [1440/8706 (16%)]\tLoss: 0.151189, Accu: 93.75%\n","Train Epoch: 4 [1600/8706 (18%)]\tLoss: 0.416957, Accu: 90.62%\n","Train Epoch: 4 [1760/8706 (20%)]\tLoss: 0.244713, Accu: 90.62%\n","Train Epoch: 4 [1920/8706 (22%)]\tLoss: 0.174710, Accu: 90.62%\n","Train Epoch: 4 [2080/8706 (24%)]\tLoss: 0.444731, Accu: 81.25%\n","Train Epoch: 4 [2240/8706 (26%)]\tLoss: 0.105664, Accu: 96.88%\n","Train Epoch: 4 [2400/8706 (27%)]\tLoss: 0.653835, Accu: 71.88%\n","Train Epoch: 4 [2560/8706 (29%)]\tLoss: 0.445403, Accu: 81.25%\n","Train Epoch: 4 [2720/8706 (31%)]\tLoss: 0.278367, Accu: 78.12%\n","Train Epoch: 4 [2880/8706 (33%)]\tLoss: 0.225983, Accu: 90.62%\n","Train Epoch: 4 [3040/8706 (35%)]\tLoss: 0.264266, Accu: 87.50%\n","Train Epoch: 4 [3200/8706 (37%)]\tLoss: 0.210173, Accu: 93.75%\n","Train Epoch: 4 [3360/8706 (38%)]\tLoss: 0.219831, Accu: 90.62%\n","Train Epoch: 4 [3520/8706 (40%)]\tLoss: 0.201847, Accu: 90.62%\n","Train Epoch: 4 [3680/8706 (42%)]\tLoss: 0.373408, Accu: 87.50%\n","Train Epoch: 4 [3840/8706 (44%)]\tLoss: 0.366615, Accu: 81.25%\n","Train Epoch: 4 [4000/8706 (46%)]\tLoss: 0.252693, Accu: 84.38%\n","Train Epoch: 4 [4160/8706 (48%)]\tLoss: 0.319177, Accu: 84.38%\n","Train Epoch: 4 [4320/8706 (49%)]\tLoss: 0.194875, Accu: 87.50%\n","Train Epoch: 4 [4480/8706 (51%)]\tLoss: 0.382034, Accu: 81.25%\n","Train Epoch: 4 [4640/8706 (53%)]\tLoss: 0.289460, Accu: 87.50%\n","Train Epoch: 4 [4800/8706 (55%)]\tLoss: 0.400419, Accu: 78.12%\n","Train Epoch: 4 [4960/8706 (57%)]\tLoss: 0.125954, Accu: 93.75%\n","Train Epoch: 4 [5120/8706 (59%)]\tLoss: 0.368916, Accu: 84.38%\n","Train Epoch: 4 [5280/8706 (60%)]\tLoss: 0.300459, Accu: 90.62%\n","Train Epoch: 4 [5440/8706 (62%)]\tLoss: 0.270817, Accu: 81.25%\n","Train Epoch: 4 [5600/8706 (64%)]\tLoss: 0.162839, Accu: 90.62%\n","Train Epoch: 4 [5760/8706 (66%)]\tLoss: 0.241730, Accu: 87.50%\n","Train Epoch: 4 [5920/8706 (68%)]\tLoss: 0.153315, Accu: 93.75%\n","Train Epoch: 4 [6080/8706 (70%)]\tLoss: 0.253566, Accu: 87.50%\n","Train Epoch: 4 [6240/8706 (71%)]\tLoss: 0.297782, Accu: 81.25%\n","Train Epoch: 4 [6400/8706 (73%)]\tLoss: 0.218069, Accu: 81.25%\n","Train Epoch: 4 [6560/8706 (75%)]\tLoss: 0.410104, Accu: 87.50%\n","Train Epoch: 4 [6720/8706 (77%)]\tLoss: 0.187968, Accu: 90.62%\n","Train Epoch: 4 [6880/8706 (79%)]\tLoss: 0.309416, Accu: 84.38%\n","Train Epoch: 4 [7040/8706 (81%)]\tLoss: 0.252358, Accu: 84.38%\n","Train Epoch: 4 [7200/8706 (82%)]\tLoss: 0.406138, Accu: 87.50%\n","Train Epoch: 4 [7360/8706 (84%)]\tLoss: 0.223344, Accu: 93.75%\n","Train Epoch: 4 [7520/8706 (86%)]\tLoss: 0.178743, Accu: 90.62%\n","Train Epoch: 4 [7680/8706 (88%)]\tLoss: 0.134904, Accu: 96.88%\n","Train Epoch: 4 [7840/8706 (90%)]\tLoss: 0.212932, Accu: 93.75%\n","Train Epoch: 4 [8000/8706 (92%)]\tLoss: 0.090672, Accu: 96.88%\n","Train Epoch: 4 [8160/8706 (93%)]\tLoss: 0.334223, Accu: 84.38%\n","Train Epoch: 4 [8320/8706 (95%)]\tLoss: 0.133657, Accu: 96.88%\n","Train Epoch: 4 [8480/8706 (97%)]\tLoss: 0.156355, Accu: 90.62%\n","Train Epoch: 4 [8640/8706 (99%)]\tLoss: 0.359092, Accu: 84.38%\n","\n","Test set (1959 samples): Average loss: 0.8762, Accuracy: 73.46%\n","\n","Epoch 4 model saved!\n","Train Epoch: 5 [160/8706 (2%)]\tLoss: 0.195609, Accu: 90.62%\n","Train Epoch: 5 [320/8706 (4%)]\tLoss: 0.114930, Accu: 96.88%\n","Train Epoch: 5 [480/8706 (5%)]\tLoss: 0.264180, Accu: 84.38%\n","Train Epoch: 5 [640/8706 (7%)]\tLoss: 0.253722, Accu: 90.62%\n","Train Epoch: 5 [800/8706 (9%)]\tLoss: 0.186132, Accu: 96.88%\n","Train Epoch: 5 [960/8706 (11%)]\tLoss: 0.215613, Accu: 90.62%\n","Train Epoch: 5 [1120/8706 (13%)]\tLoss: 0.206219, Accu: 90.62%\n","Train Epoch: 5 [1280/8706 (15%)]\tLoss: 0.297971, Accu: 84.38%\n","Train Epoch: 5 [1440/8706 (16%)]\tLoss: 0.408918, Accu: 87.50%\n","Train Epoch: 5 [1600/8706 (18%)]\tLoss: 0.336511, Accu: 87.50%\n","Train Epoch: 5 [1760/8706 (20%)]\tLoss: 0.184529, Accu: 93.75%\n","Train Epoch: 5 [1920/8706 (22%)]\tLoss: 0.192452, Accu: 84.38%\n","Train Epoch: 5 [2080/8706 (24%)]\tLoss: 0.198454, Accu: 93.75%\n","Train Epoch: 5 [2240/8706 (26%)]\tLoss: 0.064164, Accu: 100.00%\n","Train Epoch: 5 [2400/8706 (27%)]\tLoss: 0.130069, Accu: 96.88%\n","Train Epoch: 5 [2560/8706 (29%)]\tLoss: 0.282431, Accu: 90.62%\n","Train Epoch: 5 [2720/8706 (31%)]\tLoss: 0.090896, Accu: 93.75%\n","Train Epoch: 5 [2880/8706 (33%)]\tLoss: 0.282034, Accu: 93.75%\n","Train Epoch: 5 [3040/8706 (35%)]\tLoss: 0.211040, Accu: 81.25%\n","Train Epoch: 5 [3200/8706 (37%)]\tLoss: 0.187653, Accu: 93.75%\n","Train Epoch: 5 [3360/8706 (38%)]\tLoss: 0.177941, Accu: 87.50%\n","Train Epoch: 5 [3520/8706 (40%)]\tLoss: 0.299301, Accu: 93.75%\n","Train Epoch: 5 [3680/8706 (42%)]\tLoss: 0.060918, Accu: 96.88%\n","Train Epoch: 5 [3840/8706 (44%)]\tLoss: 0.332111, Accu: 87.50%\n","Train Epoch: 5 [4000/8706 (46%)]\tLoss: 0.153290, Accu: 96.88%\n","Train Epoch: 5 [4160/8706 (48%)]\tLoss: 0.169107, Accu: 93.75%\n","Train Epoch: 5 [4320/8706 (49%)]\tLoss: 0.140589, Accu: 96.88%\n","Train Epoch: 5 [4480/8706 (51%)]\tLoss: 0.179180, Accu: 90.62%\n","Train Epoch: 5 [4640/8706 (53%)]\tLoss: 0.243952, Accu: 84.38%\n","Train Epoch: 5 [4800/8706 (55%)]\tLoss: 0.230776, Accu: 93.75%\n","Train Epoch: 5 [4960/8706 (57%)]\tLoss: 0.073230, Accu: 96.88%\n","Train Epoch: 5 [5120/8706 (59%)]\tLoss: 0.095358, Accu: 93.75%\n","Train Epoch: 5 [5280/8706 (60%)]\tLoss: 0.118823, Accu: 96.88%\n","Train Epoch: 5 [5440/8706 (62%)]\tLoss: 0.259665, Accu: 87.50%\n","Train Epoch: 5 [5600/8706 (64%)]\tLoss: 0.365596, Accu: 87.50%\n","Train Epoch: 5 [5760/8706 (66%)]\tLoss: 0.157155, Accu: 90.62%\n","Train Epoch: 5 [5920/8706 (68%)]\tLoss: 0.187739, Accu: 90.62%\n","Train Epoch: 5 [6080/8706 (70%)]\tLoss: 0.164605, Accu: 90.62%\n","Train Epoch: 5 [6240/8706 (71%)]\tLoss: 0.195230, Accu: 93.75%\n","Train Epoch: 5 [6400/8706 (73%)]\tLoss: 0.208704, Accu: 93.75%\n","Train Epoch: 5 [6560/8706 (75%)]\tLoss: 0.132252, Accu: 96.88%\n","Train Epoch: 5 [6720/8706 (77%)]\tLoss: 0.362760, Accu: 87.50%\n","Train Epoch: 5 [6880/8706 (79%)]\tLoss: 0.172764, Accu: 93.75%\n","Train Epoch: 5 [7040/8706 (81%)]\tLoss: 0.567473, Accu: 68.75%\n","Train Epoch: 5 [7200/8706 (82%)]\tLoss: 0.253034, Accu: 87.50%\n","Train Epoch: 5 [7360/8706 (84%)]\tLoss: 0.183301, Accu: 90.62%\n","Train Epoch: 5 [7520/8706 (86%)]\tLoss: 0.223960, Accu: 93.75%\n","Train Epoch: 5 [7680/8706 (88%)]\tLoss: 0.065101, Accu: 100.00%\n","Train Epoch: 5 [7840/8706 (90%)]\tLoss: 0.076194, Accu: 96.88%\n","Train Epoch: 5 [8000/8706 (92%)]\tLoss: 0.067888, Accu: 96.88%\n","Train Epoch: 5 [8160/8706 (93%)]\tLoss: 0.176131, Accu: 90.62%\n","Train Epoch: 5 [8320/8706 (95%)]\tLoss: 0.282883, Accu: 93.75%\n","Train Epoch: 5 [8480/8706 (97%)]\tLoss: 0.104009, Accu: 100.00%\n","Train Epoch: 5 [8640/8706 (99%)]\tLoss: 0.294091, Accu: 81.25%\n","\n","Test set (1959 samples): Average loss: 0.5857, Accuracy: 80.04%\n","\n","Epoch 5 model saved!\n","Train Epoch: 6 [160/8706 (2%)]\tLoss: 0.186506, Accu: 90.62%\n","Train Epoch: 6 [320/8706 (4%)]\tLoss: 0.180134, Accu: 93.75%\n","Train Epoch: 6 [480/8706 (5%)]\tLoss: 0.130111, Accu: 96.88%\n","Train Epoch: 6 [640/8706 (7%)]\tLoss: 0.215644, Accu: 93.75%\n","Train Epoch: 6 [800/8706 (9%)]\tLoss: 0.141251, Accu: 90.62%\n","Train Epoch: 6 [960/8706 (11%)]\tLoss: 0.092612, Accu: 93.75%\n","Train Epoch: 6 [1120/8706 (13%)]\tLoss: 0.192148, Accu: 93.75%\n","Train Epoch: 6 [1280/8706 (15%)]\tLoss: 0.222949, Accu: 87.50%\n","Train Epoch: 6 [1440/8706 (16%)]\tLoss: 0.301928, Accu: 90.62%\n","Train Epoch: 6 [1600/8706 (18%)]\tLoss: 0.194804, Accu: 96.88%\n","Train Epoch: 6 [1760/8706 (20%)]\tLoss: 0.514298, Accu: 84.38%\n","Train Epoch: 6 [1920/8706 (22%)]\tLoss: 0.165572, Accu: 90.62%\n","Train Epoch: 6 [2080/8706 (24%)]\tLoss: 0.202135, Accu: 90.62%\n","Train Epoch: 6 [2240/8706 (26%)]\tLoss: 0.133767, Accu: 93.75%\n","Train Epoch: 6 [2400/8706 (27%)]\tLoss: 0.106736, Accu: 93.75%\n","Train Epoch: 6 [2560/8706 (29%)]\tLoss: 0.131808, Accu: 90.62%\n","Train Epoch: 6 [2720/8706 (31%)]\tLoss: 0.073897, Accu: 100.00%\n","Train Epoch: 6 [2880/8706 (33%)]\tLoss: 0.126913, Accu: 96.88%\n","Train Epoch: 6 [3040/8706 (35%)]\tLoss: 0.135219, Accu: 90.62%\n","Train Epoch: 6 [3200/8706 (37%)]\tLoss: 0.316794, Accu: 84.38%\n","Train Epoch: 6 [3360/8706 (38%)]\tLoss: 0.067348, Accu: 96.88%\n","Train Epoch: 6 [3520/8706 (40%)]\tLoss: 0.364851, Accu: 84.38%\n","Train Epoch: 6 [3680/8706 (42%)]\tLoss: 0.289470, Accu: 90.62%\n","Train Epoch: 6 [3840/8706 (44%)]\tLoss: 0.265903, Accu: 90.62%\n","Train Epoch: 6 [4000/8706 (46%)]\tLoss: 0.273734, Accu: 84.38%\n","Train Epoch: 6 [4160/8706 (48%)]\tLoss: 0.446668, Accu: 78.12%\n","Train Epoch: 6 [4320/8706 (49%)]\tLoss: 0.227441, Accu: 84.38%\n","Train Epoch: 6 [4480/8706 (51%)]\tLoss: 0.257363, Accu: 90.62%\n","Train Epoch: 6 [4640/8706 (53%)]\tLoss: 0.167265, Accu: 90.62%\n","Train Epoch: 6 [4800/8706 (55%)]\tLoss: 0.246725, Accu: 87.50%\n","Train Epoch: 6 [4960/8706 (57%)]\tLoss: 0.248894, Accu: 93.75%\n","Train Epoch: 6 [5120/8706 (59%)]\tLoss: 0.126662, Accu: 96.88%\n","Train Epoch: 6 [5280/8706 (60%)]\tLoss: 0.303668, Accu: 87.50%\n","Train Epoch: 6 [5440/8706 (62%)]\tLoss: 0.233527, Accu: 84.38%\n","Train Epoch: 6 [5600/8706 (64%)]\tLoss: 0.099415, Accu: 93.75%\n","Train Epoch: 6 [5760/8706 (66%)]\tLoss: 0.221524, Accu: 93.75%\n","Train Epoch: 6 [5920/8706 (68%)]\tLoss: 0.132348, Accu: 93.75%\n","Train Epoch: 6 [6080/8706 (70%)]\tLoss: 0.253147, Accu: 87.50%\n","Train Epoch: 6 [6240/8706 (71%)]\tLoss: 0.115569, Accu: 96.88%\n","Train Epoch: 6 [6400/8706 (73%)]\tLoss: 0.132256, Accu: 93.75%\n","Train Epoch: 6 [6560/8706 (75%)]\tLoss: 0.089806, Accu: 96.88%\n","Train Epoch: 6 [6720/8706 (77%)]\tLoss: 0.096695, Accu: 93.75%\n","Train Epoch: 6 [6880/8706 (79%)]\tLoss: 0.290424, Accu: 87.50%\n","Train Epoch: 6 [7040/8706 (81%)]\tLoss: 0.154423, Accu: 96.88%\n","Train Epoch: 6 [7200/8706 (82%)]\tLoss: 0.168520, Accu: 90.62%\n","Train Epoch: 6 [7360/8706 (84%)]\tLoss: 0.087275, Accu: 96.88%\n","Train Epoch: 6 [7520/8706 (86%)]\tLoss: 0.129100, Accu: 96.88%\n","Train Epoch: 6 [7680/8706 (88%)]\tLoss: 0.114146, Accu: 90.62%\n","Train Epoch: 6 [7840/8706 (90%)]\tLoss: 0.252870, Accu: 90.62%\n","Train Epoch: 6 [8000/8706 (92%)]\tLoss: 0.134549, Accu: 87.50%\n","Train Epoch: 6 [8160/8706 (93%)]\tLoss: 0.247862, Accu: 90.62%\n","Train Epoch: 6 [8320/8706 (95%)]\tLoss: 0.247344, Accu: 93.75%\n","Train Epoch: 6 [8480/8706 (97%)]\tLoss: 0.333394, Accu: 75.00%\n","Train Epoch: 6 [8640/8706 (99%)]\tLoss: 0.124624, Accu: 93.75%\n","\n","Test set (1959 samples): Average loss: 0.9113, Accuracy: 74.83%\n","\n","Epoch 6 model saved!\n","Train Epoch: 7 [160/8706 (2%)]\tLoss: 0.112022, Accu: 93.75%\n","Train Epoch: 7 [320/8706 (4%)]\tLoss: 0.043313, Accu: 100.00%\n","Train Epoch: 7 [480/8706 (5%)]\tLoss: 0.312907, Accu: 93.75%\n","Train Epoch: 7 [640/8706 (7%)]\tLoss: 0.109210, Accu: 93.75%\n","Train Epoch: 7 [800/8706 (9%)]\tLoss: 0.235192, Accu: 87.50%\n","Train Epoch: 7 [960/8706 (11%)]\tLoss: 0.210082, Accu: 90.62%\n","Train Epoch: 7 [1120/8706 (13%)]\tLoss: 0.355595, Accu: 75.00%\n","Train Epoch: 7 [1280/8706 (15%)]\tLoss: 0.130448, Accu: 93.75%\n","Train Epoch: 7 [1440/8706 (16%)]\tLoss: 0.163663, Accu: 87.50%\n","Train Epoch: 7 [1600/8706 (18%)]\tLoss: 0.185327, Accu: 87.50%\n","Train Epoch: 7 [1760/8706 (20%)]\tLoss: 0.425741, Accu: 87.50%\n","Train Epoch: 7 [1920/8706 (22%)]\tLoss: 0.282923, Accu: 84.38%\n","Train Epoch: 7 [2080/8706 (24%)]\tLoss: 0.143081, Accu: 90.62%\n","Train Epoch: 7 [2240/8706 (26%)]\tLoss: 0.169562, Accu: 93.75%\n","Train Epoch: 7 [2400/8706 (27%)]\tLoss: 0.256204, Accu: 84.38%\n","Train Epoch: 7 [2560/8706 (29%)]\tLoss: 0.194822, Accu: 87.50%\n","Train Epoch: 7 [2720/8706 (31%)]\tLoss: 0.096337, Accu: 93.75%\n","Train Epoch: 7 [2880/8706 (33%)]\tLoss: 0.323413, Accu: 81.25%\n","Train Epoch: 7 [3040/8706 (35%)]\tLoss: 0.131866, Accu: 93.75%\n","Train Epoch: 7 [3200/8706 (37%)]\tLoss: 0.256880, Accu: 81.25%\n","Train Epoch: 7 [3360/8706 (38%)]\tLoss: 0.173849, Accu: 93.75%\n","Train Epoch: 7 [3520/8706 (40%)]\tLoss: 0.191893, Accu: 90.62%\n","Train Epoch: 7 [3680/8706 (42%)]\tLoss: 0.163639, Accu: 93.75%\n","Train Epoch: 7 [3840/8706 (44%)]\tLoss: 0.073025, Accu: 100.00%\n","Train Epoch: 7 [4000/8706 (46%)]\tLoss: 0.123878, Accu: 93.75%\n","Train Epoch: 7 [4160/8706 (48%)]\tLoss: 0.166307, Accu: 90.62%\n","Train Epoch: 7 [4320/8706 (49%)]\tLoss: 0.060547, Accu: 100.00%\n","Train Epoch: 7 [4480/8706 (51%)]\tLoss: 0.074507, Accu: 96.88%\n","Train Epoch: 7 [4640/8706 (53%)]\tLoss: 0.041024, Accu: 100.00%\n","Train Epoch: 7 [4800/8706 (55%)]\tLoss: 0.150155, Accu: 96.88%\n","Train Epoch: 7 [4960/8706 (57%)]\tLoss: 0.227102, Accu: 93.75%\n","Train Epoch: 7 [5120/8706 (59%)]\tLoss: 0.285633, Accu: 84.38%\n","Train Epoch: 7 [5280/8706 (60%)]\tLoss: 0.279812, Accu: 84.38%\n","Train Epoch: 7 [5440/8706 (62%)]\tLoss: 0.091383, Accu: 96.88%\n","Train Epoch: 7 [5600/8706 (64%)]\tLoss: 0.147272, Accu: 96.88%\n","Train Epoch: 7 [5760/8706 (66%)]\tLoss: 0.175890, Accu: 90.62%\n","Train Epoch: 7 [5920/8706 (68%)]\tLoss: 0.229680, Accu: 90.62%\n","Train Epoch: 7 [6080/8706 (70%)]\tLoss: 0.142320, Accu: 93.75%\n","Train Epoch: 7 [6240/8706 (71%)]\tLoss: 0.169194, Accu: 87.50%\n","Train Epoch: 7 [6400/8706 (73%)]\tLoss: 0.162635, Accu: 90.62%\n","Train Epoch: 7 [6560/8706 (75%)]\tLoss: 0.351419, Accu: 81.25%\n","Train Epoch: 7 [6720/8706 (77%)]\tLoss: 0.105086, Accu: 93.75%\n","Train Epoch: 7 [6880/8706 (79%)]\tLoss: 0.058686, Accu: 96.88%\n","Train Epoch: 7 [7040/8706 (81%)]\tLoss: 0.143726, Accu: 90.62%\n","Train Epoch: 7 [7200/8706 (82%)]\tLoss: 0.270136, Accu: 90.62%\n","Train Epoch: 7 [7360/8706 (84%)]\tLoss: 0.142855, Accu: 93.75%\n","Train Epoch: 7 [7520/8706 (86%)]\tLoss: 0.494444, Accu: 78.12%\n","Train Epoch: 7 [7680/8706 (88%)]\tLoss: 0.238244, Accu: 93.75%\n","Train Epoch: 7 [7840/8706 (90%)]\tLoss: 0.073494, Accu: 96.88%\n","Train Epoch: 7 [8000/8706 (92%)]\tLoss: 0.283326, Accu: 87.50%\n","Train Epoch: 7 [8160/8706 (93%)]\tLoss: 0.171879, Accu: 90.62%\n","Train Epoch: 7 [8320/8706 (95%)]\tLoss: 0.131838, Accu: 90.62%\n","Train Epoch: 7 [8480/8706 (97%)]\tLoss: 0.092950, Accu: 93.75%\n","Train Epoch: 7 [8640/8706 (99%)]\tLoss: 0.111741, Accu: 93.75%\n","\n","Test set (1959 samples): Average loss: 1.0376, Accuracy: 75.45%\n","\n","Epoch 7 model saved!\n","Train Epoch: 8 [160/8706 (2%)]\tLoss: 0.185326, Accu: 96.88%\n","Train Epoch: 8 [320/8706 (4%)]\tLoss: 0.259827, Accu: 93.75%\n","Train Epoch: 8 [480/8706 (5%)]\tLoss: 0.138707, Accu: 93.75%\n","Train Epoch: 8 [640/8706 (7%)]\tLoss: 0.093734, Accu: 96.88%\n","Train Epoch: 8 [800/8706 (9%)]\tLoss: 0.118117, Accu: 93.75%\n","Train Epoch: 8 [960/8706 (11%)]\tLoss: 0.112679, Accu: 90.62%\n","Train Epoch: 8 [1120/8706 (13%)]\tLoss: 0.095264, Accu: 96.88%\n","Train Epoch: 8 [1280/8706 (15%)]\tLoss: 0.103138, Accu: 100.00%\n","Train Epoch: 8 [1440/8706 (16%)]\tLoss: 0.200723, Accu: 93.75%\n","Train Epoch: 8 [1600/8706 (18%)]\tLoss: 0.043685, Accu: 96.88%\n","Train Epoch: 8 [1760/8706 (20%)]\tLoss: 0.078641, Accu: 96.88%\n","Train Epoch: 8 [1920/8706 (22%)]\tLoss: 0.117153, Accu: 96.88%\n","Train Epoch: 8 [2080/8706 (24%)]\tLoss: 0.039790, Accu: 100.00%\n","Train Epoch: 8 [2240/8706 (26%)]\tLoss: 0.098680, Accu: 93.75%\n","Train Epoch: 8 [2400/8706 (27%)]\tLoss: 0.169675, Accu: 90.62%\n","Train Epoch: 8 [2560/8706 (29%)]\tLoss: 0.119978, Accu: 96.88%\n","Train Epoch: 8 [2720/8706 (31%)]\tLoss: 0.092412, Accu: 93.75%\n","Train Epoch: 8 [2880/8706 (33%)]\tLoss: 0.226214, Accu: 81.25%\n","Train Epoch: 8 [3040/8706 (35%)]\tLoss: 0.201299, Accu: 96.88%\n","Train Epoch: 8 [3200/8706 (37%)]\tLoss: 0.123323, Accu: 90.62%\n","Train Epoch: 8 [3360/8706 (38%)]\tLoss: 0.103087, Accu: 90.62%\n","Train Epoch: 8 [3520/8706 (40%)]\tLoss: 0.179015, Accu: 90.62%\n","Train Epoch: 8 [3680/8706 (42%)]\tLoss: 0.209386, Accu: 90.62%\n","Train Epoch: 8 [3840/8706 (44%)]\tLoss: 0.138902, Accu: 90.62%\n","Train Epoch: 8 [4000/8706 (46%)]\tLoss: 0.188653, Accu: 96.88%\n","Train Epoch: 8 [4160/8706 (48%)]\tLoss: 0.099533, Accu: 96.88%\n","Train Epoch: 8 [4320/8706 (49%)]\tLoss: 0.257814, Accu: 90.62%\n","Train Epoch: 8 [4480/8706 (51%)]\tLoss: 0.436813, Accu: 75.00%\n","Train Epoch: 8 [4640/8706 (53%)]\tLoss: 0.099809, Accu: 93.75%\n","Train Epoch: 8 [4800/8706 (55%)]\tLoss: 0.141065, Accu: 93.75%\n","Train Epoch: 8 [4960/8706 (57%)]\tLoss: 0.040633, Accu: 100.00%\n","Train Epoch: 8 [5120/8706 (59%)]\tLoss: 0.074826, Accu: 96.88%\n","Train Epoch: 8 [5280/8706 (60%)]\tLoss: 0.354231, Accu: 87.50%\n","Train Epoch: 8 [5440/8706 (62%)]\tLoss: 0.087947, Accu: 93.75%\n","Train Epoch: 8 [5600/8706 (64%)]\tLoss: 0.269074, Accu: 87.50%\n","Train Epoch: 8 [5760/8706 (66%)]\tLoss: 0.117205, Accu: 96.88%\n","Train Epoch: 8 [5920/8706 (68%)]\tLoss: 0.232522, Accu: 90.62%\n","Train Epoch: 8 [6080/8706 (70%)]\tLoss: 0.113006, Accu: 96.88%\n","Train Epoch: 8 [6240/8706 (71%)]\tLoss: 0.125325, Accu: 93.75%\n","Train Epoch: 8 [6400/8706 (73%)]\tLoss: 0.266838, Accu: 81.25%\n","Train Epoch: 8 [6560/8706 (75%)]\tLoss: 0.188496, Accu: 90.62%\n","Train Epoch: 8 [6720/8706 (77%)]\tLoss: 0.084870, Accu: 93.75%\n","Train Epoch: 8 [6880/8706 (79%)]\tLoss: 0.257949, Accu: 87.50%\n","Train Epoch: 8 [7040/8706 (81%)]\tLoss: 0.054963, Accu: 93.75%\n","Train Epoch: 8 [7200/8706 (82%)]\tLoss: 0.146343, Accu: 93.75%\n","Train Epoch: 8 [7360/8706 (84%)]\tLoss: 0.068677, Accu: 96.88%\n","Train Epoch: 8 [7520/8706 (86%)]\tLoss: 0.058580, Accu: 100.00%\n","Train Epoch: 8 [7680/8706 (88%)]\tLoss: 0.108202, Accu: 96.88%\n","Train Epoch: 8 [7840/8706 (90%)]\tLoss: 0.071242, Accu: 100.00%\n","Train Epoch: 8 [8000/8706 (92%)]\tLoss: 0.182659, Accu: 87.50%\n","Train Epoch: 8 [8160/8706 (93%)]\tLoss: 0.073163, Accu: 96.88%\n","Train Epoch: 8 [8320/8706 (95%)]\tLoss: 0.123831, Accu: 90.62%\n","Train Epoch: 8 [8480/8706 (97%)]\tLoss: 0.148872, Accu: 84.38%\n","Train Epoch: 8 [8640/8706 (99%)]\tLoss: 0.209661, Accu: 90.62%\n","\n","Test set (1959 samples): Average loss: 0.9735, Accuracy: 76.16%\n","\n","Epoch 8 model saved!\n","Train Epoch: 9 [160/8706 (2%)]\tLoss: 0.142567, Accu: 93.75%\n","Train Epoch: 9 [320/8706 (4%)]\tLoss: 0.257388, Accu: 90.62%\n","Train Epoch: 9 [480/8706 (5%)]\tLoss: 0.115855, Accu: 96.88%\n","Train Epoch: 9 [640/8706 (7%)]\tLoss: 0.210361, Accu: 90.62%\n","Train Epoch: 9 [800/8706 (9%)]\tLoss: 0.071560, Accu: 100.00%\n","Train Epoch: 9 [960/8706 (11%)]\tLoss: 0.093419, Accu: 93.75%\n","Train Epoch: 9 [1120/8706 (13%)]\tLoss: 0.302437, Accu: 87.50%\n","Train Epoch: 9 [1280/8706 (15%)]\tLoss: 0.283081, Accu: 90.62%\n","Train Epoch: 9 [1440/8706 (16%)]\tLoss: 0.092927, Accu: 96.88%\n","Train Epoch: 9 [1600/8706 (18%)]\tLoss: 0.090154, Accu: 100.00%\n","Train Epoch: 9 [1760/8706 (20%)]\tLoss: 0.256207, Accu: 87.50%\n","Train Epoch: 9 [1920/8706 (22%)]\tLoss: 0.348967, Accu: 81.25%\n","Train Epoch: 9 [2080/8706 (24%)]\tLoss: 0.087191, Accu: 93.75%\n","Train Epoch: 9 [2240/8706 (26%)]\tLoss: 0.101080, Accu: 93.75%\n","Train Epoch: 9 [2400/8706 (27%)]\tLoss: 0.119922, Accu: 93.75%\n","Train Epoch: 9 [2560/8706 (29%)]\tLoss: 0.246291, Accu: 84.38%\n","Train Epoch: 9 [2720/8706 (31%)]\tLoss: 0.016693, Accu: 100.00%\n","Train Epoch: 9 [2880/8706 (33%)]\tLoss: 0.064938, Accu: 93.75%\n","Train Epoch: 9 [3040/8706 (35%)]\tLoss: 0.066338, Accu: 96.88%\n","Train Epoch: 9 [3200/8706 (37%)]\tLoss: 0.179765, Accu: 87.50%\n","Train Epoch: 9 [3360/8706 (38%)]\tLoss: 0.052268, Accu: 100.00%\n","Train Epoch: 9 [3520/8706 (40%)]\tLoss: 0.093191, Accu: 100.00%\n","Train Epoch: 9 [3680/8706 (42%)]\tLoss: 0.087515, Accu: 96.88%\n","Train Epoch: 9 [3840/8706 (44%)]\tLoss: 0.047671, Accu: 96.88%\n","Train Epoch: 9 [4000/8706 (46%)]\tLoss: 0.019283, Accu: 100.00%\n","Train Epoch: 9 [4160/8706 (48%)]\tLoss: 0.076257, Accu: 100.00%\n","Train Epoch: 9 [4320/8706 (49%)]\tLoss: 0.034398, Accu: 100.00%\n","Train Epoch: 9 [4480/8706 (51%)]\tLoss: 0.085409, Accu: 96.88%\n","Train Epoch: 9 [4640/8706 (53%)]\tLoss: 0.099394, Accu: 93.75%\n","Train Epoch: 9 [4800/8706 (55%)]\tLoss: 0.270279, Accu: 93.75%\n","Train Epoch: 9 [4960/8706 (57%)]\tLoss: 0.119027, Accu: 93.75%\n","Train Epoch: 9 [5120/8706 (59%)]\tLoss: 0.088452, Accu: 93.75%\n","Train Epoch: 9 [5280/8706 (60%)]\tLoss: 0.070731, Accu: 96.88%\n","Train Epoch: 9 [5440/8706 (62%)]\tLoss: 0.139484, Accu: 93.75%\n","Train Epoch: 9 [5600/8706 (64%)]\tLoss: 0.167447, Accu: 93.75%\n","Train Epoch: 9 [5760/8706 (66%)]\tLoss: 0.118694, Accu: 90.62%\n","Train Epoch: 9 [5920/8706 (68%)]\tLoss: 0.211536, Accu: 93.75%\n","Train Epoch: 9 [6080/8706 (70%)]\tLoss: 0.158692, Accu: 90.62%\n","Train Epoch: 9 [6240/8706 (71%)]\tLoss: 0.181320, Accu: 90.62%\n","Train Epoch: 9 [6400/8706 (73%)]\tLoss: 0.110734, Accu: 90.62%\n","Train Epoch: 9 [6560/8706 (75%)]\tLoss: 0.222842, Accu: 93.75%\n","Train Epoch: 9 [6720/8706 (77%)]\tLoss: 0.140684, Accu: 93.75%\n","Train Epoch: 9 [6880/8706 (79%)]\tLoss: 0.216913, Accu: 90.62%\n","Train Epoch: 9 [7040/8706 (81%)]\tLoss: 0.120109, Accu: 93.75%\n","Train Epoch: 9 [7200/8706 (82%)]\tLoss: 0.137417, Accu: 90.62%\n","Train Epoch: 9 [7360/8706 (84%)]\tLoss: 0.166129, Accu: 87.50%\n","Train Epoch: 9 [7520/8706 (86%)]\tLoss: 0.241896, Accu: 90.62%\n","Train Epoch: 9 [7680/8706 (88%)]\tLoss: 0.076131, Accu: 96.88%\n","Train Epoch: 9 [7840/8706 (90%)]\tLoss: 0.158179, Accu: 87.50%\n","Train Epoch: 9 [8000/8706 (92%)]\tLoss: 0.167381, Accu: 90.62%\n","Train Epoch: 9 [8160/8706 (93%)]\tLoss: 0.146050, Accu: 84.38%\n","Train Epoch: 9 [8320/8706 (95%)]\tLoss: 0.084938, Accu: 96.88%\n","Train Epoch: 9 [8480/8706 (97%)]\tLoss: 0.232285, Accu: 84.38%\n","Train Epoch: 9 [8640/8706 (99%)]\tLoss: 0.055704, Accu: 96.88%\n","\n","Test set (1959 samples): Average loss: 0.8223, Accuracy: 78.71%\n","\n","Epoch 9 model saved!\n","Train Epoch: 10 [160/8706 (2%)]\tLoss: 0.104451, Accu: 90.62%\n","Train Epoch: 10 [320/8706 (4%)]\tLoss: 0.192314, Accu: 90.62%\n","Train Epoch: 10 [480/8706 (5%)]\tLoss: 0.137745, Accu: 93.75%\n","Train Epoch: 10 [640/8706 (7%)]\tLoss: 0.103161, Accu: 93.75%\n","Train Epoch: 10 [800/8706 (9%)]\tLoss: 0.071571, Accu: 100.00%\n","Train Epoch: 10 [960/8706 (11%)]\tLoss: 0.047244, Accu: 100.00%\n","Train Epoch: 10 [1120/8706 (13%)]\tLoss: 0.076192, Accu: 96.88%\n","Train Epoch: 10 [1280/8706 (15%)]\tLoss: 0.074651, Accu: 93.75%\n","Train Epoch: 10 [1440/8706 (16%)]\tLoss: 0.091712, Accu: 96.88%\n","Train Epoch: 10 [1600/8706 (18%)]\tLoss: 0.102790, Accu: 93.75%\n","Train Epoch: 10 [1760/8706 (20%)]\tLoss: 0.113051, Accu: 93.75%\n","Train Epoch: 10 [1920/8706 (22%)]\tLoss: 0.330661, Accu: 93.75%\n","Train Epoch: 10 [2080/8706 (24%)]\tLoss: 0.041910, Accu: 100.00%\n","Train Epoch: 10 [2240/8706 (26%)]\tLoss: 0.034289, Accu: 100.00%\n","Train Epoch: 10 [2400/8706 (27%)]\tLoss: 0.323597, Accu: 87.50%\n","Train Epoch: 10 [2560/8706 (29%)]\tLoss: 0.321914, Accu: 90.62%\n","Train Epoch: 10 [2720/8706 (31%)]\tLoss: 0.107815, Accu: 90.62%\n","Train Epoch: 10 [2880/8706 (33%)]\tLoss: 0.093107, Accu: 93.75%\n","Train Epoch: 10 [3040/8706 (35%)]\tLoss: 0.235622, Accu: 90.62%\n","Train Epoch: 10 [3200/8706 (37%)]\tLoss: 0.226649, Accu: 90.62%\n","Train Epoch: 10 [3360/8706 (38%)]\tLoss: 0.116215, Accu: 96.88%\n","Train Epoch: 10 [3520/8706 (40%)]\tLoss: 0.273991, Accu: 87.50%\n","Train Epoch: 10 [3680/8706 (42%)]\tLoss: 0.054838, Accu: 100.00%\n","Train Epoch: 10 [3840/8706 (44%)]\tLoss: 0.294802, Accu: 84.38%\n","Train Epoch: 10 [4000/8706 (46%)]\tLoss: 0.215611, Accu: 90.62%\n","Train Epoch: 10 [4160/8706 (48%)]\tLoss: 0.155184, Accu: 90.62%\n","Train Epoch: 10 [4320/8706 (49%)]\tLoss: 0.197450, Accu: 90.62%\n","Train Epoch: 10 [4480/8706 (51%)]\tLoss: 0.084789, Accu: 96.88%\n","Train Epoch: 10 [4640/8706 (53%)]\tLoss: 0.143989, Accu: 90.62%\n","Train Epoch: 10 [4800/8706 (55%)]\tLoss: 0.111492, Accu: 93.75%\n","Train Epoch: 10 [4960/8706 (57%)]\tLoss: 0.056325, Accu: 96.88%\n","Train Epoch: 10 [5120/8706 (59%)]\tLoss: 0.110455, Accu: 93.75%\n","Train Epoch: 10 [5280/8706 (60%)]\tLoss: 0.109468, Accu: 93.75%\n","Train Epoch: 10 [5440/8706 (62%)]\tLoss: 0.131369, Accu: 93.75%\n","Train Epoch: 10 [5600/8706 (64%)]\tLoss: 0.111261, Accu: 93.75%\n","Train Epoch: 10 [5760/8706 (66%)]\tLoss: 0.113689, Accu: 93.75%\n","Train Epoch: 10 [5920/8706 (68%)]\tLoss: 0.176472, Accu: 93.75%\n","Train Epoch: 10 [6080/8706 (70%)]\tLoss: 0.087700, Accu: 93.75%\n","Train Epoch: 10 [6240/8706 (71%)]\tLoss: 0.119977, Accu: 96.88%\n","Train Epoch: 10 [6400/8706 (73%)]\tLoss: 0.197790, Accu: 90.62%\n","Train Epoch: 10 [6560/8706 (75%)]\tLoss: 0.193428, Accu: 93.75%\n","Train Epoch: 10 [6720/8706 (77%)]\tLoss: 0.044995, Accu: 96.88%\n","Train Epoch: 10 [6880/8706 (79%)]\tLoss: 0.082301, Accu: 93.75%\n","Train Epoch: 10 [7040/8706 (81%)]\tLoss: 0.088317, Accu: 93.75%\n","Train Epoch: 10 [7200/8706 (82%)]\tLoss: 0.061285, Accu: 96.88%\n","Train Epoch: 10 [7360/8706 (84%)]\tLoss: 0.211314, Accu: 90.62%\n","Train Epoch: 10 [7520/8706 (86%)]\tLoss: 0.106463, Accu: 93.75%\n","Train Epoch: 10 [7680/8706 (88%)]\tLoss: 0.097251, Accu: 96.88%\n","Train Epoch: 10 [7840/8706 (90%)]\tLoss: 0.238731, Accu: 84.38%\n","Train Epoch: 10 [8000/8706 (92%)]\tLoss: 0.138823, Accu: 93.75%\n","Train Epoch: 10 [8160/8706 (93%)]\tLoss: 0.130588, Accu: 93.75%\n","Train Epoch: 10 [8320/8706 (95%)]\tLoss: 0.143807, Accu: 93.75%\n","Train Epoch: 10 [8480/8706 (97%)]\tLoss: 0.140162, Accu: 90.62%\n","Train Epoch: 10 [8640/8706 (99%)]\tLoss: 0.196980, Accu: 90.62%\n","\n","Test set (1959 samples): Average loss: 0.8356, Accuracy: 78.76%\n","\n","Epoch 10 model saved!\n","Train Epoch: 11 [160/8706 (2%)]\tLoss: 0.156181, Accu: 90.62%\n","Train Epoch: 11 [320/8706 (4%)]\tLoss: 0.064872, Accu: 100.00%\n","Train Epoch: 11 [480/8706 (5%)]\tLoss: 0.096879, Accu: 96.88%\n","Train Epoch: 11 [640/8706 (7%)]\tLoss: 0.084315, Accu: 96.88%\n","Train Epoch: 11 [800/8706 (9%)]\tLoss: 0.199759, Accu: 87.50%\n","Train Epoch: 11 [960/8706 (11%)]\tLoss: 0.176455, Accu: 93.75%\n","Train Epoch: 11 [1120/8706 (13%)]\tLoss: 0.078040, Accu: 100.00%\n","Train Epoch: 11 [1280/8706 (15%)]\tLoss: 0.187773, Accu: 93.75%\n","Train Epoch: 11 [1440/8706 (16%)]\tLoss: 0.056677, Accu: 100.00%\n","Train Epoch: 11 [1600/8706 (18%)]\tLoss: 0.139360, Accu: 96.88%\n","Train Epoch: 11 [1760/8706 (20%)]\tLoss: 0.057334, Accu: 96.88%\n","Train Epoch: 11 [1920/8706 (22%)]\tLoss: 0.126290, Accu: 90.62%\n","Train Epoch: 11 [2080/8706 (24%)]\tLoss: 0.192982, Accu: 87.50%\n","Train Epoch: 11 [2240/8706 (26%)]\tLoss: 0.087102, Accu: 100.00%\n","Train Epoch: 11 [2400/8706 (27%)]\tLoss: 0.137832, Accu: 93.75%\n","Train Epoch: 11 [2560/8706 (29%)]\tLoss: 0.177211, Accu: 90.62%\n","Train Epoch: 11 [2720/8706 (31%)]\tLoss: 0.104179, Accu: 96.88%\n","Train Epoch: 11 [2880/8706 (33%)]\tLoss: 0.077725, Accu: 93.75%\n","Train Epoch: 11 [3040/8706 (35%)]\tLoss: 0.146085, Accu: 90.62%\n","Train Epoch: 11 [3200/8706 (37%)]\tLoss: 0.105024, Accu: 100.00%\n","Train Epoch: 11 [3360/8706 (38%)]\tLoss: 0.081942, Accu: 93.75%\n","Train Epoch: 11 [3520/8706 (40%)]\tLoss: 0.077111, Accu: 96.88%\n","Train Epoch: 11 [3680/8706 (42%)]\tLoss: 0.184223, Accu: 93.75%\n","Train Epoch: 11 [3840/8706 (44%)]\tLoss: 0.188557, Accu: 96.88%\n","Train Epoch: 11 [4000/8706 (46%)]\tLoss: 0.093866, Accu: 100.00%\n","Train Epoch: 11 [4160/8706 (48%)]\tLoss: 0.092654, Accu: 96.88%\n","Train Epoch: 11 [4320/8706 (49%)]\tLoss: 0.087387, Accu: 96.88%\n","Train Epoch: 11 [4480/8706 (51%)]\tLoss: 0.053627, Accu: 96.88%\n","Train Epoch: 11 [4640/8706 (53%)]\tLoss: 0.055578, Accu: 100.00%\n","Train Epoch: 11 [4800/8706 (55%)]\tLoss: 0.321799, Accu: 84.38%\n","Train Epoch: 11 [4960/8706 (57%)]\tLoss: 0.111818, Accu: 100.00%\n","Train Epoch: 11 [5120/8706 (59%)]\tLoss: 0.124102, Accu: 90.62%\n","Train Epoch: 11 [5280/8706 (60%)]\tLoss: 0.104053, Accu: 93.75%\n","Train Epoch: 11 [5440/8706 (62%)]\tLoss: 0.220484, Accu: 81.25%\n","Train Epoch: 11 [5600/8706 (64%)]\tLoss: 0.122616, Accu: 93.75%\n","Train Epoch: 11 [5760/8706 (66%)]\tLoss: 0.070223, Accu: 96.88%\n","Train Epoch: 11 [5920/8706 (68%)]\tLoss: 0.240382, Accu: 93.75%\n","Train Epoch: 11 [6080/8706 (70%)]\tLoss: 0.085508, Accu: 93.75%\n","Train Epoch: 11 [6240/8706 (71%)]\tLoss: 0.194787, Accu: 90.62%\n","Train Epoch: 11 [6400/8706 (73%)]\tLoss: 0.089528, Accu: 93.75%\n","Train Epoch: 11 [6560/8706 (75%)]\tLoss: 0.383656, Accu: 87.50%\n","Train Epoch: 11 [6720/8706 (77%)]\tLoss: 0.063788, Accu: 96.88%\n","Train Epoch: 11 [6880/8706 (79%)]\tLoss: 0.153937, Accu: 90.62%\n","Train Epoch: 11 [7040/8706 (81%)]\tLoss: 0.090408, Accu: 93.75%\n","Train Epoch: 11 [7200/8706 (82%)]\tLoss: 0.181041, Accu: 87.50%\n","Train Epoch: 11 [7360/8706 (84%)]\tLoss: 0.062715, Accu: 100.00%\n","Train Epoch: 11 [7520/8706 (86%)]\tLoss: 0.226079, Accu: 93.75%\n","Train Epoch: 11 [7680/8706 (88%)]\tLoss: 0.150701, Accu: 90.62%\n","Train Epoch: 11 [7840/8706 (90%)]\tLoss: 0.129912, Accu: 93.75%\n","Train Epoch: 11 [8000/8706 (92%)]\tLoss: 0.133377, Accu: 93.75%\n","Train Epoch: 11 [8160/8706 (93%)]\tLoss: 0.090746, Accu: 96.88%\n","Train Epoch: 11 [8320/8706 (95%)]\tLoss: 0.178968, Accu: 84.38%\n","Train Epoch: 11 [8480/8706 (97%)]\tLoss: 0.295652, Accu: 81.25%\n","Train Epoch: 11 [8640/8706 (99%)]\tLoss: 0.032095, Accu: 100.00%\n","\n","Test set (1959 samples): Average loss: 1.1467, Accuracy: 75.75%\n","\n","Epoch 11 model saved!\n","Train Epoch: 12 [160/8706 (2%)]\tLoss: 0.169689, Accu: 90.62%\n","Train Epoch: 12 [320/8706 (4%)]\tLoss: 0.036585, Accu: 100.00%\n","Train Epoch: 12 [480/8706 (5%)]\tLoss: 0.133807, Accu: 87.50%\n","Train Epoch: 12 [640/8706 (7%)]\tLoss: 0.155675, Accu: 87.50%\n","Train Epoch: 12 [800/8706 (9%)]\tLoss: 0.093385, Accu: 96.88%\n","Train Epoch: 12 [960/8706 (11%)]\tLoss: 0.138261, Accu: 93.75%\n","Train Epoch: 12 [1120/8706 (13%)]\tLoss: 0.117544, Accu: 93.75%\n","Train Epoch: 12 [1280/8706 (15%)]\tLoss: 0.108646, Accu: 96.88%\n","Train Epoch: 12 [1440/8706 (16%)]\tLoss: 0.045839, Accu: 96.88%\n","Train Epoch: 12 [1600/8706 (18%)]\tLoss: 0.274806, Accu: 84.38%\n","Train Epoch: 12 [1760/8706 (20%)]\tLoss: 0.089986, Accu: 96.88%\n","Train Epoch: 12 [1920/8706 (22%)]\tLoss: 0.061195, Accu: 96.88%\n","Train Epoch: 12 [2080/8706 (24%)]\tLoss: 0.076255, Accu: 96.88%\n","Train Epoch: 12 [2240/8706 (26%)]\tLoss: 0.063310, Accu: 100.00%\n","Train Epoch: 12 [2400/8706 (27%)]\tLoss: 0.055846, Accu: 96.88%\n","Train Epoch: 12 [2560/8706 (29%)]\tLoss: 0.057299, Accu: 96.88%\n","Train Epoch: 12 [2720/8706 (31%)]\tLoss: 0.140025, Accu: 96.88%\n","Train Epoch: 12 [2880/8706 (33%)]\tLoss: 0.090235, Accu: 90.62%\n","Train Epoch: 12 [3040/8706 (35%)]\tLoss: 0.158990, Accu: 87.50%\n","Train Epoch: 12 [3200/8706 (37%)]\tLoss: 0.117518, Accu: 87.50%\n","Train Epoch: 12 [3360/8706 (38%)]\tLoss: 0.108995, Accu: 96.88%\n","Train Epoch: 12 [3520/8706 (40%)]\tLoss: 0.121682, Accu: 93.75%\n","Train Epoch: 12 [3680/8706 (42%)]\tLoss: 0.138648, Accu: 96.88%\n","Train Epoch: 12 [3840/8706 (44%)]\tLoss: 0.052811, Accu: 96.88%\n","Train Epoch: 12 [4000/8706 (46%)]\tLoss: 0.129360, Accu: 90.62%\n","Train Epoch: 12 [4160/8706 (48%)]\tLoss: 0.124876, Accu: 96.88%\n","Train Epoch: 12 [4320/8706 (49%)]\tLoss: 0.323861, Accu: 84.38%\n","Train Epoch: 12 [4480/8706 (51%)]\tLoss: 0.102310, Accu: 90.62%\n","Train Epoch: 12 [4640/8706 (53%)]\tLoss: 0.308633, Accu: 84.38%\n","Train Epoch: 12 [4800/8706 (55%)]\tLoss: 0.233859, Accu: 87.50%\n","Train Epoch: 12 [4960/8706 (57%)]\tLoss: 0.065106, Accu: 96.88%\n","Train Epoch: 12 [5120/8706 (59%)]\tLoss: 0.240491, Accu: 81.25%\n","Train Epoch: 12 [5280/8706 (60%)]\tLoss: 0.172485, Accu: 93.75%\n","Train Epoch: 12 [5440/8706 (62%)]\tLoss: 0.044466, Accu: 100.00%\n","Train Epoch: 12 [5600/8706 (64%)]\tLoss: 0.084694, Accu: 93.75%\n","Train Epoch: 12 [5760/8706 (66%)]\tLoss: 0.143377, Accu: 93.75%\n","Train Epoch: 12 [5920/8706 (68%)]\tLoss: 0.010505, Accu: 100.00%\n","Train Epoch: 12 [6080/8706 (70%)]\tLoss: 0.161381, Accu: 93.75%\n","Train Epoch: 12 [6240/8706 (71%)]\tLoss: 0.106902, Accu: 96.88%\n","Train Epoch: 12 [6400/8706 (73%)]\tLoss: 0.092677, Accu: 96.88%\n","Train Epoch: 12 [6560/8706 (75%)]\tLoss: 0.118133, Accu: 96.88%\n","Train Epoch: 12 [6720/8706 (77%)]\tLoss: 0.046678, Accu: 96.88%\n","Train Epoch: 12 [6880/8706 (79%)]\tLoss: 0.074684, Accu: 100.00%\n","Train Epoch: 12 [7040/8706 (81%)]\tLoss: 0.080663, Accu: 100.00%\n","Train Epoch: 12 [7200/8706 (82%)]\tLoss: 0.140229, Accu: 93.75%\n","Train Epoch: 12 [7360/8706 (84%)]\tLoss: 0.421801, Accu: 90.62%\n","Train Epoch: 12 [7520/8706 (86%)]\tLoss: 0.086745, Accu: 93.75%\n","Train Epoch: 12 [7680/8706 (88%)]\tLoss: 0.101453, Accu: 96.88%\n","Train Epoch: 12 [7840/8706 (90%)]\tLoss: 0.108787, Accu: 93.75%\n","Train Epoch: 12 [8000/8706 (92%)]\tLoss: 0.173974, Accu: 90.62%\n","Train Epoch: 12 [8160/8706 (93%)]\tLoss: 0.185401, Accu: 87.50%\n","Train Epoch: 12 [8320/8706 (95%)]\tLoss: 0.082381, Accu: 93.75%\n","Train Epoch: 12 [8480/8706 (97%)]\tLoss: 0.138197, Accu: 90.62%\n","Train Epoch: 12 [8640/8706 (99%)]\tLoss: 0.059677, Accu: 100.00%\n","\n","Test set (1959 samples): Average loss: 0.9707, Accuracy: 76.57%\n","\n","Epoch 12 model saved!\n","Train Epoch: 13 [160/8706 (2%)]\tLoss: 0.093627, Accu: 90.62%\n","Train Epoch: 13 [320/8706 (4%)]\tLoss: 0.095605, Accu: 93.75%\n","Train Epoch: 13 [480/8706 (5%)]\tLoss: 0.425615, Accu: 81.25%\n","Train Epoch: 13 [640/8706 (7%)]\tLoss: 0.050713, Accu: 96.88%\n","Train Epoch: 13 [800/8706 (9%)]\tLoss: 0.199099, Accu: 90.62%\n","Train Epoch: 13 [960/8706 (11%)]\tLoss: 0.182466, Accu: 84.38%\n","Train Epoch: 13 [1120/8706 (13%)]\tLoss: 0.032609, Accu: 100.00%\n","Train Epoch: 13 [1280/8706 (15%)]\tLoss: 0.154436, Accu: 93.75%\n","Train Epoch: 13 [1440/8706 (16%)]\tLoss: 0.064867, Accu: 96.88%\n","Train Epoch: 13 [1600/8706 (18%)]\tLoss: 0.061648, Accu: 100.00%\n","Train Epoch: 13 [1760/8706 (20%)]\tLoss: 0.117413, Accu: 96.88%\n","Train Epoch: 13 [1920/8706 (22%)]\tLoss: 0.146597, Accu: 93.75%\n","Train Epoch: 13 [2080/8706 (24%)]\tLoss: 0.034031, Accu: 100.00%\n","Train Epoch: 13 [2240/8706 (26%)]\tLoss: 0.157374, Accu: 93.75%\n","Train Epoch: 13 [2400/8706 (27%)]\tLoss: 0.096008, Accu: 93.75%\n","Train Epoch: 13 [2560/8706 (29%)]\tLoss: 0.021270, Accu: 100.00%\n","Train Epoch: 13 [2720/8706 (31%)]\tLoss: 0.034532, Accu: 96.88%\n","Train Epoch: 13 [2880/8706 (33%)]\tLoss: 0.104894, Accu: 93.75%\n","Train Epoch: 13 [3040/8706 (35%)]\tLoss: 0.204645, Accu: 96.88%\n","Train Epoch: 13 [3200/8706 (37%)]\tLoss: 0.086733, Accu: 96.88%\n","Train Epoch: 13 [3360/8706 (38%)]\tLoss: 0.177793, Accu: 90.62%\n","Train Epoch: 13 [3520/8706 (40%)]\tLoss: 0.265519, Accu: 90.62%\n","Train Epoch: 13 [3680/8706 (42%)]\tLoss: 0.081217, Accu: 96.88%\n","Train Epoch: 13 [3840/8706 (44%)]\tLoss: 0.326894, Accu: 90.62%\n","Train Epoch: 13 [4000/8706 (46%)]\tLoss: 0.088745, Accu: 93.75%\n","Train Epoch: 13 [4160/8706 (48%)]\tLoss: 0.117386, Accu: 96.88%\n","Train Epoch: 13 [4320/8706 (49%)]\tLoss: 0.208416, Accu: 87.50%\n","Train Epoch: 13 [4480/8706 (51%)]\tLoss: 0.324833, Accu: 87.50%\n","Train Epoch: 13 [4640/8706 (53%)]\tLoss: 0.223778, Accu: 87.50%\n","Train Epoch: 13 [4800/8706 (55%)]\tLoss: 0.101596, Accu: 100.00%\n","Train Epoch: 13 [4960/8706 (57%)]\tLoss: 0.123415, Accu: 96.88%\n","Train Epoch: 13 [5120/8706 (59%)]\tLoss: 0.597130, Accu: 75.00%\n","Train Epoch: 13 [5280/8706 (60%)]\tLoss: 0.130062, Accu: 93.75%\n","Train Epoch: 13 [5440/8706 (62%)]\tLoss: 0.046661, Accu: 100.00%\n","Train Epoch: 13 [5600/8706 (64%)]\tLoss: 0.059874, Accu: 96.88%\n","Train Epoch: 13 [5760/8706 (66%)]\tLoss: 0.151299, Accu: 90.62%\n","Train Epoch: 13 [5920/8706 (68%)]\tLoss: 0.107205, Accu: 90.62%\n","Train Epoch: 13 [6080/8706 (70%)]\tLoss: 0.265642, Accu: 90.62%\n","Train Epoch: 13 [6240/8706 (71%)]\tLoss: 0.037245, Accu: 100.00%\n","Train Epoch: 13 [6400/8706 (73%)]\tLoss: 0.176795, Accu: 93.75%\n","Train Epoch: 13 [6560/8706 (75%)]\tLoss: 0.099886, Accu: 93.75%\n","Train Epoch: 13 [6720/8706 (77%)]\tLoss: 0.363779, Accu: 90.62%\n","Train Epoch: 13 [6880/8706 (79%)]\tLoss: 0.076906, Accu: 96.88%\n","Train Epoch: 13 [7040/8706 (81%)]\tLoss: 0.009185, Accu: 100.00%\n","Train Epoch: 13 [7200/8706 (82%)]\tLoss: 0.039517, Accu: 100.00%\n","Train Epoch: 13 [7360/8706 (84%)]\tLoss: 0.076482, Accu: 93.75%\n","Train Epoch: 13 [7520/8706 (86%)]\tLoss: 0.453166, Accu: 84.38%\n","Train Epoch: 13 [7680/8706 (88%)]\tLoss: 0.197955, Accu: 87.50%\n","Train Epoch: 13 [7840/8706 (90%)]\tLoss: 0.072017, Accu: 100.00%\n","Train Epoch: 13 [8000/8706 (92%)]\tLoss: 0.207755, Accu: 90.62%\n","Train Epoch: 13 [8160/8706 (93%)]\tLoss: 0.101567, Accu: 96.88%\n","Train Epoch: 13 [8320/8706 (95%)]\tLoss: 0.129993, Accu: 96.88%\n","Train Epoch: 13 [8480/8706 (97%)]\tLoss: 0.206558, Accu: 93.75%\n","Train Epoch: 13 [8640/8706 (99%)]\tLoss: 0.108884, Accu: 93.75%\n","\n","Test set (1959 samples): Average loss: 0.6397, Accuracy: 81.57%\n","\n","Epoch 13 model saved!\n","Train Epoch: 14 [160/8706 (2%)]\tLoss: 0.209385, Accu: 93.75%\n","Train Epoch: 14 [320/8706 (4%)]\tLoss: 0.072909, Accu: 93.75%\n","Train Epoch: 14 [480/8706 (5%)]\tLoss: 0.049131, Accu: 100.00%\n","Train Epoch: 14 [640/8706 (7%)]\tLoss: 0.058004, Accu: 100.00%\n","Train Epoch: 14 [800/8706 (9%)]\tLoss: 0.137407, Accu: 87.50%\n","Train Epoch: 14 [960/8706 (11%)]\tLoss: 0.057365, Accu: 96.88%\n","Train Epoch: 14 [1120/8706 (13%)]\tLoss: 0.072010, Accu: 100.00%\n","Train Epoch: 14 [1280/8706 (15%)]\tLoss: 0.100792, Accu: 96.88%\n","Train Epoch: 14 [1440/8706 (16%)]\tLoss: 0.049110, Accu: 100.00%\n","Train Epoch: 14 [1600/8706 (18%)]\tLoss: 0.097750, Accu: 93.75%\n","Train Epoch: 14 [1760/8706 (20%)]\tLoss: 0.059521, Accu: 96.88%\n","Train Epoch: 14 [1920/8706 (22%)]\tLoss: 0.056784, Accu: 96.88%\n","Train Epoch: 14 [2080/8706 (24%)]\tLoss: 0.011239, Accu: 100.00%\n","Train Epoch: 14 [2240/8706 (26%)]\tLoss: 0.107877, Accu: 93.75%\n","Train Epoch: 14 [2400/8706 (27%)]\tLoss: 0.098203, Accu: 93.75%\n","Train Epoch: 14 [2560/8706 (29%)]\tLoss: 0.056734, Accu: 100.00%\n","Train Epoch: 14 [2720/8706 (31%)]\tLoss: 0.135840, Accu: 90.62%\n","Train Epoch: 14 [2880/8706 (33%)]\tLoss: 0.049233, Accu: 93.75%\n","Train Epoch: 14 [3040/8706 (35%)]\tLoss: 0.026534, Accu: 96.88%\n","Train Epoch: 14 [3200/8706 (37%)]\tLoss: 0.089111, Accu: 93.75%\n","Train Epoch: 14 [3360/8706 (38%)]\tLoss: 0.113230, Accu: 93.75%\n","Train Epoch: 14 [3520/8706 (40%)]\tLoss: 0.154192, Accu: 87.50%\n","Train Epoch: 14 [3680/8706 (42%)]\tLoss: 0.043369, Accu: 100.00%\n","Train Epoch: 14 [3840/8706 (44%)]\tLoss: 0.052320, Accu: 96.88%\n","Train Epoch: 14 [4000/8706 (46%)]\tLoss: 0.052202, Accu: 100.00%\n","Train Epoch: 14 [4160/8706 (48%)]\tLoss: 0.036369, Accu: 100.00%\n","Train Epoch: 14 [4320/8706 (49%)]\tLoss: 0.002126, Accu: 100.00%\n","Train Epoch: 14 [4480/8706 (51%)]\tLoss: 0.315296, Accu: 90.62%\n","Train Epoch: 14 [4640/8706 (53%)]\tLoss: 0.268358, Accu: 93.75%\n","Train Epoch: 14 [4800/8706 (55%)]\tLoss: 0.056188, Accu: 96.88%\n","Train Epoch: 14 [4960/8706 (57%)]\tLoss: 0.140970, Accu: 90.62%\n","Train Epoch: 14 [5120/8706 (59%)]\tLoss: 0.062821, Accu: 96.88%\n","Train Epoch: 14 [5280/8706 (60%)]\tLoss: 0.075335, Accu: 90.62%\n","Train Epoch: 14 [5440/8706 (62%)]\tLoss: 0.228627, Accu: 84.38%\n","Train Epoch: 14 [5600/8706 (64%)]\tLoss: 0.253363, Accu: 93.75%\n","Train Epoch: 14 [5760/8706 (66%)]\tLoss: 0.107547, Accu: 96.88%\n","Train Epoch: 14 [5920/8706 (68%)]\tLoss: 0.215132, Accu: 84.38%\n","Train Epoch: 14 [6080/8706 (70%)]\tLoss: 0.105307, Accu: 90.62%\n","Train Epoch: 14 [6240/8706 (71%)]\tLoss: 0.127137, Accu: 90.62%\n","Train Epoch: 14 [6400/8706 (73%)]\tLoss: 0.239959, Accu: 87.50%\n","Train Epoch: 14 [6560/8706 (75%)]\tLoss: 0.129633, Accu: 93.75%\n","Train Epoch: 14 [6720/8706 (77%)]\tLoss: 0.335230, Accu: 90.62%\n","Train Epoch: 14 [6880/8706 (79%)]\tLoss: 0.160710, Accu: 96.88%\n","Train Epoch: 14 [7040/8706 (81%)]\tLoss: 0.114062, Accu: 90.62%\n","Train Epoch: 14 [7200/8706 (82%)]\tLoss: 0.087121, Accu: 96.88%\n","Train Epoch: 14 [7360/8706 (84%)]\tLoss: 0.058354, Accu: 93.75%\n","Train Epoch: 14 [7520/8706 (86%)]\tLoss: 0.029664, Accu: 100.00%\n","Train Epoch: 14 [7680/8706 (88%)]\tLoss: 0.059370, Accu: 100.00%\n","Train Epoch: 14 [7840/8706 (90%)]\tLoss: 0.370678, Accu: 90.62%\n","Train Epoch: 14 [8000/8706 (92%)]\tLoss: 0.045389, Accu: 96.88%\n","Train Epoch: 14 [8160/8706 (93%)]\tLoss: 0.125366, Accu: 90.62%\n","Train Epoch: 14 [8320/8706 (95%)]\tLoss: 0.083738, Accu: 96.88%\n","Train Epoch: 14 [8480/8706 (97%)]\tLoss: 0.153455, Accu: 87.50%\n","Train Epoch: 14 [8640/8706 (99%)]\tLoss: 0.158570, Accu: 90.62%\n","\n","Test set (1959 samples): Average loss: 0.6993, Accuracy: 78.10%\n","\n","Epoch 14 model saved!\n","Train Epoch: 15 [160/8706 (2%)]\tLoss: 0.076785, Accu: 93.75%\n","Train Epoch: 15 [320/8706 (4%)]\tLoss: 0.004159, Accu: 100.00%\n","Train Epoch: 15 [480/8706 (5%)]\tLoss: 0.234942, Accu: 93.75%\n","Train Epoch: 15 [640/8706 (7%)]\tLoss: 0.123297, Accu: 93.75%\n","Train Epoch: 15 [800/8706 (9%)]\tLoss: 0.248709, Accu: 93.75%\n","Train Epoch: 15 [960/8706 (11%)]\tLoss: 0.068642, Accu: 96.88%\n","Train Epoch: 15 [1120/8706 (13%)]\tLoss: 0.040300, Accu: 96.88%\n","Train Epoch: 15 [1280/8706 (15%)]\tLoss: 0.050449, Accu: 96.88%\n","Train Epoch: 15 [1440/8706 (16%)]\tLoss: 0.093020, Accu: 96.88%\n","Train Epoch: 15 [1600/8706 (18%)]\tLoss: 0.067446, Accu: 93.75%\n","Train Epoch: 15 [1760/8706 (20%)]\tLoss: 0.062548, Accu: 93.75%\n","Train Epoch: 15 [1920/8706 (22%)]\tLoss: 0.075577, Accu: 100.00%\n","Train Epoch: 15 [2080/8706 (24%)]\tLoss: 0.157786, Accu: 90.62%\n","Train Epoch: 15 [2240/8706 (26%)]\tLoss: 0.054367, Accu: 100.00%\n","Train Epoch: 15 [2400/8706 (27%)]\tLoss: 0.397119, Accu: 87.50%\n","Train Epoch: 15 [2560/8706 (29%)]\tLoss: 0.053121, Accu: 96.88%\n","Train Epoch: 15 [2720/8706 (31%)]\tLoss: 0.231279, Accu: 90.62%\n","Train Epoch: 15 [2880/8706 (33%)]\tLoss: 0.034040, Accu: 100.00%\n","Train Epoch: 15 [3040/8706 (35%)]\tLoss: 0.208197, Accu: 90.62%\n","Train Epoch: 15 [3200/8706 (37%)]\tLoss: 0.085386, Accu: 93.75%\n","Train Epoch: 15 [3360/8706 (38%)]\tLoss: 0.174863, Accu: 90.62%\n","Train Epoch: 15 [3520/8706 (40%)]\tLoss: 0.243842, Accu: 87.50%\n","Train Epoch: 15 [3680/8706 (42%)]\tLoss: 0.134586, Accu: 90.62%\n","Train Epoch: 15 [3840/8706 (44%)]\tLoss: 0.075368, Accu: 96.88%\n","Train Epoch: 15 [4000/8706 (46%)]\tLoss: 0.033364, Accu: 96.88%\n","Train Epoch: 15 [4160/8706 (48%)]\tLoss: 0.078461, Accu: 93.75%\n","Train Epoch: 15 [4320/8706 (49%)]\tLoss: 0.075252, Accu: 96.88%\n","Train Epoch: 15 [4480/8706 (51%)]\tLoss: 0.046331, Accu: 100.00%\n","Train Epoch: 15 [4640/8706 (53%)]\tLoss: 0.119771, Accu: 90.62%\n","Train Epoch: 15 [4800/8706 (55%)]\tLoss: 0.086733, Accu: 90.62%\n","Train Epoch: 15 [4960/8706 (57%)]\tLoss: 0.057071, Accu: 100.00%\n","Train Epoch: 15 [5120/8706 (59%)]\tLoss: 0.259532, Accu: 90.62%\n","Train Epoch: 15 [5280/8706 (60%)]\tLoss: 0.130223, Accu: 93.75%\n","Train Epoch: 15 [5440/8706 (62%)]\tLoss: 0.022120, Accu: 100.00%\n","Train Epoch: 15 [5600/8706 (64%)]\tLoss: 0.015787, Accu: 100.00%\n","Train Epoch: 15 [5760/8706 (66%)]\tLoss: 0.131124, Accu: 93.75%\n","Train Epoch: 15 [5920/8706 (68%)]\tLoss: 0.093877, Accu: 93.75%\n","Train Epoch: 15 [6080/8706 (70%)]\tLoss: 0.204241, Accu: 90.62%\n","Train Epoch: 15 [6240/8706 (71%)]\tLoss: 0.063632, Accu: 96.88%\n","Train Epoch: 15 [6400/8706 (73%)]\tLoss: 0.121479, Accu: 90.62%\n","Train Epoch: 15 [6560/8706 (75%)]\tLoss: 0.367988, Accu: 90.62%\n","Train Epoch: 15 [6720/8706 (77%)]\tLoss: 0.126460, Accu: 90.62%\n","Train Epoch: 15 [6880/8706 (79%)]\tLoss: 0.050028, Accu: 96.88%\n","Train Epoch: 15 [7040/8706 (81%)]\tLoss: 0.110986, Accu: 90.62%\n","Train Epoch: 15 [7200/8706 (82%)]\tLoss: 0.049219, Accu: 96.88%\n","Train Epoch: 15 [7360/8706 (84%)]\tLoss: 0.174219, Accu: 93.75%\n","Train Epoch: 15 [7520/8706 (86%)]\tLoss: 0.201751, Accu: 90.62%\n","Train Epoch: 15 [7680/8706 (88%)]\tLoss: 0.074076, Accu: 96.88%\n","Train Epoch: 15 [7840/8706 (90%)]\tLoss: 0.129250, Accu: 93.75%\n","Train Epoch: 15 [8000/8706 (92%)]\tLoss: 0.234907, Accu: 87.50%\n","Train Epoch: 15 [8160/8706 (93%)]\tLoss: 0.042698, Accu: 96.88%\n","Train Epoch: 15 [8320/8706 (95%)]\tLoss: 0.046852, Accu: 96.88%\n","Train Epoch: 15 [8480/8706 (97%)]\tLoss: 0.005978, Accu: 100.00%\n","Train Epoch: 15 [8640/8706 (99%)]\tLoss: 0.134630, Accu: 90.62%\n","\n","Test set (1959 samples): Average loss: 1.1199, Accuracy: 78.41%\n","\n","Epoch 15 model saved!\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA0EAAAGJCAYAAABM2TgpAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAw8ZJREFUeJzsnXeYFMXWxt+evDmxgZxBsorhIgZUFAURs5gQA34qqIgRr9d0VYwoKuaAGVRMFxRFQDGioqhIkrykzTlM7O+PmuqZ2Z3dndA9Xb17fs+zD+xsz0ztdG13nTrveY8ky7IMgiAIgiAIgiCIDoJJ7wEQBEEQBEEQBEEkEgqCCIIgCIIgCILoUFAQRBAEQRAEQRBEh4KCIIIgCIIgCIIgOhQUBBEEQRAEQRAE0aGgIIggCIIgCIIgiA4FBUEEQRAEQRAEQXQoKAgiCIIgCIIgCKJDQUEQQRAEQRAEQRAdCgqCCEJldu7cCUmSsGDBgqif+/XXX0OSJHz99detHrdgwQJIkoSdO3fGNEaCIAhCHHr16oWpU6fG9NwxY8ZgzJgxqo6HIDoCFAQRBEEQBEG0wg8//IB77rkHlZWVeg+FIAiVsOg9AIIgCIIgCJH54YcfcO+992Lq1KnIzMxU/fU3b94Mkym2fekvv/xS5dEQRMeAMkEEQRAEQRAq4fP50NjYGNVz7HY7rFZrTO9ns9lgs9lieq7RieWzJggOBUFEu+Oee+6BJEnYsmULLr74YmRkZCA3Nxf/+c9/IMsyCgsLMWnSJKSnp6OgoACPP/54s9coLi7GFVdcgfz8fDgcDowYMQKvv/56s+MqKysxdepUZGRkIDMzE5deemmLcolNmzbhnHPOQXZ2NhwOBw477DB8+umnqv7uzz77LIYMGQK73Y4uXbpg+vTpzcbzzz//4Oyzz0ZBQQEcDge6deuGyZMno6qqSjlm+fLlOProo5GZmYnU1FQMHDgQd9xxh6pjJQiCMAL33HMPbrnlFgBA7969IUlSSE2mJEmYMWMG3n77beX6u2zZMgDAY489hqOOOgo5OTlISkrCyJEj8cEHHzR7j6Y1Qbzu8/vvv8esWbOQm5uLlJQUnHnmmSgpKQl5btOaIF5b+t577+GBBx5At27d4HA4cOKJJ2Lr1q3N3nv+/Pno06cPkpKScMQRR+Dbb7+NuM4okntFY2Mj7rnnHgwYMAAOhwOdO3fGWWedhW3btinH1NXV4aabbkL37t1ht9sxcOBAPPbYY5BlOeS1Wvus9+7di8svvxz5+fmw2+0YMmQIXn311WZjfvrppzFkyBAkJycjKysLhx12GN555502f1ei/UFyOKLdcv7552PQoEF46KGHsHTpUtx///3Izs7GCy+8gBNOOAEPP/ww3n77bdx88804/PDDceyxxwIAGhoaMGbMGGzduhUzZsxA79698f7772Pq1KmorKzEDTfcAACQZRmTJk3Cd999h6uvvhqDBg3CRx99hEsvvbTZWP7++2+MHj0aXbt2xe23346UlBS89957OOOMM7B48WKceeaZcf++99xzD+69916MHTsW11xzDTZv3oznnnsOv/zyC77//ntYrVa4XC6MGzcOTqcT1113HQoKCrB3714sWbIElZWVyMjIwN9//43TTjsNw4cPx3333Qe73Y6tW7fi+++/j3uMBEEQRuOss87Cli1b8O677+KJJ55Ap06dAAC5ubnKMStXrsR7772HGTNmoFOnTujVqxcAYN68eTj99NNx0UUXweVyYeHChTj33HOxZMkSTJgwoc33vu6665CVlYW7774bO3fuxJNPPokZM2Zg0aJFbT73oYcegslkws0334yqqio88sgjuOiii7BmzRrlmOeeew4zZszAMcccgxtvvBE7d+7EGWecgaysLHTr1q3V14/kXuH1enHaaadhxYoVmDx5Mm644QbU1NRg+fLlWL9+Pfr27QtZlnH66adj1apVuOKKK3DwwQfjiy++wC233IK9e/fiiSeeCHnfcJ91UVER/vWvfylBUm5uLj7//HNcccUVqK6uxsyZMwEAL730Eq6//nqcc845uOGGG9DY2Ig///wTa9aswYUXXtjmZ0q0M2SCaGfcfffdMgD5qquuUh7zeDxyt27dZEmS5Iceekh5vKKiQk5KSpIvvfRS5bEnn3xSBiC/9dZbymMul0seNWqUnJqaKldXV8uyLMsff/yxDEB+5JFHQt7nmGOOkQHIr732mvL4iSeeKA8bNkxubGxUHvP5fPJRRx0l9+/fX3ls1apVMgB51apVrf6Or732mgxA3rFjhyzLslxcXCzbbDb55JNPlr1er3LcM888IwOQX331VVmWZfn333+XAcjvv/9+i6/9xBNPyADkkpKSVsdAEATRUXj00UdDrrnBAJBNJpP8999/N/tZfX19yPcul0seOnSofMIJJ4Q83rNnz5D7EL/Gjx07Vvb5fMrjN954o2w2m+XKykrlseOOO04+7rjjlO/5fWTQoEGy0+lUHp83b54MQP7rr79kWZZlp9Mp5+TkyIcffrjsdruV4xYsWCADCHnNcERyr3j11VdlAPLcuXOb/Yz/Xvxeev/994f8/JxzzpElSZK3bt2qPNbSZ33FFVfInTt3lktLS0Menzx5spyRkaGch0mTJslDhgxp9fciOg4khyPaLVdeeaXyf7PZjMMOOwyyLOOKK65QHs/MzMTAgQOxfft25bHPPvsMBQUFuOCCC5THrFYrrr/+etTW1uKbb75RjrNYLLjmmmtC3ue6664LGUd5eTlWrlyJ8847DzU1NSgtLUVpaSnKysowbtw4/PPPP9i7d29cv+tXX30Fl8uFmTNnhhTXTps2Denp6Vi6dCkAICMjAwDwxRdfoL6+Puxr8aLfTz75BD6fL65xEQRBdASOO+44DB48uNnjSUlJyv8rKipQVVWFY445Br/99ltEr3vVVVdBkiTl+2OOOQZerxe7du1q87mXXXZZSK3QMcccAwDK/e7XX39FWVkZpk2bBoslIAy66KKLkJWV1ebrR3KvWLx4MTp16tTsvghA+b0+++wzmM1mXH/99SE/v+mmmyDLMj7//POQx5t+1rIsY/HixZg4cSJkWVbusaWlpRg3bhyqqqqUzzszMxN79uzBL7/80ubvR7R/KAgi2i09evQI+T4jIwMOh0ORMgQ/XlFRoXy/a9cu9O/fv5lTz6BBg5Sf8387d+6M1NTUkOMGDhwY8v3WrVshyzL+85//IDc3N+Tr7rvvBsBqkOKBj6npe9tsNvTp00f5ee/evTFr1iy8/PLL6NSpE8aNG4f58+eH1AOdf/75GD16NK688krk5+dj8uTJeO+99yggIgiCaIHevXuHfXzJkiX417/+BYfDgezsbOTm5uK5554Luea2RtP7GA9Ogu9ZsT6X3xf69esXcpzFYlHkfK0Ryb1i27ZtGDhwYEiQ1ZRdu3ahS5cuSEtLC3m86T2X0/SzLikpQWVlJV588cVm99jLLrsMQOAee9tttyE1NRVHHHEE+vfvj+nTp5PUuwNDNUFEu8VsNkf0GIBmxZdqwm8IN998M8aNGxf2mKY3IS15/PHHMXXqVHzyySf48ssvcf3112POnDn46aef0K1bNyQlJWH16tVYtWoVli5dimXLlmHRokU44YQT8OWXX7b4GRIEQXRUgjM+nG+//Rann346jj32WDz77LPo3LkzrFYrXnvttYgL8eO5Z2l9v9PrXtH0s+b32IsvvjhsTS4ADB8+HAALrDZv3owlS5Zg2bJlWLx4MZ599lncdddduPfeezUZLyEulAkiiCb07NkT//zzT7PMx6ZNm5Sf83/379+P2trakOM2b94c8n2fPn0AMEnd2LFjw3413QGLZczh3tvlcmHHjh3KzznDhg3DnXfeidWrV+Pbb7/F3r178fzzzys/N5lMOPHEEzF37lxs2LABDzzwAFauXIlVq1bFNU6CIAgjEixJi5TFixfD4XDgiy++wOWXX45TTz0VY8eO1WB0scHvC00d4zwej+J81xZt3Sv69u2LzZs3w+12tzqOffv2oaamJuTxpvfclsjNzUVaWhq8Xm+L99i8vDzl+JSUFJx//vl47bXXsHv3bkyYMAEPPPAAWW13QCgIIogmjB8/HgcOHAhx3/F4PHj66aeRmpqK4447TjnO4/HgueeeU47zer14+umnQ14vLy8PY8aMwQsvvID9+/c3e7+mdqexMHbsWNhsNjz11FMhu3yvvPIKqqqqFBei6upqeDyekOcOGzYMJpMJTqcTAKthasrBBx8MAMoxBEEQHYmUlBQAaLEFQjjMZjMkSYLX61Ue27lzJz7++GOVRxcbhx12GHJycvDSSy+F3BfefvvtiOR2kdwrzj77bJSWluKZZ55pdiy/V40fPx5er7fZMU888QQkScKpp57a6jjMZjPOPvtsLF68GOvXr2/28+B7bFlZWcjPbDYbBg8eDFmWWw3UiPYJyeEIoglXXXUVXnjhBUydOhVr165Fr1698MEHH+D777/Hk08+qWRtJk6ciNGjR+P222/Hzp07MXjwYHz44Ydhtd7z58/H0UcfjWHDhmHatGno06cPioqK8OOPP2LPnj34448/4hpzbm4uZs+ejXvvvRennHIKTj/9dGzevBnPPvssDj/8cFx88cUAmLXojBkzcO6552LAgAHweDx48803lZsIANx3331YvXo1JkyYgJ49e6K4uBjPPvssunXrhqOPPjqucRIEQRiRkSNHAgD+/e9/Y/LkybBarZg4caISHIVjwoQJmDt3Lk455RRceOGFKC4uxvz589GvXz/8+eefiRp6i9hsNtxzzz247rrrcMIJJ+C8887Dzp07sWDBAvTt27fN7Fck94opU6bgjTfewKxZs/Dzzz/jmGOOQV1dHb766itce+21mDRpEiZOnIjjjz8e//73v7Fz506MGDECX375JT755BPMnDkTffv2bfN3eeihh7Bq1SoceeSRmDZtGgYPHozy8nL89ttv+Oqrr5SA7eSTT0ZBQQFGjx6N/Px8bNy4Ec888wwmTJgQtyKDMCA6udIRhGZwi+ymtp2XXnqpnJKS0uz44447rpllZlFRkXzZZZfJnTp1km02mzxs2LAQy2tOWVmZfMkll8jp6elyRkaGfMkllyg21E2P37ZtmzxlyhS5oKBAtlqtcteuXeXTTjtN/uCDD5RjYrXI5jzzzDPyQQcdJFutVjk/P1++5ppr5IqKCuXn27dvly+//HK5b9++ssPhkLOzs+Xjjz9e/uqrr5RjVqxYIU+aNEnu0qWLbLPZ5C5dusgXXHCBvGXLllbHRBAE0Z7573//K3ft2lU2mUwh118A8vTp08M+55VXXpH79+8v2+12+aCDDpJfe+015R4VTEsW2b/88kvIceHuES1ZZDdthbBjx46w96annnpK7tmzp2y32+UjjjhC/v777+WRI0fKp5xySqufR6T3ivr6evnf//633Lt3b9lqtcoFBQXyOeecI2/btk05pqamRr7xxhvlLl26yFarVe7fv7/86KOPhtiDy3Lrn3VRUZE8ffp0uXv37sr7nHjiifKLL76oHPPCCy/Ixx57rJyTkyPb7Xa5b9++8i233CJXVVW1+rsS7RNJljWsCCcIgiAIgiAMg8/nQ25uLs466yy89NJLeg+HIDSDaoIIgiAIgiA6II2Njc3c4t544w2Ul5djzJgx+gyKIBIEZYIIgiAIgiA6IF9//TVuvPFGnHvuucjJycFvv/2GV155BYMGDcLatWtDmq0SRHuDjBEIgiAIgiA6IL169UL37t3x1FNPoby8HNnZ2ZgyZQoeeughCoCIdg9lggiCIAiCIAiC6FBQTRBBEARBEARBEB0KCoIIgiAIgiAIguhQGLomyOfzYd++fUhLS2uzqRdBEAShHrIso6amBl26dIHJRPtpwdC9iSAIQh+iuTcZOgjat28funfvrvcwCIIgOiyFhYXo1q2b3sMQCro3EQRB6Esk9yZDB0FpaWkA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smWYMmUKDh06hPXr12P9+vVSh9aqBx54AK+99hrCw8ORkJCAo0eP4q233sKsWbOkDs1OZWUlzp07Z/3+woULOHbsGAICAhAeHo558+bh1VdfRb9+/RAVFYXFixcjNDQUkyZNki5otB53SEgIJk+ejOzsbGzfvh0mk8n6NxoQEACtVutyMYeHh9+SEDUaDYKDgxETE+PsUEmG5JiXAOYmZ2NukiZmV81LgAfkJmmb07kfAC1+bdy4UerQOkQObUiFEOLrr78WAwYMEDqdTsTGxor169dLHVKbysvLxdy5c0V4eLjw8vISd911l3jppZeE0WiUOjQ76enpLe7LM2bMEEI0tiJdvHixCAoKEjqdTowbN07k5uZKG7RoPe4LFy7c9m80PT3dJWNuidzakJK03CUvCcHc5EjMTdLE7Kp5qa24WyK33KQQwsUuBUxERERERORAbIxAREREREQehUUQERERERF5FBZBRERERETkUVgEERERERGRR2ERREREREREHoVFEBEREREReRQWQURERERE5FFYBBERERERkUdhEUTk4jIyMqBQKFBaWip1KERERACYm0j+WAQREREREZFHYRFEREREREQehUUQURvMZjPS0tIQFRUFvV6PwYMH47PPPgPQPB1gx44dGDRoELy8vHDPPfcgJyfH7md8/vnnSEhIgE6nQ2RkJN588027+41GIxYtWoSwsDDodDpER0fjH//4h91jsrKykJiYCG9vbyQlJSE3N9d63/HjxzF27FgYDAb4+flh2LBhOHLkiINeESIikhpzE1EnCSJq1auvvipiY2PFt99+K/Ly8sTGjRuFTqcTGRkZIj09XQAQcXFx4rvvvhM//vij+PWvfy0iIyNFXV2dEEKII0eOCKVSKZYsWSJyc3PFxo0bhV6vFxs3brQ+x5QpU0RYWJj44osvRF5envj+++/F5s2bhRDC+hwjR44UGRkZ4uTJk2LMmDEiKSnJ+v8TEhLE448/Lk6dOiXOnDkjtmzZIo4dO+bU14mIiJyHuYmoc1gEEbWitrZWeHt7i3379tlt//3vfy+mTp1qTQKWpCCEEDdu3BB6vV588sknQgghfve734kJEybY/f+FCxeK+Ph4IYQQubm5AoDYuXNnizFYnuP777+3btuxY4cAIGpqaoQQQhgMBvHBBx90/hcmIiKXx9xE1HmcDkfUinPnzqG6uhoTJkyAr6+v9evDDz9EXl6e9XGjRo2y3g4ICEBMTAxOnToFADh16hSSk5Ptfm5ycjLOnj0Lk8mEY8eOQaVS4d577201lkGDBllvh4SEAACKi4sBAAsWLMATTzyB8ePH4/XXX7eLjYiI3AtzE1HnsQgiakVlZSUAYMeOHTh27Jj166effrLOve4svV7frsdpNBrrbYVCAaBxTjgAvPLKKzh58iQmTpyI//znP4iPj8fWrVu7JD4iInItzE1EncciiKgV8fHx0Ol0uHjxIqKjo+2+wsLCrI87cOCA9XZJSQnOnDmDuLg4AEBcXBz27t1r93P37t2L/v37Q6VSYeDAgTCbzcjMzOxUrP3798f8+fPx3Xff4cEHH8TGjRs79fOIiMg1MTcRdZ5a6gCIXJnBYMDzzz+P+fPnw2w2Y/To0SgrK8PevXvh5+eHiIgIAMCSJUsQGBiIoKAgvPTSS+jRowcmTZoEAHjuuecwfPhwLF26FI888gj279+PNWvW4L333gMAREZGYsaMGZg1axZWr16NwYMHIz8/H8XFxZgyZUqbMdbU1GDhwoWYPHkyoqKicPnyZRw+fBgPPfSQw14XIiKSDnMTUReQelESkaszm81i1apVIiYmRmg0GtGzZ0+RkpIiMjMzrQtDv/76a5GQkCC0Wq0YMWKEOH78uN3P+Oyzz0R8fLzQaDQiPDxcrFixwu7+mpoaMX/+fBESEiK0Wq2Ijo4WGzZsEEI0Lz4tKSmxPv7o0aMCgLhw4YIwGo3i0UcfFWFhYUKr1YrQ0FDxzDPPWBemEhGR+2FuIuochRBCSFmEEclZRkYGxo4di5KSEnTr1k3qcIiIiJibiNqBa4KIiIiIiMijsAgiIiIiIiKPwulwRERERETkUTgSREREREREHoVFEBEREREReRQWQURERERE5FFYBBERERERkUdhEURERERERB6FRRAREREREXkUFkFERERERORRWAQREREREZFH+X/AIlWsiM/ycQAAAABJRU5ErkJggg==\n"},"metadata":{}}]}]}