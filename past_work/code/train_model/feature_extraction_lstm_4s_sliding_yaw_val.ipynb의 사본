{"cells":[{"cell_type":"code","execution_count":601,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1742293667464,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"J68SdBzNjphV"},"outputs":[],"source":["# from google.colab import drive\n","# drive.mount('/content/drive/')"]},{"cell_type":"markdown","metadata":{"id":"wUDOtyCzmZth"},"source":["## **학습 & 테스트 프로세스 요약**\n","| 단계 | 학습 (Train) | 테스트 (Test) |\n","|------|------------|-------------|\n","| **1. 데이터 입력** | CSV 파일 (이미 추출된 특징값) | 동영상 |\n","| **2. 특징 추출** | CSV에서 불러오기 | 동영상 → 프레임 추출 → 12개 묶음 → 특징 추출 |\n","| **3. 데이터 변환** | `(배치, 12, 5)` 형태로 변환 | `(1, 12, 5)` 형태로 변환 |\n","| **4. 모델 학습/예측** | LSTM 모델 학습 | LSTM 모델을 이용해 예측 |\n","| **5. 결과 저장** | `.pth` 파일로 저장 | 예측값 출력 |\n"]},{"cell_type":"markdown","metadata":{"id":"Fk84YrSckNTx"},"source":["# 1. 학습"]},{"cell_type":"markdown","metadata":{"id":"QJKfO0xhkSSz"},"source":["1. 추출된 feature 로드 및 병합\n","2. LSTM Input 형식으로 변환\n","3. LSTM 학습"]},{"cell_type":"markdown","metadata":{"id":"FJuBF9S3WK2y"},"source":["## 라이브러리 임포트"]},{"cell_type":"code","execution_count":602,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1742293667470,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"RUcDoYl9WKdi"},"outputs":[],"source":["# !pip install koreanize-matplotlib"]},{"cell_type":"code","execution_count":603,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1742293667478,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"qtMzGHiCkMEO"},"outputs":[],"source":["import os\n","import datetime\n","from tqdm import tqdm\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, classification_report\n","from collections import Counter\n","import koreanize_matplotlib\n","import random\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","from torch.utils.data import DataLoader, TensorDataset\n","import torch.utils.data as data\n","import torch.optim as optim\n","import torchvision\n","from torch.autograd import Variable\n","\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score\n","from PIL import Image\n","\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"markdown","metadata":{"id":"1Srd-RY9pcZE"},"source":["## 1-2. LSTM Input 형식으로 변환"]},{"cell_type":"markdown","metadata":{"id":"JwkJmAOOFgDF"},"source":["### Config 설정"]},{"cell_type":"code","execution_count":604,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1742293667482,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"J0uHHAFSEwCH"},"outputs":[],"source":["config = {\n","    # RNN 설정\n","    \"RNN_hidden_layers\": 3,  # LSTM Layer 개수\n","    \"RNN_hidden_nodes\": 512,  # RNN Hidden State 크기\n","    \"RNN_FC_dim\": 256,  # RNN 최종 FC Layer 뉴런 개수\n","    \"dropout_p\": 0.2,  # 드롭아웃 비율\n","\n","    # 학습 설정\n","    \"k\": 4,  # 클래스 개수 (normal, yawn, phonecall, text)\n","    \"feature_num\": 5, # Pitch, Yaw, EAR, MAR, Phone Detected\n","    \"timestep\": 24,\n","    \"sliding_step\": 3,\n","    \"epochs\": 100,  # 총 학습 횟수\n","    \"batch_size\": 32,  # 배치 크기\n","    \"learning_rate\": 3e-4,  # 학습률\n","    \"log_interval\": 5,  # 몇 번의 배치마다 로그 출력할지\n","\n","    \"action_names\": [\"normal\", \"phonecall\", \"text\", \"yawn\"],  # 분류할 행동 리스트\n","\n","    \"use_cuda\": torch.cuda.is_available(),\n","    \"device\": torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\"),  # GPU 사용 가능 여부에 따라 설정\n","    \"early_stopping_patience\": 20,  # Early Stopping 기준 Epoch\n","    \"reduce_lr_factor\": 0.5,  # Learning Rate 감소 비율\n","    \"reduce_lr_patience\": 7,  # Learning Rate 감소 기준 Epoch\n","\n","    \"random_seed\": 24,\n","\n","    # 모델 결과 저장 경로\n","    \"model_save_path\": \"/content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch\",\n","    \"train_result_path\": \"/content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results\",\n","}"]},{"cell_type":"code","source":["def set_random_seed(seed):\n","    torch.manual_seed(seed)  # PyTorch CPU 연산에 대한 시드 설정\n","    torch.cuda.manual_seed(seed)  # CUDA 연산에 대한 시드 설정 (GPU 사용 시)\n","    torch.cuda.manual_seed_all(seed)  # 여러 GPU를 사용하는 경우 모든 GPU에 동일한 시드 설정\n","    np.random.seed(seed)  # NumPy 연산에 대한 시드 설정\n","    random.seed(seed)  # Python 기본 random 모듈의 시드 설정\n","    torch.backends.cudnn.deterministic = True  # CuDNN 연산의 결정론적 동작 보장\n","    torch.backends.cudnn.benchmark = False  # 성능 최적화 비활성화 (재현성 보장)"],"metadata":{"id":"nnUAKflRWPoq","executionInfo":{"status":"ok","timestamp":1742293667496,"user_tz":-540,"elapsed":5,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"execution_count":605,"outputs":[]},{"cell_type":"code","source":["set_random_seed(config[\"random_seed\"])"],"metadata":{"id":"0yvpUkvTWz3e","executionInfo":{"status":"ok","timestamp":1742293667541,"user_tz":-540,"elapsed":44,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"execution_count":606,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pRHMOaLpW7Y2"},"source":["## 데이터 로드"]},{"cell_type":"markdown","metadata":{"id":"OdLSCKeSrZAE"},"source":["### process_features"]},{"cell_type":"code","execution_count":607,"metadata":{"executionInfo":{"elapsed":0,"status":"ok","timestamp":1742293667542,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"3MXMQC38jyny"},"outputs":[],"source":["# 하이퍼파라미터\n","BATCH_SIZE = config['batch_size']\n","TIMESTEP = config['timestep']\n","FEATURE_DIM = config['feature_num'] # Pitch, Yaw, EAR, MAR, Phone Detected\n","NUM_CLASSES = config['k']  # normal, phonecall, text, yawn\n","SLIDING_STEP = config['sliding_step']\n","label_mapping = {\"normal\": 0, \"phonecall\": 1, \"text\": 2, \"yawn\": 3}\n","label_mapping_inverse = {0: \"normal\", 1: \"phonecall\", 2: \"text\", 3: \"yawn\"}\n","\n","# 공통 로직: 데이터프레임 처리 및 시퀀스 생성\n","def process_features(df, sliding_labels=None, yaw_inversion_labels=None, is_train=True):\n","    \"\"\"\n","    데이터프레임에서 시퀀스를 생성하는 함수.\n","\n","    Args:\n","        df (pd.DataFrame): 입력 데이터프레임.\n","        sliding_labels (list): Sliding window 방식 적용할 라벨 리스트 (예: ['text', 'yawn']).\n","        is_train (bool): 학습용 데이터 여부. 테스트 데이터는 sliding step을 사용하지 않음.\n","\n","    Returns:\n","        torch.Tensor: 시퀀스 데이터.\n","        torch.Tensor: 라벨 데이터.\n","        list: 메타데이터 (label, group_key, sequence_index).\n","        np.array: StratifiedGroupkFold 입력용 person ids\n","    \"\"\"\n","    # label 인코딩\n","    df['label_encoded'] = df['label'].map(label_mapping)\n","\n","    sequences = []\n","    labels = []\n","    person_ids = [] # cv 용\n","    metadata = []  # 메타데이터 저장 리스트\n","\n","    for (label_encoded, group_key), group in df.groupby(['label_encoded', 'video_clip']):\n","        group = group.sort_values(by='frame')  # 프레임 순서대로 정렬\n","        features = group[[\"gaze_pitch\", \"gaze_yaw\", \"EAR\", \"MAR\", \"phone_detected\"]].values\n","        person_id = group_key.split(\"_\")[0]\n","\n","        # Sliding window 방식 적용 여부 결정\n","        if is_train and sliding_labels and label_mapping_inverse[label_encoded] in sliding_labels:\n","            step_size = SLIDING_STEP\n","        else:\n","            step_size = TIMESTEP\n","\n","        # 원본 데이터를 처리\n","        for start_idx in range(0, len(features) - TIMESTEP + 1, step_size):\n","            end_idx = start_idx + TIMESTEP\n","            if end_idx <= len(features):\n","                sequences.append(features[start_idx:end_idx])\n","                labels.append(label_encoded)\n","                person_ids.append(person_id)\n","                metadata.append((label_encoded, group_key, start_idx))  # 메타데이터 추가\n","\n","        # yaw_inversion_labels 해당\n","        if is_train and yaw_inversion_labels and label_mapping_inverse[label_encoded] in yaw_inversion_labels:\n","            inverted_features = features.copy()\n","            inverted_features[:, 1] = -inverted_features[:, 1]  # gaze_yaw 반전 (첫 번째 컬럼)\n","\n","            for start_idx in range(0, len(inverted_features) - TIMESTEP + 1, step_size):\n","                end_idx = start_idx + TIMESTEP\n","                if end_idx <= len(inverted_features):  # 마지막 시퀀스가 seq_length에 맞는 경우만 처리\n","                    sequences.append(inverted_features[start_idx:end_idx])\n","                    labels.append(label_encoded)\n","                    person_ids.append(person_id)\n","                    metadata.append((label_encoded, group_key, start_idx))  # 메타데이터 추가\n","\n","    # pytorch tensor 변환\n","    return (torch.tensor(sequences, dtype=torch.float32), torch.tensor(labels, dtype=torch.long), metadata, np.array(person_ids))\n","\n","\n","# 학습용 데이터 로드 함수\n","def load_train_features(df):\n","    \"\"\"\n","    학습용 데이터를 처리하여 시퀀스를 생성하는 함수.\n","    \"\"\"\n","    sliding_labels = ['yawn']  # Sliding window 방식 적용할 라벨 리스트\n","    yaw_inversion_labels = ['text']\n","    return process_features(df, sliding_labels=sliding_labels, yaw_inversion_labels=yaw_inversion_labels, is_train=True)\n","\n","# 테스트용 데이터 로드 함수\n","def load_test_features(df):\n","    \"\"\"\n","    테스트용 데이터를 처리하여 시퀀스를 생성하는 함수.\n","    \"\"\"\n","    return process_features(df, sliding_labels=None, is_train=False)"]},{"cell_type":"markdown","metadata":{"id":"D4kw1BfVdgNz"},"source":["### train, test data load"]},{"cell_type":"code","execution_count":608,"metadata":{"executionInfo":{"elapsed":2087,"status":"ok","timestamp":1742293669629,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"HFZeOUpSsSCH"},"outputs":[],"source":["train = pd.read_csv(\"/content/drive/MyDrive/DMS/data/EDA/train_processed.csv\")\n","test = pd.read_csv(\"/content/drive/MyDrive/DMS/data/EDA/test_processed.csv\")"]},{"cell_type":"markdown","source":["## train, validation 분리"],"metadata":{"id":"X_4dXreY4-s6"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Step 1: 사람별 ID 추출\n","def get_person_id(video_name):\n","    \"\"\"\n","    video_name에서 사람별 ID를 추출합니다.\n","    \"\"\"\n","    return video_name.split(\"_\")[0]  # 예: \"dash#\", \"mirror#\", \"gA#\" 등\n","\n","# 데이터에 person_id 열 추가\n","train['person_id'] = train['video_name'].apply(get_person_id)\n","\n","# Step 2: 사람별로 train과 validation 세트 나누기\n","def split_by_person(data, test_size=0.2, random_state=42):\n","    \"\"\"\n","    사람별로 데이터를 train과 validation 세트로 나눕니다.\n","\n","    Args:\n","        data (pd.DataFrame): 전체 데이터프레임.\n","        test_size (float): validation 세트 비율.\n","        random_state (int): 랜덤 시드 값.\n","\n","    Returns:\n","        train_data (pd.DataFrame): Train 데이터프레임.\n","        validation_data (pd.DataFrame): Validation 데이터프레임.\n","    \"\"\"\n","    # 고유한 person_id 목록 추출\n","    unique_person_ids = data['person_id'].unique()\n","\n","    # person_id를 기준으로 train/validation 분리\n","    train_ids, validation_ids = train_test_split(unique_person_ids, test_size=test_size, random_state=random_state)\n","\n","    # train/validation 데이터프레임 생성\n","    train_data = data[data['person_id'].isin(train_ids)]\n","    validation_data = data[data['person_id'].isin(validation_ids)]\n","\n","    return train_data, validation_data\n","\n","# Train/Validation 분리\n","train_data_origin, validation_data_origin = split_by_person(train)\n","\n","# Step 3: 라벨별 비율 확인 함수\n","def check_label_distribution(data, label_column='label'):\n","    \"\"\"\n","    데이터에서 라벨별 비율을 계산합니다.\n","\n","    Args:\n","        data (pd.DataFrame): 입력 데이터프레임.\n","        label_column (str): 라벨 컬럼 이름.\n","\n","    Returns:\n","        pd.Series: 라벨별 비율.\n","    \"\"\"\n","    label_counts = data[label_column].value_counts(normalize=True) * 100  # 비율 계산 (%)\n","    return label_counts\n","\n","# Train/Validation의 라벨별 비율 확인\n","train_label_distribution = check_label_distribution(train_data_origin)\n","validation_label_distribution = check_label_distribution(validation_data_origin)\n","\n","# 결과 출력\n","print(\"Train Label Distribution (%):\")\n","print(train_label_distribution)\n","\n","print(\"\\nValidation Label Distribution (%):\")\n","print(validation_label_distribution)\n","\n","# Train/Validation 데이터 크기 확인\n","print(f\"\\nTrain Data: {len(train_data_origin)} rows\")\n","print(f\"Validation Data: {len(validation_data_origin)} rows\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pcof9x6W5AMa","executionInfo":{"status":"ok","timestamp":1742293669730,"user_tz":-540,"elapsed":63,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"outputId":"779f102c-892e-4f13-bac5-d8eea3e9631b"},"execution_count":609,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Label Distribution (%):\n","label\n","normal       62.678311\n","phonecall    24.133916\n","text          8.922853\n","yawn          4.264920\n","Name: proportion, dtype: float64\n","\n","Validation Label Distribution (%):\n","label\n","normal       60.106667\n","phonecall    24.000000\n","text         11.946667\n","yawn          3.946667\n","Name: proportion, dtype: float64\n","\n","Train Data: 82440 rows\n","Validation Data: 22500 rows\n"]}]},{"cell_type":"code","execution_count":610,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1742293669747,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"c6vScM0wA8rW"},"outputs":[],"source":["sort_key = [\"label\", \"video_name\", \"frame\", \"video_clip\"]\n","features = [\"gaze_pitch\", \"gaze_yaw\", \"EAR\", \"MAR\", \"phone_detected\"]\n","train = train_data_origin[sort_key + features]\n","validation = validation_data_origin[sort_key + features]\n","test = test[sort_key + features]"]},{"cell_type":"markdown","source":["### train normal 1, 2만 선택"],"metadata":{"id":"QIkSHP-sEDQg"}},{"cell_type":"code","source":["print(f\"before filtering normal: {len(train)}\")\n","train = train[\n","    ((train['label'] == 'normal') &\n","     ((train['video_name'].str.split('_').str[-1] == 'part1') |\n","      (train['video_name'].str.split('_').str[-1] == 'part2'))) |\n","    (train['label'] != 'normal')\n","]\n","display(train.head())\n","print(f\"after filtering normal: {len(train)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"0lQn6oCaEF6b","executionInfo":{"status":"ok","timestamp":1742293710677,"user_tz":-540,"elapsed":40911,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"outputId":"9ceb9986-f2c7-49e6-eff7-a531a97c8543"},"execution_count":611,"outputs":[{"output_type":"stream","name":"stdout","text":["before filtering normal: 82440\n"]},{"output_type":"display_data","data":{"text/plain":["    label                                         video_name            frame  \\\n","0  normal  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...  frame000000.jpg   \n","1  normal  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...  frame000001.jpg   \n","2  normal  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...  frame000002.jpg   \n","3  normal  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...  frame000003.jpg   \n","4  normal  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...  frame000004.jpg   \n","\n","                                          video_clip  gaze_pitch  gaze_yaw  \\\n","0  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...   -0.802380 -0.178544   \n","1  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...   -0.258022 -0.444779   \n","2  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...    0.173530 -0.746606   \n","3  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...   -0.022168 -0.725515   \n","4  gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...   -0.187156 -0.672688   \n","\n","        EAR       MAR  phone_detected  \n","0  0.188577  0.152621               0  \n","1  0.115461  0.098821               0  \n","2  0.101308  0.080448               0  \n","3  0.101270  0.099019               0  \n","4  0.110530  0.118148               0  "],"text/html":["\n","  <div id=\"df-88f9164c-1a88-4e8b-9894-ce1b6efa8a9b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>video_name</th>\n","      <th>frame</th>\n","      <th>video_clip</th>\n","      <th>gaze_pitch</th>\n","      <th>gaze_yaw</th>\n","      <th>EAR</th>\n","      <th>MAR</th>\n","      <th>phone_detected</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>normal</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>frame000000.jpg</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>-0.802380</td>\n","      <td>-0.178544</td>\n","      <td>0.188577</td>\n","      <td>0.152621</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>normal</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>frame000001.jpg</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>-0.258022</td>\n","      <td>-0.444779</td>\n","      <td>0.115461</td>\n","      <td>0.098821</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>normal</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>frame000002.jpg</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>0.173530</td>\n","      <td>-0.746606</td>\n","      <td>0.101308</td>\n","      <td>0.080448</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>normal</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>frame000003.jpg</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>-0.022168</td>\n","      <td>-0.725515</td>\n","      <td>0.101270</td>\n","      <td>0.099019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>normal</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>frame000004.jpg</td>\n","      <td>gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0...</td>\n","      <td>-0.187156</td>\n","      <td>-0.672688</td>\n","      <td>0.110530</td>\n","      <td>0.118148</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88f9164c-1a88-4e8b-9894-ce1b6efa8a9b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-88f9164c-1a88-4e8b-9894-ce1b6efa8a9b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-88f9164c-1a88-4e8b-9894-ce1b6efa8a9b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c02944f3-64ce-4936-9821-aa0525c4414b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c02944f3-64ce-4936-9821-aa0525c4414b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c02944f3-64ce-4936-9821-aa0525c4414b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"print(f\\\"after filtering normal: {len(train)}\\\")\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"normal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"video_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0.avi_part1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frame\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"frame000001.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"video_clip\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"gB-10(File10)_s1_face_2019-03-11-15_24_54_10_0.avi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gaze_pitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3659546970639619,\n        \"min\": -0.80237985,\n        \"max\": 0.17352998,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.2580225\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gaze_yaw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24160755118727548,\n        \"min\": -0.746606,\n        \"max\": -0.1785442,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.44477883\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EAR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03692754151986545,\n        \"min\": 0.1012695252493892,\n        \"max\": 0.1885773602873608,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1154605706938468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.027393703309168144,\n        \"min\": 0.080447814658015,\n        \"max\": 0.1526214608995895,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0988214896257063\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"phone_detected\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["after filtering normal: 55428\n"]}]},{"cell_type":"code","execution_count":612,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1742293710684,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"h02yniyTtLbV","outputId":"223c8312-f4f4-4155-82e3-e9ca179a70f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["학습 데이터:  (55380, 9)\n","검증 데이터:  (22464, 9)\n","테스트 데이터:  (23544, 9)\n"]}],"source":["train.dropna(inplace=True)\n","validation.dropna(inplace=True)\n","test.dropna(inplace=True)\n","print(\"학습 데이터: \", train.shape)\n","print(\"검증 데이터: \", validation.shape)\n","print(\"테스트 데이터: \", test.shape)"]},{"cell_type":"code","execution_count":613,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"executionInfo":{"elapsed":60,"status":"ok","timestamp":1742293710745,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"h2InCU1jZ031","outputId":"8882a68e-fd4b-467c-d8b6-c4813c29d497"},"outputs":[{"output_type":"stream","name":"stdout","text":["-----------Train-----------\n"]},{"output_type":"display_data","data":{"text/plain":["       label  frame_count  clip_count  ratio\n","0     normal        24612        1025   44.4\n","1  phonecall        19896         829   35.9\n","2       text         7356         306   13.3\n","3       yawn         3516         146    6.3"],"text/html":["\n","  <div id=\"df-5a4b6699-ecfe-41e8-8919-0d8071d9c26c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>frame_count</th>\n","      <th>clip_count</th>\n","      <th>ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>normal</td>\n","      <td>24612</td>\n","      <td>1025</td>\n","      <td>44.4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>phonecall</td>\n","      <td>19896</td>\n","      <td>829</td>\n","      <td>35.9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>text</td>\n","      <td>7356</td>\n","      <td>306</td>\n","      <td>13.3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>yawn</td>\n","      <td>3516</td>\n","      <td>146</td>\n","      <td>6.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a4b6699-ecfe-41e8-8919-0d8071d9c26c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5a4b6699-ecfe-41e8-8919-0d8071d9c26c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5a4b6699-ecfe-41e8-8919-0d8071d9c26c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-71e78983-978d-4ad3-99bd-65a05c38c74e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-71e78983-978d-4ad3-99bd-65a05c38c74e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-71e78983-978d-4ad3-99bd-65a05c38c74e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_6b8b201b-9613-4155-ac80-8c549e1ca8a8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_count')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_6b8b201b-9613-4155-ac80-8c549e1ca8a8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_count');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_count","summary":"{\n  \"name\": \"train_count\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"phonecall\",\n          \"yawn\",\n          \"normal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frame_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10022,\n        \"min\": 3516,\n        \"max\": 24612,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          19896,\n          3516,\n          24612\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clip_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 417,\n        \"min\": 146,\n        \"max\": 1025,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          829,\n          146,\n          1025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.090029482194513,\n        \"min\": 6.3,\n        \"max\": 44.4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          35.9,\n          6.3,\n          44.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["-----------Validation-----------\n"]},{"output_type":"display_data","data":{"text/plain":["       label  frame_count  clip_count  ratio\n","0     normal        13512         563   60.1\n","1  phonecall         5376         224   23.9\n","2       text         2688         112   12.0\n","3       yawn          888          37    4.0"],"text/html":["\n","  <div id=\"df-44fd1fbf-f678-4034-b630-23d09f85cf4f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>frame_count</th>\n","      <th>clip_count</th>\n","      <th>ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>normal</td>\n","      <td>13512</td>\n","      <td>563</td>\n","      <td>60.1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>phonecall</td>\n","      <td>5376</td>\n","      <td>224</td>\n","      <td>23.9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>text</td>\n","      <td>2688</td>\n","      <td>112</td>\n","      <td>12.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>yawn</td>\n","      <td>888</td>\n","      <td>37</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44fd1fbf-f678-4034-b630-23d09f85cf4f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-44fd1fbf-f678-4034-b630-23d09f85cf4f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-44fd1fbf-f678-4034-b630-23d09f85cf4f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b2b44749-7f3e-4571-b477-5c86cf995bb0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b2b44749-7f3e-4571-b477-5c86cf995bb0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b2b44749-7f3e-4571-b477-5c86cf995bb0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_52f1a94d-4e6e-437d-b47e-9cd7e3b3264a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('val_count')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_52f1a94d-4e6e-437d-b47e-9cd7e3b3264a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('val_count');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"val_count","summary":"{\n  \"name\": \"val_count\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"phonecall\",\n          \"yawn\",\n          \"normal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frame_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5577,\n        \"min\": 888,\n        \"max\": 13512,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5376,\n          888,\n          13512\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clip_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 232,\n        \"min\": 37,\n        \"max\": 563,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          224,\n          37,\n          563\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.787227893951084,\n        \"min\": 4.0,\n        \"max\": 60.1,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          23.9,\n          4.0,\n          60.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["-----------Test-----------\n"]},{"output_type":"display_data","data":{"text/plain":["       label  frame_count  clip_count  ratio\n","0     normal        14100         587   59.9\n","1  phonecall         5664         236   24.1\n","2       text         2568         107   10.9\n","3       yawn         1212          50    5.1"],"text/html":["\n","  <div id=\"df-76ad4a47-90d5-43c7-a93c-b7813a3826de\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>frame_count</th>\n","      <th>clip_count</th>\n","      <th>ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>normal</td>\n","      <td>14100</td>\n","      <td>587</td>\n","      <td>59.9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>phonecall</td>\n","      <td>5664</td>\n","      <td>236</td>\n","      <td>24.1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>text</td>\n","      <td>2568</td>\n","      <td>107</td>\n","      <td>10.9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>yawn</td>\n","      <td>1212</td>\n","      <td>50</td>\n","      <td>5.1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76ad4a47-90d5-43c7-a93c-b7813a3826de')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-76ad4a47-90d5-43c7-a93c-b7813a3826de button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-76ad4a47-90d5-43c7-a93c-b7813a3826de');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cc5034ff-56be-4da5-8bea-dd00e3542957\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc5034ff-56be-4da5-8bea-dd00e3542957')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cc5034ff-56be-4da5-8bea-dd00e3542957 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_62c7c9ae-1b4b-44f4-ae9a-92244d2be961\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_count')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_62c7c9ae-1b4b-44f4-ae9a-92244d2be961 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_count');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_count","summary":"{\n  \"name\": \"test_count\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"phonecall\",\n          \"yawn\",\n          \"normal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frame_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5784,\n        \"min\": 1212,\n        \"max\": 14100,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5664,\n          1212,\n          14100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clip_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 240,\n        \"min\": 50,\n        \"max\": 587,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          236,\n          50,\n          587\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.587530715113843,\n        \"min\": 5.1,\n        \"max\": 59.9,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          24.1,\n          5.1,\n          59.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["train_count = train.groupby('label')['label'].count().reset_index(name='frame_count')\n","train_count['clip_count'] = train_count['frame_count'] // config['timestep']\n","train_count['ratio'] = round(train_count['clip_count'] / train_count['clip_count'].sum() * 100, 1) # 비율 계산\n","print(\"-----------Train-----------\")\n","display(train_count)\n","print(\"-----------Validation-----------\")\n","val_count = validation.groupby('label')['label'].count().reset_index(name='frame_count')\n","val_count['clip_count'] = val_count['frame_count'] // config['timestep']\n","val_count['ratio'] = round(val_count['clip_count'] / val_count['clip_count'].sum() * 100, 1) # 비율 계산\n","display(val_count)\n","print(\"-----------Test-----------\")\n","test_count = test.groupby('label')['label'].count().reset_index(name='frame_count')\n","test_count['clip_count'] = test_count['frame_count'] // config['timestep']\n","test_count['ratio'] = round(test_count['clip_count'] / test_count['clip_count'].sum() * 100, 1) # 비율 계산\n","display(test_count)"]},{"cell_type":"code","execution_count":614,"metadata":{"executionInfo":{"elapsed":1847,"status":"ok","timestamp":1742293712593,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"dhYXekroqhUh"},"outputs":[],"source":["# Train, Test dataset\n","train_features, train_labels, train_meta, train_personids = load_train_features(train)\n","validation_features, validation_labels, validation_meta, validation_personids = load_test_features(validation)\n","test_features, test_labels, test_meta, test_personids = load_test_features(test)"]},{"cell_type":"code","execution_count":615,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1742293712616,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"XQAVlWWemwB2","outputId":"dcb1dc05-3647-4560-d6fd-dfc13e59460d"},"outputs":[{"output_type":"stream","name":"stdout","text":["레이블 분포:\n","-----------Train-----------\n","normal: 882개 (33.78%)\n","phonecall: 797개 (30.52%)\n","text: 568개 (21.75%)\n","yawn: 364개 (13.94%)\n","-----------Validation-----------\n","normal: 461개 (56.70%)\n","phonecall: 218개 (26.81%)\n","text: 106개 (13.04%)\n","yawn: 28개 (3.44%)\n","-----------Test-----------\n","normal: 493개 (57.59%)\n","phonecall: 229개 (26.75%)\n","text: 96개 (11.21%)\n","yawn: 38개 (4.44%)\n"]}],"source":["# 레이블 개수 및 비율 계산\n","label_counts = pd.Series(train_labels).value_counts()\n","label_ratios = pd.Series(train_labels).value_counts(normalize=True) * 100  # 비율 계산 (백분율)\n","\n","# 매핑된 결과 출력\n","print(\"레이블 분포:\")\n","print(\"-----------Train-----------\")\n","for label, count in label_counts.items():\n","    print(f\"{label_mapping_inverse[label]}: {count}개 ({label_ratios[label]:.2f}%)\")\n","\n","# 레이블 개수 및 비율 계산\n","label_counts = pd.Series(validation_labels).value_counts()\n","label_ratios = pd.Series(validation_labels).value_counts(normalize=True) * 100  # 비율 계산 (백분율)\n","\n","print(\"-----------Validation-----------\")\n","for label, count in label_counts.items():\n","    print(f\"{label_mapping_inverse[label]}: {count}개 ({label_ratios[label]:.2f}%)\")\n","\n","\n","# 레이블 개수 및 비율 계산\n","label_counts = pd.Series(test_labels).value_counts()\n","label_ratios = pd.Series(test_labels).value_counts(normalize=True) * 100  # 비율 계산 (백분율)\n","\n","print(\"-----------Test-----------\")\n","for label, count in label_counts.items():\n","    print(f\"{label_mapping_inverse[label]}: {count}개 ({label_ratios[label]:.2f}%)\")"]},{"cell_type":"markdown","metadata":{"id":"ZljfCD-_tY9q"},"source":["### 데이터 둘러보기 - 시각화\n","- 훈련 데이터 개수\n","- 테스트 데이터 개수\n","- 타겟값 분포"]},{"cell_type":"code","execution_count":616,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1742293712618,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"isU0vZ3TsKl5"},"outputs":[],"source":["# def visualize_data_distribution(train_labels, test_labels, label_mapping_inverse):\n","#     \"\"\"\n","#     훈련/테스트 데이터의 레이블 분포를 시각화하는 함수.\n","\n","#     Args:\n","#         train_labels (list or pd.Series): 훈련 데이터의 레이블.\n","#         test_labels (list or pd.Series): 테스트 데이터의 레이블.\n","#         label_mapping_inverse (dict): 정수형 레이블을 문자열로 매핑하는 딕셔너리.\n","#     \"\"\"\n","#     # 레이블 개수 및 비율 계산\n","#     train_label_counts = pd.Series(train_labels).value_counts()\n","#     train_label_ratios = pd.Series(train_labels).value_counts(normalize=True) * 100\n","\n","#     test_label_counts = pd.Series(test_labels).value_counts()\n","#     test_label_ratios = pd.Series(test_labels).value_counts(normalize=True) * 100\n","\n","#     # 클래스 이름 매핑\n","#     class_names = [label_mapping_inverse[label] for label in train_label_counts.index]\n","\n","#     # 시각화\n","#     fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n","\n","#     # (왼쪽) Bar Chart - 클래스별 샘플 개수 비교\n","#     x = np.arange(len(class_names))\n","#     width = 0.4\n","\n","#     axes[0].bar(x - width / 2, train_label_counts.values, width, label=\"Train\", alpha=0.7)\n","#     axes[0].bar(x + width / 2, test_label_counts.values, width, label=\"Test\", alpha=0.7)\n","#     axes[0].set_xticks(x)\n","#     axes[0].set_xticklabels(class_names, rotation=45)\n","#     axes[0].set_ylabel(\"샘플 개수\")\n","#     axes[0].set_title(\"클래스별 데이터 분포\")\n","#     axes[0].legend()\n","\n","#     # (오른쪽) Pie Chart - 전체 데이터 비율\n","#     total_counts = train_label_counts + test_label_counts\n","#     total_ratios = total_counts / total_counts.sum() * 100\n","\n","#     axes[1].pie(\n","#         total_counts,\n","#         labels=[f\"{class_names[i]} ({total_ratios[i]:.1f}%)\" for i in range(len(class_names))],\n","#         autopct=\"%1.1f%%\",\n","#         startangle=140,\n","#         colors=plt.cm.Paired.colors,\n","#     )\n","#     axes[1].set_title(\"클래스별 전체 데이터 비율\")\n","\n","#     plt.tight_layout()\n","#     plt.show()\n","\n","# visualize_data_distribution(train_labels, test_labels, label_mapping_inverse)"]},{"cell_type":"markdown","metadata":{"id":"iGaRQUVjFDPA"},"source":["### DataLoader"]},{"cell_type":"code","execution_count":617,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1742293712619,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"safri8zEE8Qs"},"outputs":[],"source":["# DataLoader 설정\n","params = {\n","    \"batch_size\": config[\"batch_size\"],\n","    \"shuffle\": True,\n","    \"num_workers\": 4,\n","    \"pin_memory\": True,\n","    \"persistent_workers\": True,\n","    \"prefetch_factor\": 2,\n","} if config[\"use_cuda\"] else {}"]},{"cell_type":"code","execution_count":618,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":899,"status":"ok","timestamp":1742293713518,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"kkBxlRECyZZs","outputId":"7a6e9fde-b069-489f-e6c0-57965942051e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Batch Shape: torch.Size([32, 24, 5]) torch.Size([32])\n","Batch Shape: torch.Size([32, 24, 5]) torch.Size([32])\n","Batch Shape: torch.Size([32, 24, 5]) torch.Size([32])\n"]}],"source":["# DataLoader 생성 (배치 단위로 데이터를 나누기 위해 사용)\n","train_dataset = TensorDataset(train_features, train_labels)\n","validation_dataset = TensorDataset(validation_features, validation_labels)\n","test_dataset = TensorDataset(test_features, test_labels)\n","\n","train_loader = DataLoader(train_dataset, **params)\n","validation_loader = DataLoader(validation_dataset, **params)\n","test_loader = DataLoader(test_dataset, **params)\n","\n","# 배치 단위 확인\n","for x_batch, y_batch in train_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인\n","\n","for x_batch, y_batch in validation_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인\n","\n","for x_batch, y_batch in test_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인"]},{"cell_type":"code","execution_count":619,"metadata":{"id":"4ysNu39ArKqk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742293713530,"user_tz":-540,"elapsed":10,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"outputId":"39c39e29-9324-4bc0-f657-db1d2dd941e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([882, 797, 568, 364])\n","tensor([461, 218, 106,  28])\n","tensor([493, 229,  96,  38])\n"]}],"source":["# # Train, Test 라벨별 개수 확인\n","labels = train_labels.to(torch.long)#  Long 타입으로 변환\n","counts = torch.bincount(labels)\n","print(counts)\n","\n","labels = validation_labels.to(torch.long)#  Long 타입으로 변환\n","counts = torch.bincount(labels)\n","print(counts)\n","\n","labels = test_labels.to(torch.long)\n","counts = torch.bincount(labels)\n","print(counts)"]},{"cell_type":"markdown","metadata":{"id":"fROYd8X1zYa7"},"source":["## 1-3. LSTM 학습"]},{"cell_type":"code","execution_count":620,"metadata":{"id":"AOK3mN2xHwtt","executionInfo":{"status":"ok","timestamp":1742293713542,"user_tz":-540,"elapsed":11,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[],"source":["# LSTM 모델 정의\n","class DecoderRNN(nn.Module):\n","    def __init__(self, config):\n","        super(DecoderRNN, self).__init__()\n","\n","        self.RNN_input_size = config['feature_num']  # 특징 개수\n","        self.h_RNN_layers = config[\"RNN_hidden_layers\"]\n","        self.h_RNN = config[\"RNN_hidden_nodes\"]\n","        self.h_FC_dim = config[\"RNN_FC_dim\"]\n","        self.drop_p = config[\"dropout_p\"]\n","        self.num_classes = config[\"k\"]\n","\n","        self.LSTM = nn.LSTM(\n","            input_size=self.RNN_input_size,\n","            hidden_size=self.h_RNN,\n","            num_layers=self.h_RNN_layers,\n","            batch_first=True,\n","        )\n","\n","        self.fc1 = nn.Linear(self.h_RNN, self.h_FC_dim)\n","        self.bn1 = nn.BatchNorm1d(self.h_FC_dim)  # Batch Normalization 추가\n","        self.fc2 = nn.Linear(self.h_FC_dim, self.num_classes)\n","        self.dropout = nn.Dropout(p=self.drop_p)\n","\n","    def forward(self, x_RNN):\n","        self.LSTM.flatten_parameters()\n","        RNN_out, _ = self.LSTM(x_RNN, None)\n","\n","        # FC layers\n","        x = self.fc1(RNN_out[:, -1, :])  # 마지막 타임스텝a 사용\n","        x = self.bn1(x)\n","        x = F.relu(x)\n","        x = self.dropout(x)\n","        x = self.fc2(x)\n","\n","        return x  # CrossEntropyLoss 사용 (Softmax 없음)"]},{"cell_type":"markdown","metadata":{"id":"RXocvVKtkOMG"},"source":["### optimizer"]},{"cell_type":"code","execution_count":621,"metadata":{"id":"4JqX0gXTL27g","executionInfo":{"status":"ok","timestamp":1742293713543,"user_tz":-540,"elapsed":2,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[],"source":["def get_optimizer(model, config):\n","    return optim.Adam(model.parameters(), lr=config[\"learning_rate\"])\n","criterion = nn.CrossEntropyLoss()"]},{"cell_type":"markdown","metadata":{"id":"WWOn6C4y5sMZ"},"source":["### 학습률 감소 스케줄러 설정\n","Test Loss 기준\n","- factor: 0.5, 학습률 50% 감소\n","- verbose: True, 감소된 경우 로그 출력"]},{"cell_type":"code","execution_count":622,"metadata":{"id":"zbIGMSLu5sMd","executionInfo":{"status":"ok","timestamp":1742293713549,"user_tz":-540,"elapsed":5,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[],"source":["def get_scheduler(optimizer, config):\n","    return optim.lr_scheduler.ReduceLROnPlateau(\n","        optimizer,\n","        mode=\"min\",\n","        factor=config[\"reduce_lr_factor\"],\n","        patience=config[\"reduce_lr_patience\"],\n","    )"]},{"cell_type":"markdown","metadata":{"id":"ne6SnCpE5sMd"},"source":["### Early Stopping 설정"]},{"cell_type":"code","execution_count":623,"metadata":{"id":"X1hqAAHW5sMd","executionInfo":{"status":"ok","timestamp":1742293713567,"user_tz":-540,"elapsed":9,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[],"source":["early_stopping_patience = config[\"early_stopping_patience\"]\n","best_loss = np.inf\n","patience_counter = 0"]},{"cell_type":"markdown","metadata":{"id":"0XTNDoMjMh0Q"},"source":["## 학습 진행"]},{"cell_type":"markdown","metadata":{"id":"uX8o8vwQMlXU"},"source":["- Mixed Precision Training 유지 (torch.cuda.amp.autocast() + GradScaler())\n","-  Gradient Clipping 추가 (torch.nn.utils.clip_grad_norm_()) → 폭발적인 기울기(Gradient Explosion) 방지\n","- 모델 저장 기능 추가 (torch.save()) → Best Loss 갱신 시 자동 저장\n","- 학습률 스케줄러 로깅 추가 → ReduceLROnPlateau가 작동했는지 확인 가능"]},{"cell_type":"code","execution_count":624,"metadata":{"id":"0R88mx_dea0I","executionInfo":{"status":"ok","timestamp":1742293713575,"user_tz":-540,"elapsed":7,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[],"source":["def save_best_model(model, optimizer, epoch, best_loss, save_path):\n","    \"\"\"Validation Loss가 가장 낮을 때만 모델을 저장하는 함수\"\"\"\n","    today_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")  # 날짜 가져오기\n","    model_filename = f\"{save_path}/best_model_{today_date}.pth\"  # 저장 파일명\n","\n","    # 기존 최적 모델 삭제 (이전 모델 유지 안 함)\n","    if os.path.exists(model_filename):\n","        os.remove(model_filename)\n","\n","    torch.save({\n","        'epoch': epoch,\n","        'model_state_dict': model.state_dict(),\n","        'optimizer_state_dict': optimizer.state_dict(),\n","        'best_loss': best_loss\n","    }, model_filename)\n","\n","    print(f\"💾 Best Model Updated! Saved at {model_filename} (Loss: {best_loss:.4f})\")\n","\n","def save_training_results(\n","        epoch_train_losses,\n","        epoch_train_scores,\n","        epoch_test_losses,\n","        epoch_test_scores,\n","        save_path=\"./\",\n","        ):\n","    \"\"\"\n","    학습 과정의 손실(loss)과 정확도(score)를 저장하는 함수\n","    \"\"\"\n","    os.makedirs(save_path, exist_ok=True)\n","\n","    np.save(\n","        os.path.join(save_path, \"LSTM_epoch_training_losses.npy\"),\n","        np.array(epoch_train_losses),\n","    )\n","    np.save(\n","        os.path.join(save_path, \"LSTM_epoch_tsave_path, raining_scores.npy\"),\n","        np.array(epoch_train_scores),\n","    )\n","    np.save(\n","        os.path.join(save_path, \"LSTM_epoch_test_loss.npy\"), np.array(epoch_test_losses)\n","    )\n","    np.save(\n","        os.path.join(save_path, \"LSTM_epoch_test_score.npy\"),\n","        np.array(epoch_test_scores),\n","    )"]},{"cell_type":"markdown","metadata":{"id":"B3TL3Dy7bxnt"},"source":["### epoch마다 validation data로 성능평가\n","- 다음 기술을 적용하는 기준: Validation data Loss\n","    - Early Stopping\n","    - 학습률 감소 스케줄러\n","    - 모델 저장 (Best Loss 갱신 시)"]},{"cell_type":"code","execution_count":625,"metadata":{"id":"JtljyZujXycx","executionInfo":{"status":"ok","timestamp":1742293713579,"user_tz":-540,"elapsed":3,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[],"source":["def ensure_directory_exists(path):\n","    \"\"\"주어진 경로의 폴더가 없으면 생성하는 함수\"\"\"\n","    if not os.path.exists(path):\n","        os.makedirs(path)\n","        print(f\"📂 Directory created: {path}\")"]},{"cell_type":"code","execution_count":626,"metadata":{"id":"YmTiOWzGXpVy","executionInfo":{"status":"ok","timestamp":1742293713585,"user_tz":-540,"elapsed":6,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[],"source":["# ✅ 경로 자동 생성 (존재하지 않으면 생성)\n","ensure_directory_exists(os.path.dirname(config[\"model_save_path\"]))  # 모델 저장 폴더\n","ensure_directory_exists(config[\"train_result_path\"])  # 학습 결과 폴더"]},{"cell_type":"markdown","source":["### train & validate"],"metadata":{"id":"ve-1oy5X7SVB"}},{"cell_type":"code","source":["# Mixed Precision Training을 위한 GradScaler 설정\n","scaler = torch.amp.GradScaler()\n","\n","# 학습 결과 저장 함수\n","def save_training_results(epoch, train_losses, train_scores, test_losses, test_scores, save_path):\n","    \"\"\"학습 결과를 CSV 파일로 저장하는 함수\"\"\"\n","    results_df = pd.DataFrame({\n","        \"epoch\": list(range(1, epoch + 2)),\n","        \"train_loss\": train_losses,\n","        \"train_accuracy\": train_scores,\n","        \"test_loss\": test_losses,\n","        \"test_accuracy\": test_scores,\n","    })\n","\n","    results_df.to_csv(f\"{save_path}/training_results.csv\", index=False)\n","    print(f\"💾 Training results saved at {save_path}/training_results.csv\")\n","\n","# 학습 함수\n","def train(log_interval, model, device, train_loader, optimizer, criterion, epoch):\n","    model.train()\n","    losses, scores = [], []\n","    total_samples = 0\n","\n","    # tqdm을 사용하여 학습 진행률 표시\n","    progress_bar = tqdm(train_loader, desc=f\"Epoch {epoch+1}/{config['epochs']}\", leave=True)\n","\n","    for batch_idx, (X, y) in enumerate(progress_bar):\n","        X, y = X.to(device), y.to(device).long()\n","        total_samples += X.size(0)\n","\n","        optimizer.zero_grad(set_to_none=True)\n","\n","        with torch.amp.autocast(device_type='cuda'):\n","            output = model(X)\n","            loss = criterion(output, y)\n","\n","        scaler.scale(loss).backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)  #  Gradient Clipping\n","        scaler.step(optimizer)\n","        scaler.update()\n","\n","        losses.append(loss.item())\n","\n","        # 정확도 계산\n","        y_pred = torch.argmax(output, dim=1)\n","        acc = accuracy_score(y.cpu().numpy(), y_pred.cpu().numpy())\n","        scores.append(acc)\n","\n","    avg_loss = sum(losses) / len(losses)\n","    avg_acc = sum(scores) / len(scores) * 100\n","\n","    print(f\"✅ Train Epoch {epoch+1} Finished - Avg Loss: {avg_loss:.4f}, Avg Acc: {avg_acc:.2f}%\")\n","\n","    return avg_loss, avg_acc  # 학습 Loss 및 Accuracy 반환\n","\n","# 검증 함수\n","def validate(model, device, criterion, test_loader):\n","    model.eval()\n","    losses, scores = [], []\n","\n","    with torch.no_grad():\n","        for X, y in test_loader:\n","            X, y = X.to(device), y.to(device).long()\n","\n","            with torch.amp.autocast(device_type='cuda'):\n","                output = model(X)\n","                loss = criterion(output, y)\n","\n","            losses.append(loss.item())\n","\n","            # 정확도 계산\n","            y_pred = torch.argmax(output, dim=1)\n","            acc = accuracy_score(y.cpu().numpy(), y_pred.cpu().numpy())\n","            scores.append(acc)\n","\n","    avg_loss = sum(losses) / len(losses)\n","    avg_acc = sum(scores) / len(scores) * 100\n","\n","    print(f\"✅ Validation Finished - Avg Loss: {avg_loss:.4f}, Avg Acc: {avg_acc:.2f}%\")\n","\n","    return avg_loss, avg_acc  # 검증 Loss 및 Accuracy 반환"],"metadata":{"id":"cb6g45rd7Td3","executionInfo":{"status":"ok","timestamp":1742293713606,"user_tz":-540,"elapsed":19,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"execution_count":627,"outputs":[]},{"cell_type":"code","source":["# 전체 학습 실행 코드\n","def train_and_validate(model, train_loader, valid_loader, optimizer, criterion, scheduler, config):\n","    best_loss = np.inf  # Best Loss 초기화\n","    patience_counter = 0  # Early Stopping 카운터\n","\n","    epoch_train_losses, epoch_train_scores = [], []\n","    epoch_valid_losses, epoch_valid_scores = [], []\n","\n","    for epoch in range(config[\"epochs\"]):\n","        # 학습 단계\n","        epoch_train_loss, epoch_train_score = train(\n","            config[\"log_interval\"], model, config[\"device\"], train_loader, optimizer, criterion, epoch\n","        )\n","\n","        # 검증 단계\n","        epoch_valid_loss, epoch_valid_score = validate(\n","            model, config[\"device\"], criterion, valid_loader,\n","        )\n","\n","        # 결과 저장\n","        epoch_train_losses.append(epoch_train_loss)\n","        epoch_train_scores.append(epoch_train_score)\n","        epoch_valid_losses.append(epoch_valid_loss)\n","        epoch_valid_scores.append(epoch_valid_score)\n","\n","        # 학습률 감소 적용\n","        scheduler.step(epoch_valid_loss)\n","\n","        # Early Stopping 체크\n","        if epoch_valid_loss < best_loss:\n","            best_loss = epoch_valid_loss\n","            patience_counter = 0  # 개선되었으므로 patience 초기화\n","\n","            save_best_model(model, optimizer, epoch, best_loss, config[\"model_save_path\"])\n","            print(f\"💾 Model Saved! New Best Loss: {best_loss:.4f}\")\n","        else:\n","            patience_counter += 1\n","            print(f\"⏳ Early stopping 대기 카운트: {patience_counter}/{config['early_stopping_patience']}\")\n","\n","        # 설정된 patience 횟수만큼 개선되지 않으면 학습 중단\n","        if patience_counter >= config[\"early_stopping_patience\"]:\n","            print(\"⏹️ Early stopping 적용됨. 학습 종료.\")\n","            break  # 학습 중단\n","\n","        # 학습 결과 저장\n","        save_training_results(\n","            epoch,\n","            epoch_train_losses,\n","            epoch_train_scores,\n","            epoch_valid_losses,\n","            epoch_valid_scores,\n","            save_path=config[\"train_result_path\"],\n","        )\n","\n","    return epoch_train_losses, epoch_train_scores, epoch_valid_losses, epoch_valid_scores"],"metadata":{"id":"IWnfoFlV9LHG","executionInfo":{"status":"ok","timestamp":1742293713617,"user_tz":-540,"elapsed":11,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"execution_count":628,"outputs":[]},{"cell_type":"code","source":["model = DecoderRNN(config)\n","model.to(config[\"device\"])  # 모델을 GPU로 이동\n","\n","optimizer = get_optimizer(model, config)\n","scheduler = get_scheduler(optimizer, config)\n","\n","epoch_train_losses, epoch_train_scores, epoch_valid_losses, epoch_valid_scores = train_and_validate(model, train_loader, validation_loader, optimizer, criterion, scheduler, config)\n","# RuntimeError: DataLoader worker -> dataloader 재실행"],"metadata":{"id":"dgg3e6fPLpl4","executionInfo":{"status":"ok","timestamp":1742293805589,"user_tz":-540,"elapsed":91970,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"dfc36a2c-ba67-42f2-8f1e-839dde2d3e7b"},"execution_count":629,"outputs":[{"output_type":"stream","name":"stderr","text":["Epoch 1/100: 100%|██████████| 82/82 [00:01<00:00, 50.77it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 1 Finished - Avg Loss: 0.8417, Avg Acc: 67.13%\n","✅ Validation Finished - Avg Loss: 0.8601, Avg Acc: 70.80%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.8601)\n","💾 Model Saved! New Best Loss: 0.8601\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 2/100: 100%|██████████| 82/82 [00:01<00:00, 51.97it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 2 Finished - Avg Loss: 0.7190, Avg Acc: 72.56%\n","✅ Validation Finished - Avg Loss: 0.6510, Avg Acc: 78.55%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.6510)\n","💾 Model Saved! New Best Loss: 0.6510\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 3/100: 100%|██████████| 82/82 [00:01<00:00, 79.06it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 3 Finished - Avg Loss: 0.7075, Avg Acc: 71.97%\n","✅ Validation Finished - Avg Loss: 0.8400, Avg Acc: 69.67%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 4/100: 100%|██████████| 82/82 [00:01<00:00, 79.02it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 4 Finished - Avg Loss: 0.6681, Avg Acc: 74.55%\n","✅ Validation Finished - Avg Loss: 0.6478, Avg Acc: 77.83%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.6478)\n","💾 Model Saved! New Best Loss: 0.6478\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 5/100: 100%|██████████| 82/82 [00:01<00:00, 77.72it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 5 Finished - Avg Loss: 0.6646, Avg Acc: 74.71%\n","✅ Validation Finished - Avg Loss: 0.6860, Avg Acc: 74.53%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 6/100: 100%|██████████| 82/82 [00:01<00:00, 78.71it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 6 Finished - Avg Loss: 0.6548, Avg Acc: 73.92%\n","✅ Validation Finished - Avg Loss: 0.6507, Avg Acc: 75.39%\n","⏳ Early stopping 대기 카운트: 2/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 7/100: 100%|██████████| 82/82 [00:01<00:00, 78.06it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 7 Finished - Avg Loss: 0.6612, Avg Acc: 74.67%\n","✅ Validation Finished - Avg Loss: 0.5802, Avg Acc: 78.68%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.5802)\n","💾 Model Saved! New Best Loss: 0.5802\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 8/100: 100%|██████████| 82/82 [00:01<00:00, 76.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 8 Finished - Avg Loss: 0.6589, Avg Acc: 75.25%\n","✅ Validation Finished - Avg Loss: 0.6486, Avg Acc: 77.07%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 9/100: 100%|██████████| 82/82 [00:01<00:00, 76.28it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 9 Finished - Avg Loss: 0.6417, Avg Acc: 75.28%\n","✅ Validation Finished - Avg Loss: 0.5217, Avg Acc: 82.17%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.5217)\n","💾 Model Saved! New Best Loss: 0.5217\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 10/100: 100%|██████████| 82/82 [00:01<00:00, 56.98it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 10 Finished - Avg Loss: 0.6540, Avg Acc: 74.54%\n","✅ Validation Finished - Avg Loss: 0.6199, Avg Acc: 78.98%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 11/100: 100%|██████████| 82/82 [00:01<00:00, 53.80it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 11 Finished - Avg Loss: 0.6579, Avg Acc: 75.08%\n","✅ Validation Finished - Avg Loss: 0.5778, Avg Acc: 80.23%\n","⏳ Early stopping 대기 카운트: 2/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 12/100: 100%|██████████| 82/82 [00:01<00:00, 67.95it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 12 Finished - Avg Loss: 0.6496, Avg Acc: 75.21%\n","✅ Validation Finished - Avg Loss: 0.6028, Avg Acc: 78.80%\n","⏳ Early stopping 대기 카운트: 3/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 13/100: 100%|██████████| 82/82 [00:01<00:00, 78.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 13 Finished - Avg Loss: 0.6394, Avg Acc: 75.14%\n","✅ Validation Finished - Avg Loss: 0.6294, Avg Acc: 79.16%\n","⏳ Early stopping 대기 카운트: 4/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 14/100: 100%|██████████| 82/82 [00:01<00:00, 79.44it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 14 Finished - Avg Loss: 0.6513, Avg Acc: 74.72%\n","✅ Validation Finished - Avg Loss: 0.7223, Avg Acc: 71.84%\n","⏳ Early stopping 대기 카운트: 5/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 15/100: 100%|██████████| 82/82 [00:01<00:00, 78.31it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 15 Finished - Avg Loss: 0.6355, Avg Acc: 76.20%\n","✅ Validation Finished - Avg Loss: 0.8906, Avg Acc: 65.03%\n","⏳ Early stopping 대기 카운트: 6/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 16/100: 100%|██████████| 82/82 [00:01<00:00, 63.40it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 16 Finished - Avg Loss: 0.6142, Avg Acc: 76.05%\n","✅ Validation Finished - Avg Loss: 0.6338, Avg Acc: 80.60%\n","⏳ Early stopping 대기 카운트: 7/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 17/100: 100%|██████████| 82/82 [00:01<00:00, 75.49it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 17 Finished - Avg Loss: 0.6295, Avg Acc: 76.22%\n","✅ Validation Finished - Avg Loss: 0.5467, Avg Acc: 84.01%\n","⏳ Early stopping 대기 카운트: 8/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 18/100: 100%|██████████| 82/82 [00:01<00:00, 79.08it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 18 Finished - Avg Loss: 0.6036, Avg Acc: 77.40%\n","✅ Validation Finished - Avg Loss: 0.6050, Avg Acc: 78.80%\n","⏳ Early stopping 대기 카운트: 9/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 19/100: 100%|██████████| 82/82 [00:01<00:00, 79.76it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 19 Finished - Avg Loss: 0.5938, Avg Acc: 77.66%\n","✅ Validation Finished - Avg Loss: 0.5584, Avg Acc: 82.04%\n","⏳ Early stopping 대기 카운트: 10/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 20/100: 100%|██████████| 82/82 [00:01<00:00, 65.45it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 20 Finished - Avg Loss: 0.5971, Avg Acc: 77.86%\n","✅ Validation Finished - Avg Loss: 0.5688, Avg Acc: 80.31%\n","⏳ Early stopping 대기 카운트: 11/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 21/100: 100%|██████████| 82/82 [00:01<00:00, 55.37it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 21 Finished - Avg Loss: 0.5838, Avg Acc: 78.40%\n","✅ Validation Finished - Avg Loss: 0.5593, Avg Acc: 81.44%\n","⏳ Early stopping 대기 카운트: 12/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 22/100: 100%|██████████| 82/82 [00:01<00:00, 60.84it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 22 Finished - Avg Loss: 0.5874, Avg Acc: 77.21%\n","✅ Validation Finished - Avg Loss: 0.6109, Avg Acc: 78.19%\n","⏳ Early stopping 대기 카운트: 13/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 23/100: 100%|██████████| 82/82 [00:01<00:00, 79.50it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 23 Finished - Avg Loss: 0.5992, Avg Acc: 77.36%\n","✅ Validation Finished - Avg Loss: 0.6175, Avg Acc: 78.21%\n","⏳ Early stopping 대기 카운트: 14/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 24/100: 100%|██████████| 82/82 [00:01<00:00, 80.15it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 24 Finished - Avg Loss: 0.5811, Avg Acc: 77.69%\n","✅ Validation Finished - Avg Loss: 0.6903, Avg Acc: 74.34%\n","⏳ Early stopping 대기 카운트: 15/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 25/100: 100%|██████████| 82/82 [00:01<00:00, 76.11it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 25 Finished - Avg Loss: 0.5666, Avg Acc: 78.44%\n","✅ Validation Finished - Avg Loss: 0.6165, Avg Acc: 77.31%\n","⏳ Early stopping 대기 카운트: 16/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 26/100: 100%|██████████| 82/82 [00:01<00:00, 79.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 26 Finished - Avg Loss: 0.5473, Avg Acc: 79.15%\n","✅ Validation Finished - Avg Loss: 0.5688, Avg Acc: 80.71%\n","⏳ Early stopping 대기 카운트: 17/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 27/100: 100%|██████████| 82/82 [00:01<00:00, 79.80it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 27 Finished - Avg Loss: 0.5484, Avg Acc: 79.46%\n","✅ Validation Finished - Avg Loss: 0.5417, Avg Acc: 81.87%\n","⏳ Early stopping 대기 카운트: 18/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 28/100: 100%|██████████| 82/82 [00:01<00:00, 78.61it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 28 Finished - Avg Loss: 0.5551, Avg Acc: 79.10%\n","✅ Validation Finished - Avg Loss: 0.5141, Avg Acc: 82.52%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.5141)\n","💾 Model Saved! New Best Loss: 0.5141\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 29/100: 100%|██████████| 82/82 [00:01<00:00, 79.05it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 29 Finished - Avg Loss: 0.5455, Avg Acc: 79.14%\n","✅ Validation Finished - Avg Loss: 0.5502, Avg Acc: 80.95%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 30/100: 100%|██████████| 82/82 [00:01<00:00, 75.77it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 30 Finished - Avg Loss: 0.5493, Avg Acc: 79.39%\n","✅ Validation Finished - Avg Loss: 0.5558, Avg Acc: 81.62%\n","⏳ Early stopping 대기 카운트: 2/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 31/100: 100%|██████████| 82/82 [00:01<00:00, 55.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 31 Finished - Avg Loss: 0.5365, Avg Acc: 80.38%\n","✅ Validation Finished - Avg Loss: 0.5510, Avg Acc: 80.43%\n","⏳ Early stopping 대기 카운트: 3/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 32/100: 100%|██████████| 82/82 [00:01<00:00, 53.84it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 32 Finished - Avg Loss: 0.5374, Avg Acc: 79.76%\n","✅ Validation Finished - Avg Loss: 0.5291, Avg Acc: 82.22%\n","⏳ Early stopping 대기 카운트: 4/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 33/100: 100%|██████████| 82/82 [00:01<00:00, 77.86it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 33 Finished - Avg Loss: 0.5448, Avg Acc: 79.61%\n","✅ Validation Finished - Avg Loss: 0.5560, Avg Acc: 80.30%\n","⏳ Early stopping 대기 카운트: 5/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 34/100: 100%|██████████| 82/82 [00:01<00:00, 77.93it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 34 Finished - Avg Loss: 0.5402, Avg Acc: 79.65%\n","✅ Validation Finished - Avg Loss: 0.5419, Avg Acc: 82.05%\n","⏳ Early stopping 대기 카운트: 6/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 35/100: 100%|██████████| 82/82 [00:02<00:00, 37.34it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 35 Finished - Avg Loss: 0.5353, Avg Acc: 80.12%\n","✅ Validation Finished - Avg Loss: 0.5081, Avg Acc: 82.28%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.5081)\n","💾 Model Saved! New Best Loss: 0.5081\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 36/100: 100%|██████████| 82/82 [00:01<00:00, 60.19it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 36 Finished - Avg Loss: 0.5343, Avg Acc: 79.66%\n","✅ Validation Finished - Avg Loss: 0.5545, Avg Acc: 80.96%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 37/100: 100%|██████████| 82/82 [00:01<00:00, 79.03it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 37 Finished - Avg Loss: 0.5271, Avg Acc: 79.90%\n","✅ Validation Finished - Avg Loss: 0.5289, Avg Acc: 81.39%\n","⏳ Early stopping 대기 카운트: 2/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 38/100: 100%|██████████| 82/82 [00:01<00:00, 79.54it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 38 Finished - Avg Loss: 0.5373, Avg Acc: 79.72%\n","✅ Validation Finished - Avg Loss: 0.5692, Avg Acc: 79.65%\n","⏳ Early stopping 대기 카운트: 3/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 39/100: 100%|██████████| 82/82 [00:01<00:00, 74.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 39 Finished - Avg Loss: 0.5378, Avg Acc: 79.74%\n","✅ Validation Finished - Avg Loss: 0.5224, Avg Acc: 82.46%\n","⏳ Early stopping 대기 카운트: 4/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 40/100: 100%|██████████| 82/82 [00:01<00:00, 54.93it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 40 Finished - Avg Loss: 0.5272, Avg Acc: 79.75%\n","✅ Validation Finished - Avg Loss: 0.5521, Avg Acc: 81.21%\n","⏳ Early stopping 대기 카운트: 5/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 41/100: 100%|██████████| 82/82 [00:01<00:00, 43.96it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 41 Finished - Avg Loss: 0.5291, Avg Acc: 79.66%\n","✅ Validation Finished - Avg Loss: 0.5038, Avg Acc: 82.65%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.5038)\n","💾 Model Saved! New Best Loss: 0.5038\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 42/100: 100%|██████████| 82/82 [00:01<00:00, 79.19it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 42 Finished - Avg Loss: 0.5293, Avg Acc: 79.55%\n","✅ Validation Finished - Avg Loss: 0.6095, Avg Acc: 77.89%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 43/100: 100%|██████████| 82/82 [00:01<00:00, 78.58it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 43 Finished - Avg Loss: 0.5303, Avg Acc: 79.94%\n","✅ Validation Finished - Avg Loss: 0.5215, Avg Acc: 81.92%\n","⏳ Early stopping 대기 카운트: 2/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 44/100: 100%|██████████| 82/82 [00:01<00:00, 79.04it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 44 Finished - Avg Loss: 0.5272, Avg Acc: 79.52%\n","✅ Validation Finished - Avg Loss: 0.5657, Avg Acc: 80.23%\n","⏳ Early stopping 대기 카운트: 3/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 45/100: 100%|██████████| 82/82 [00:01<00:00, 79.12it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 45 Finished - Avg Loss: 0.5340, Avg Acc: 79.55%\n","✅ Validation Finished - Avg Loss: 0.5754, Avg Acc: 80.19%\n","⏳ Early stopping 대기 카운트: 4/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 46/100: 100%|██████████| 82/82 [00:01<00:00, 69.82it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 46 Finished - Avg Loss: 0.5126, Avg Acc: 80.50%\n","✅ Validation Finished - Avg Loss: 0.4892, Avg Acc: 84.14%\n","💾 Best Model Updated! Saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth (Loss: 0.4892)\n","💾 Model Saved! New Best Loss: 0.4892\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 47/100: 100%|██████████| 82/82 [00:01<00:00, 78.94it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 47 Finished - Avg Loss: 0.5325, Avg Acc: 79.94%\n","✅ Validation Finished - Avg Loss: 0.5325, Avg Acc: 82.09%\n","⏳ Early stopping 대기 카운트: 1/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 48/100: 100%|██████████| 82/82 [00:01<00:00, 73.11it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 48 Finished - Avg Loss: 0.5206, Avg Acc: 79.76%\n","✅ Validation Finished - Avg Loss: 0.5474, Avg Acc: 81.04%\n","⏳ Early stopping 대기 카운트: 2/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 49/100: 100%|██████████| 82/82 [00:01<00:00, 72.09it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 49 Finished - Avg Loss: 0.5240, Avg Acc: 80.71%\n","✅ Validation Finished - Avg Loss: 0.5070, Avg Acc: 81.43%\n","⏳ Early stopping 대기 카운트: 3/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 50/100: 100%|██████████| 82/82 [00:01<00:00, 54.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 50 Finished - Avg Loss: 0.5160, Avg Acc: 81.41%\n","✅ Validation Finished - Avg Loss: 0.5266, Avg Acc: 81.39%\n","⏳ Early stopping 대기 카운트: 4/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 51/100: 100%|██████████| 82/82 [00:01<00:00, 46.04it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 51 Finished - Avg Loss: 0.5214, Avg Acc: 79.56%\n","✅ Validation Finished - Avg Loss: 0.5230, Avg Acc: 82.94%\n","⏳ Early stopping 대기 카운트: 5/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 52/100: 100%|██████████| 82/82 [00:01<00:00, 79.90it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 52 Finished - Avg Loss: 0.5246, Avg Acc: 79.81%\n","✅ Validation Finished - Avg Loss: 0.5288, Avg Acc: 81.56%\n","⏳ Early stopping 대기 카운트: 6/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 53/100: 100%|██████████| 82/82 [00:01<00:00, 79.12it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 53 Finished - Avg Loss: 0.5130, Avg Acc: 80.32%\n","✅ Validation Finished - Avg Loss: 0.5247, Avg Acc: 82.22%\n","⏳ Early stopping 대기 카운트: 7/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 54/100: 100%|██████████| 82/82 [00:01<00:00, 78.52it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 54 Finished - Avg Loss: 0.5227, Avg Acc: 80.06%\n","✅ Validation Finished - Avg Loss: 0.5357, Avg Acc: 82.05%\n","⏳ Early stopping 대기 카운트: 8/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 55/100: 100%|██████████| 82/82 [00:01<00:00, 79.48it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 55 Finished - Avg Loss: 0.5161, Avg Acc: 81.08%\n","✅ Validation Finished - Avg Loss: 0.5190, Avg Acc: 82.84%\n","⏳ Early stopping 대기 카운트: 9/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 56/100: 100%|██████████| 82/82 [00:01<00:00, 78.92it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 56 Finished - Avg Loss: 0.5176, Avg Acc: 80.05%\n","✅ Validation Finished - Avg Loss: 0.5523, Avg Acc: 80.72%\n","⏳ Early stopping 대기 카운트: 10/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 57/100: 100%|██████████| 82/82 [00:01<00:00, 79.39it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 57 Finished - Avg Loss: 0.5064, Avg Acc: 80.59%\n","✅ Validation Finished - Avg Loss: 0.5457, Avg Acc: 81.68%\n","⏳ Early stopping 대기 카운트: 11/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 58/100: 100%|██████████| 82/82 [00:01<00:00, 79.64it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 58 Finished - Avg Loss: 0.5068, Avg Acc: 80.00%\n","✅ Validation Finished - Avg Loss: 0.5127, Avg Acc: 82.59%\n","⏳ Early stopping 대기 카운트: 12/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 59/100: 100%|██████████| 82/82 [00:01<00:00, 78.03it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 59 Finished - Avg Loss: 0.4980, Avg Acc: 81.16%\n","✅ Validation Finished - Avg Loss: 0.5183, Avg Acc: 82.29%\n","⏳ Early stopping 대기 카운트: 13/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 60/100: 100%|██████████| 82/82 [00:01<00:00, 57.02it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 60 Finished - Avg Loss: 0.5063, Avg Acc: 81.08%\n","✅ Validation Finished - Avg Loss: 0.5158, Avg Acc: 82.64%\n","⏳ Early stopping 대기 카운트: 14/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 61/100: 100%|██████████| 82/82 [00:01<00:00, 53.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 61 Finished - Avg Loss: 0.5018, Avg Acc: 81.01%\n","✅ Validation Finished - Avg Loss: 0.5582, Avg Acc: 80.95%\n","⏳ Early stopping 대기 카운트: 15/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 62/100: 100%|██████████| 82/82 [00:01<00:00, 67.52it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 62 Finished - Avg Loss: 0.5122, Avg Acc: 80.44%\n","✅ Validation Finished - Avg Loss: 0.5542, Avg Acc: 81.26%\n","⏳ Early stopping 대기 카운트: 16/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 63/100: 100%|██████████| 82/82 [00:01<00:00, 79.14it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 63 Finished - Avg Loss: 0.5027, Avg Acc: 80.75%\n","✅ Validation Finished - Avg Loss: 0.5660, Avg Acc: 80.06%\n","⏳ Early stopping 대기 카운트: 17/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 64/100: 100%|██████████| 82/82 [00:01<00:00, 79.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 64 Finished - Avg Loss: 0.5056, Avg Acc: 81.08%\n","✅ Validation Finished - Avg Loss: 0.5323, Avg Acc: 81.56%\n","⏳ Early stopping 대기 카운트: 18/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 65/100: 100%|██████████| 82/82 [00:01<00:00, 78.64it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 65 Finished - Avg Loss: 0.4996, Avg Acc: 80.37%\n","✅ Validation Finished - Avg Loss: 0.5170, Avg Acc: 82.58%\n","⏳ Early stopping 대기 카운트: 19/20\n","💾 Training results saved at /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 66/100: 100%|██████████| 82/82 [00:01<00:00, 78.89it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 66 Finished - Avg Loss: 0.4989, Avg Acc: 80.75%\n","✅ Validation Finished - Avg Loss: 0.5598, Avg Acc: 80.43%\n","⏳ Early stopping 대기 카운트: 20/20\n","⏹️ Early stopping 적용됨. 학습 종료.\n"]}]},{"cell_type":"markdown","metadata":{"id":"HGuUoHMge_Ln"},"source":["## 결과 시각화"]},{"cell_type":"markdown","metadata":{"id":"BGwWEbn41ywD"},"source":["### 마지막 학습률 확인"]},{"cell_type":"code","execution_count":630,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1742293805638,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"U6DXplnheHnS","outputId":"e8937625-d458-4096-bf61-39f2d9f2d8d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["🚀 현재 Learning Rate: [1.875e-05]\n"]}],"source":["def get_current_lr(optimizer):\n","    return [param_group[\"lr\"] for param_group in optimizer.param_groups]\n","\n","current_lr = get_current_lr(optimizer)\n","print(f\"🚀 현재 Learning Rate: {current_lr}\")"]},{"cell_type":"code","execution_count":631,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1742293805638,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"iEaX4EQ9f6w4","outputId":"ed53ea96-29d7-45e1-b1ba-446a1c3e8ab9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1.875e-05]"]},"metadata":{},"execution_count":631}],"source":["scheduler.get_last_lr()"]},{"cell_type":"markdown","source":["### loss, accuracy 시각화"],"metadata":{"id":"RolazQpE-q0S"}},{"cell_type":"code","source":["def plot_train_test_results(\n","    epoch_train_losses,\n","    epoch_train_scores,\n","    epoch_test_losses,\n","    epoch_test_scores,\n","    save_path=\"./\"\n","    ):\n","    \"\"\"\n","    학습 및 검증 과정의 Loss 및 Accuracy를 시각화하는 함수 (Train + Test).\n","    \"\"\"\n","    os.makedirs(save_path, exist_ok=True)\n","\n","    A = np.array(epoch_train_losses)\n","    B = np.array(epoch_train_scores)\n","    C = np.array(epoch_test_losses)\n","    D = np.array(epoch_test_scores)\n","\n","    fig = plt.figure(figsize=(10, 4))\n","\n","    # Loss 그래프\n","    plt.subplot(121)\n","    plt.plot(np.arange(1, len(A) + 1), A, marker=\"o\", markersize=2, linestyle=\"-\", label=\"Train Loss\")\n","    plt.plot(np.arange(1, len(C) + 1), C, marker=\"s\", markersize=2, linestyle=\"--\", label=\"Validation Loss\")\n","    plt.title(\"Model Loss\")\n","    plt.xlabel(\"Epochs\")\n","    plt.ylabel(\"Loss\")\n","    plt.legend(loc=\"upper left\")\n","    # plt.ylim((0, max(2, max(A), max(C))))\n","\n","    # Accuracy 그래프\n","    plt.subplot(122)\n","    plt.plot(np.arange(1, len(B) + 1), B, marker=\"o\", markersize=2, linestyle=\"-\", label=\"Train Accuracy\")\n","    plt.plot(np.arange(1, len(D) + 1), D, marker=\"s\", markersize=2, linestyle=\"-\", label=\"Validation Accuracy\")\n","    plt.title(\"Training vs Validation Accuracy\")\n","    plt.xlabel(\"Epochs\")\n","    plt.ylabel(\"Accuracy (%)\")\n","    plt.legend(loc=\"upper left\")\n","    # plt.ylim((0, 100))\n","\n","    # 그래프 저장\n","    plot_save_path = os.path.join(save_path, \"training_results.png\")\n","    plt.savefig(plot_save_path, dpi=600)\n","    plt.show()\n","\n","    print(f\"\\n✅ 학습 및 검증 그래프 저장 완료 ({plot_save_path})\\n\")\n","\n","plot_train_test_results(\n","    epoch_train_losses,\n","    epoch_train_scores,\n","    epoch_valid_losses,\n","    epoch_valid_scores,\n","    save_path=config[\"train_result_path\"],\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":459},"id":"2CeWO3uU-tfD","executionInfo":{"status":"ok","timestamp":1742293806971,"user_tz":-540,"elapsed":1332,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"outputId":"58ea28ba-f7a8-4ced-f743-49c562dede51"},"execution_count":632,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","✅ 학습 및 검증 그래프 저장 완료 (/content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/training_results.png)\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"RvogPajT106l"},"source":["### confusion matrix 시각화"]},{"cell_type":"code","execution_count":633,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1742293806975,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"},"user_tz":-540},"id":"PgKzQHFH84m0"},"outputs":[],"source":["# 모델 로드 함수\n","def load_model(model, model_save_path, device):\n","    \"\"\"저장된 모델을 불러오는 함수\"\"\"\n","    checkpoint = torch.load(model_save_path, map_location=device)\n","    model.load_state_dict(checkpoint[\"model_state_dict\"])\n","    model.to(device)\n","    model.eval()\n","    print(f\"✅ Model Loaded from {model_save_path}\")\n","    return model\n","\n","# Confusion Matrix 시각화 함수\n","def plot_confusion_matrix(y_true, y_pred, class_names, save_dir, file_name):\n","    \"\"\"\n","    Confusion Matrix를 그리는 함수\n","    \"\"\"\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(6, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel(\"Predicted Label\")\n","    plt.ylabel(\"True Label\")\n","    plt.title(\"Confusion Matrix\")\n","\n","    # 저장 기능 추가\n","    if save_dir and file_name:\n","        os.makedirs(save_dir, exist_ok=True)  # 디렉토리가 없으면 생성\n","        save_path = os.path.join(save_dir, f\"{file_name}_cm.png\")\n","        plt.savefig(save_path, bbox_inches='tight')  # 이미지 저장\n","        print(f\"✅ Confusion Matrix saved at: {save_path}\")\n","\n","    plt.show()\n","\n","    print(\"\\n🔹 Classification Report:\")\n","    print(classification_report(y_true, y_pred, target_names=class_names))\n","\n","# 학습 데이터에서 Confusion Matrix 계산\n","def evaluate_model(model, data_loader, class_names, save_dir=None, file_name=None):\n","    \"\"\"\n","    모델을 평가하고 Confusion Matrix를 출력하는 함수\n","    \"\"\"\n","    model.eval()\n","    all_preds = []\n","    all_labels = []\n","\n","    with torch.no_grad():\n","        for x_batch, y_batch in data_loader:\n","            x_batch, y_batch = x_batch.to(\"cuda\"), y_batch.to(\"cuda\")\n","\n","            y_pred = model(x_batch)  # (batch_size, num_classes)\n","            y_pred_classes = torch.argmax(y_pred, dim=1)  # 가장 높은 확률을 가진 클래스를 예측값으로 선택\n","\n","            all_preds.extend(y_pred_classes.cpu().numpy())\n","            all_labels.extend(y_batch.cpu().numpy())\n","\n","    # Confusion Matrix 출력\n","    plot_confusion_matrix(all_labels, all_preds, class_names, save_dir, file_name)"]},{"cell_type":"code","execution_count":634,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":821},"id":"5A0UX6Guuf14","outputId":"31e20fd8-9de4-4ecc-cb57-8d7af037e522","executionInfo":{"status":"ok","timestamp":1742293807825,"user_tz":-540,"elapsed":850,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Model Loaded from /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth\n","✅ Confusion Matrix saved at: /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/train_cm.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","🔹 Classification Report:\n","              precision    recall  f1-score   support\n","\n","      normal       0.71      0.82      0.76       882\n","   phonecall       0.87      0.82      0.85       797\n","        text       0.78      0.72      0.75       568\n","        yawn       0.95      0.83      0.89       364\n","\n","    accuracy                           0.80      2611\n","   macro avg       0.83      0.80      0.81      2611\n","weighted avg       0.81      0.80      0.80      2611\n","\n"]}],"source":["model = load_model(model,\"/content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/best_model_2025-03-18.pth\", config[\"device\"])\n","class_names = config['action_names']\n","evaluate_model(model, train_loader, class_names, save_dir=config[\"train_result_path\"], file_name=\"train\")"]},{"cell_type":"code","source":["evaluate_model(model, validation_loader, class_names, config[\"train_result_path\"], \"test\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":804},"id":"9HvP8lJo-W60","executionInfo":{"status":"ok","timestamp":1742293808368,"user_tz":-540,"elapsed":542,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"outputId":"c6a90e12-8bd3-4146-cb07-a484c11b4317"},"execution_count":635,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Confusion Matrix saved at: /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/test_cm.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","🔹 Classification Report:\n","              precision    recall  f1-score   support\n","\n","      normal       0.92      0.84      0.87       461\n","   phonecall       0.85      0.88      0.86       218\n","        text       0.70      0.82      0.75       106\n","        yawn       0.50      0.75      0.60        28\n","\n","    accuracy                           0.84       813\n","   macro avg       0.74      0.82      0.77       813\n","weighted avg       0.85      0.84      0.85       813\n","\n"]}]},{"cell_type":"code","execution_count":636,"metadata":{"id":"PHssvdxb9X9f","colab":{"base_uri":"https://localhost:8080/","height":804},"executionInfo":{"status":"ok","timestamp":1742293808846,"user_tz":-540,"elapsed":477,"user":{"displayName":"Sol Lee","userId":"04508513172834796855"}},"outputId":"0f46b33c-635b-4371-bf28-0b62eaf681f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Confusion Matrix saved at: /content/drive/MyDrive/DMS/data/model_results/031817_4s_sliding_yaw_batch/train_results/test_cm.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","🔹 Classification Report:\n","              precision    recall  f1-score   support\n","\n","      normal       0.96      0.81      0.88       493\n","   phonecall       0.90      0.97      0.93       229\n","        text       0.55      0.78      0.64        96\n","        yawn       0.71      0.95      0.81        38\n","\n","    accuracy                           0.86       856\n","   macro avg       0.78      0.88      0.82       856\n","weighted avg       0.88      0.86      0.86       856\n","\n"]}],"source":["evaluate_model(model, test_loader, class_names, config[\"train_result_path\"], \"test\")"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}