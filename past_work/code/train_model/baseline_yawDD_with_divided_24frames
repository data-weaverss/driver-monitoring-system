{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"ZdDyC79-c6OZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741270077990,"user_tz":-540,"elapsed":2289,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"a85ef398-5788-47f5-ff0e-c4173a85288e"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["## functions.py"],"metadata":{"id":"e243KGF9ifTR"}},{"cell_type":"code","execution_count":23,"metadata":{"id":"cIxwAkjPiX-C","executionInfo":{"status":"ok","timestamp":1741270078164,"user_tz":-540,"elapsed":175,"user":{"displayName":"somin shim","userId":"00972152430439357273"}}},"outputs":[],"source":["import os\n","import numpy as np\n","from PIL import Image\n","from torch.utils import data\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","from tqdm import tqdm\n","\n","\n","## ------------------- label conversion tools ------------------ ##\n","def labels2cat(label_encoder, list):\n","    return label_encoder.transform(list)\n","\n","\n","def labels2onehot(OneHotEncoder, label_encoder, list):\n","    return OneHotEncoder.transform(\n","        label_encoder.transform(list).reshape(-1, 1)\n","    ).toarray()\n","\n","\n","def onehot2labels(label_encoder, y_onehot):\n","    return label_encoder.inverse_transform(np.where(y_onehot == 1)[1]).tolist()\n","\n","\n","def cat2labels(label_encoder, y_cat):\n","    return label_encoder.inverse_transform(y_cat).tolist()\n","\n","\n","## ---------------------- Dataloaders ---------------------- ##\n","# for CRNN\n","class Dataset_CRNN(data.Dataset):\n","    # Pytorch의 Dataset을 상속받아 구현됨\n","\n","    def __init__(self, data_path, folders, labels, transform=None):\n","        \"Initialization\"\n","        self.data_path = data_path\n","        self.labels = labels\n","        self.folders = folders\n","        self.transform = transform\n","\n","    # 데이터 개수 반환\n","    # DataLoader가 batch를 만들 때, 전체 데이터 개수를 알 수 있도록 제공해야 함\n","    def __len__(self):\n","        \"Denotes the total number of samples\"\n","        return len(self.folders)\n","\n","    # 특정 비디오 폴더에서 원하는 프레임들을 불러옴\n","    def read_images(self, path, selected_folder, use_transform):\n","        X = []\n","\n","        frame_files = sorted([f for f in os.listdir(os.path.join(path, selected_folder)) if f.endswith('.jpg')])\n","\n","        for frame_filename in frame_files:\n","          frame_path = os.path.join(path, selected_folder, frame_filename)\n","\n","          image = Image.open(frame_path)\n","\n","          if use_transform is not None:\n","              image = use_transform(image)\n","\n","          X.append(image)\n","\n","        # 모델에 입력 가능하도록 1개의 텐서로 변환\n","        X = torch.stack(X, dim=0)\n","\n","        return X\n","\n","    def __getitem__(self, index):\n","        \"Generates one sample of data\"\n","        # Select sample\n","        folder = self.folders[index]\n","\n","        # Load data\n","        X = self.read_images(self.data_path, folder, self.transform)  # (input) spatial images\n","        y = torch.LongTensor([self.labels[index]])  # (labels) LongTensor are for int64 instead of FloatTensor\n","\n","        # print(X.shape)\n","        return X, y\n","\n","\n","## ---------------------- end of Dataloaders ---------------------- ##\n","\n","\n","## -------------------- (reload) model prediction ---------------------- ##\n","\n","def CRNN_final_prediction(model, device, loader):\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.eval()\n","    rnn_decoder.eval()\n","\n","    all_y_pred = []\n","    with torch.no_grad():\n","        for batch_idx, (X, y) in enumerate(tqdm(loader)):\n","            # distribute data to device\n","            X = X.to(device)\n","            output = rnn_decoder(cnn_encoder(X))\n","            y_pred = output.max(1, keepdim=True)[\n","                1\n","            ]  # location of max log-probability as prediction\n","            all_y_pred.extend(y_pred.cpu().data.squeeze().numpy().tolist())\n","\n","    return all_y_pred\n","\n","## -------------------- end of model prediction ---------------------- ##\n","\n","\n","## ------------------------ CRNN module ---------------------- ##\n","\n","def conv2D_output_size(img_size, padding, kernel_size, stride):\n","    # compute output shape of conv2D\n","    outshape = (\n","        np.floor(\n","            (img_size[0] + 2 * padding[0] - (kernel_size[0] - 1) - 1) / stride[0] + 1\n","        ).astype(int),\n","        np.floor(\n","            (img_size[1] + 2 * padding[1] - (kernel_size[1] - 1) - 1) / stride[1] + 1\n","        ).astype(int),\n","    )\n","    return outshape\n","\n","\n","# 2D CNN encoder train from scratch (no transfer learning)\n","class EncoderCNN(nn.Module):\n","    def __init__(\n","        self,\n","        img_x=90,\n","        img_y=120,\n","        fc_hidden1=512,\n","        fc_hidden2=512,\n","        drop_p=0.3,\n","        CNN_embed_dim=300,\n","    ):\n","        super(EncoderCNN, self).__init__()\n","\n","        self.img_x = img_x\n","        self.img_y = img_y\n","        self.CNN_embed_dim = CNN_embed_dim\n","\n","        # CNN architechtures\n","        self.ch1, self.ch2, self.ch3, self.ch4 = 32, 64, 128, 256\n","        self.k1, self.k2, self.k3, self.k4 = (\n","            (5, 5),\n","            (3, 3),\n","            (3, 3),\n","            (3, 3),\n","        )  # 2d kernal size\n","        self.s1, self.s2, self.s3, self.s4 = (\n","            (2, 2),\n","            (2, 2),\n","            (2, 2),\n","            (2, 2),\n","        )  # 2d strides\n","        self.pd1, self.pd2, self.pd3, self.pd4 = (\n","            (0, 0),\n","            (0, 0),\n","            (0, 0),\n","            (0, 0),\n","        )  # 2d padding\n","\n","        # conv2D output shapes\n","        self.conv1_outshape = conv2D_output_size(\n","            (self.img_x, self.img_y), self.pd1, self.k1, self.s1\n","        )  # Conv1 output shape\n","        self.conv2_outshape = conv2D_output_size(\n","            self.conv1_outshape, self.pd2, self.k2, self.s2\n","        )\n","        self.conv3_outshape = conv2D_output_size(\n","            self.conv2_outshape, self.pd3, self.k3, self.s3\n","        )\n","        self.conv4_outshape = conv2D_output_size(\n","            self.conv3_outshape, self.pd4, self.k4, self.s4\n","        )\n","\n","        # fully connected layer hidden nodes\n","        self.fc_hidden1, self.fc_hidden2 = fc_hidden1, fc_hidden2\n","        self.drop_p = drop_p\n","\n","        self.conv1 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=3,\n","                out_channels=self.ch1,\n","                kernel_size=self.k1,\n","                stride=self.s1,\n","                padding=self.pd1,\n","            ),\n","            nn.BatchNorm2d(self.ch1, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","        self.conv2 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch1,\n","                out_channels=self.ch2,\n","                kernel_size=self.k2,\n","                stride=self.s2,\n","                padding=self.pd2,\n","            ),\n","            nn.BatchNorm2d(self.ch2, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.conv3 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch2,\n","                out_channels=self.ch3,\n","                kernel_size=self.k3,\n","                stride=self.s3,\n","                padding=self.pd3,\n","            ),\n","            nn.BatchNorm2d(self.ch3, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.conv4 = nn.Sequential(\n","            nn.Conv2d(\n","                in_channels=self.ch3,\n","                out_channels=self.ch4,\n","                kernel_size=self.k4,\n","                stride=self.s4,\n","                padding=self.pd4,\n","            ),\n","            nn.BatchNorm2d(self.ch4, momentum=0.01),\n","            nn.ReLU(inplace=True),\n","            # nn.MaxPool2d(kernel_size=2),\n","        )\n","\n","        self.drop = nn.Dropout2d(self.drop_p)\n","        self.pool = nn.MaxPool2d(2)\n","        self.fc1 = nn.Linear(\n","            self.ch4 * self.conv4_outshape[0] * self.conv4_outshape[1], self.fc_hidden1\n","        )  # fully connected layer, output k classes\n","        self.fc2 = nn.Linear(self.fc_hidden1, self.fc_hidden2)\n","        self.fc3 = nn.Linear(\n","            self.fc_hidden2, self.CNN_embed_dim\n","        )  # output = CNN embedding latent variables\n","\n","    def forward(self, x_3d):\n","        cnn_embed_seq = []\n","        for t in range(x_3d.size(1)):\n","            # CNNs\n","            x = self.conv1(x_3d[:, t, :, :, :])\n","            x = self.conv2(x)\n","            x = self.conv3(x)\n","            x = self.conv4(x)\n","            x = x.view(x.size(0), -1)  # flatten the output of conv\n","\n","            # FC layers\n","            x = F.relu(self.fc1(x))\n","            # x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = F.relu(self.fc2(x))\n","            x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = self.fc3(x)\n","            cnn_embed_seq.append(x)\n","\n","        # swap time and sample dim such that (sample dim, time dim, CNN latent dim)\n","        cnn_embed_seq = torch.stack(cnn_embed_seq, dim=0).transpose_(0, 1)\n","        # cnn_embed_seq: shape=(batch, time_step, input_size)\n","\n","        return cnn_embed_seq\n","\n","\n","# 2D CNN encoder using ResNet-152 pretrained\n","class ResCNNEncoder(nn.Module):\n","    def __init__(self, fc_hidden1=512, fc_hidden2=512, drop_p=0.3, CNN_embed_dim=300):\n","        \"\"\"Load the pretrained ResNet-152 and replace top fc layer.\"\"\"\n","        super(ResCNNEncoder, self).__init__()\n","\n","        self.fc_hidden1, self.fc_hidden2 = fc_hidden1, fc_hidden2\n","        self.drop_p = drop_p\n","\n","        resnet = models.resnet152(pretrained=True) # 사전 학습된 ResNet-152 사용\n","        modules = list(resnet.children())[:-1] # 마지막 FC layer 제거\n","\n","        self.resnet = nn.Sequential(*modules)\n","        self.fc1 = nn.Linear(resnet.fc.in_features, fc_hidden1)\n","        self.bn1 = nn.BatchNorm1d(fc_hidden1, momentum=0.01)\n","        self.fc2 = nn.Linear(fc_hidden1, fc_hidden2)\n","        self.bn2 = nn.BatchNorm1d(fc_hidden2, momentum=0.01)\n","        self.fc3 = nn.Linear(fc_hidden2, CNN_embed_dim)\n","\n","    def forward(self, x_3d):\n","        cnn_embed_seq = []\n","        for t in range(x_3d.size(1)): # 프레임 단위로 CNN 처리\n","            # ResNet CNN\n","            with torch.no_grad():\n","                x = self.resnet(x_3d[:, t, :, :, :])  # ResNet\n","                x = x.view(x.size(0), -1)  # flatten output of conv\n","\n","            # FC layers\n","            x = self.bn1(self.fc1(x))\n","            x = F.relu(x)\n","            x = self.bn2(self.fc2(x))\n","            x = F.relu(x)\n","            x = F.dropout(x, p=self.drop_p, training=self.training)\n","            x = self.fc3(x)\n","\n","            cnn_embed_seq.append(x)\n","\n","        # swap time and sample dim such that (sample dim, time dim, CNN latent dim)\n","        cnn_embed_seq = torch.stack(cnn_embed_seq, dim=0).transpose_(0, 1)\n","        # cnn_embed_seq: shape=(batch, time_step, input_size)\n","\n","        return cnn_embed_seq\n","\n","\n","class DecoderRNN(nn.Module):\n","    def __init__(\n","        self,\n","        CNN_embed_dim=300,\n","        h_RNN_layers=3,\n","        h_RNN=256,\n","        h_FC_dim=128,\n","        drop_p=0.3,\n","        num_classes=50,\n","    ):\n","        super(DecoderRNN, self).__init__()\n","\n","        self.RNN_input_size = CNN_embed_dim  # CNN에서 온 512차원 벡터 입력\n","        self.h_RNN_layers = h_RNN_layers  # RNN hidden layers(512)\n","        self.h_RNN = h_RNN\n","        self.h_FC_dim = h_FC_dim\n","        self.drop_p = drop_p\n","        self.num_classes = num_classes\n","\n","        self.LSTM = nn.LSTM(\n","            input_size=self.RNN_input_size,\n","            hidden_size=self.h_RNN,\n","            num_layers=h_RNN_layers,\n","            batch_first=True,  # input & output will has batch size as 1s dimension. e.g. (batch, time_step, input_size)\n","        )\n","\n","        self.fc1 = nn.Linear(self.h_RNN, self.h_FC_dim)\n","        self.fc2 = nn.Linear(self.h_FC_dim, self.num_classes)\n","\n","    def forward(self, x_RNN):\n","\n","        self.LSTM.flatten_parameters()\n","        RNN_out, (h_n, h_c) = self.LSTM(x_RNN, None)\n","        \"\"\" h_n shape (n_layers, batch, hidden_size), h_c shape (n_layers, batch, hidden_size) \"\"\"\n","        \"\"\" None represents zero initial hidden state. RNN_out has shape=(batch, time_step, output_size) \"\"\"\n","\n","        # FC layers\n","        x = self.fc1(RNN_out[:, -1, :])  # choose RNN_out at the last time step\n","        x = F.relu(x)\n","        x = F.dropout(x, p=self.drop_p, training=self.training)\n","        x = self.fc2(x)\n","\n","        return x\n","\n","\n","## ---------------------- end of CRNN module ---------------------- ##\n"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.utils.data as data\n","from PIL import Image\n","\n","class Dataset_CRNN_2x(data.Dataset):\n","    def __init__(self, data_path, folders, labels, transform=None):\n","        \"Initialization\"\n","        self.data_path = data_path\n","        self.labels = labels\n","        self.folders = folders\n","        self.transform = transform\n","\n","        # 2개씩 묶기 → 마지막 홀수 폴더가 남으면 제거\n","        if len(self.folders) % 2 != 0:\n","            self.folders = self.folders[:-1]\n","\n","    def __len__(self):\n","        \"Denotes the total number of samples\"\n","        return len(self.folders) // 2  # 2개씩 묶어서 반환\n","\n","    def read_images(self, path, selected_folder, use_transform):\n","        X = []\n","\n","        frame_files = sorted([f for f in os.listdir(os.path.join(path, selected_folder)) if f.endswith('.jpg')])\n","\n","        for frame_filename in frame_files:\n","            frame_path = os.path.join(path, selected_folder, frame_filename)\n","            image = Image.open(frame_path)\n","\n","            if use_transform is not None:\n","                image = use_transform(image)\n","\n","            X.append(image)\n","\n","        # 모델에 입력 가능하도록 1개의 텐서로 변환\n","        X = torch.stack(X, dim=0)  # (12, C, H, W)\n","\n","        return X\n","\n","    def __getitem__(self, index):\n","        \"Generates one sample of data\"\n","        # 2개 폴더 선택\n","        folder1 = self.folders[index * 2]\n","        folder2 = self.folders[index * 2 + 1]\n","\n","        # Load data from both folders\n","        X1 = self.read_images(self.data_path, folder1, self.transform)  # (12, C, H, W)\n","        X2 = self.read_images(self.data_path, folder2, self.transform)  # (12, C, H, W)\n","\n","        # 두 개의 시퀀스를 연결하여 24프레임으로 확장\n","        X = torch.cat((X1, X2), dim=0)  # (24, C, H, W)\n","\n","        # 라벨 설정 (두 폴더의 같은 라벨 사용)\n","        y = torch.LongTensor([self.labels[index * 2]])  # (labels) 같은 폴더의 라벨 사용\n","\n","        return X, y\n"],"metadata":{"id":"4kgFhrSuwKVI","executionInfo":{"status":"ok","timestamp":1741270078166,"user_tz":-540,"elapsed":1,"user":{"displayName":"somin shim","userId":"00972152430439357273"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["## ResNetCRNN"],"metadata":{"id":"gfbvxru3i1BB"}},{"cell_type":"code","source":["def train(log_interval, model, device, train_loader, optimizer, epoch):\n","    # set model as training mode\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.train()\n","    rnn_decoder.train()\n","\n","    losses = []\n","    scores = []\n","    N_count = 0  # 총 학습 샘플 수\n","    for batch_idx, (X, y) in enumerate(tqdm(train_loader)):  # 배치 단위로 데이터 로드\n","        # distribute data to device\n","        X, y = X.to(device), y.to(device).view(\n","            -1,\n","        )\n","\n","        N_count += X.size(0)\n","\n","        optimizer.zero_grad()\n","        output = rnn_decoder(  # CNN + RNN 통과\n","                            cnn_encoder(X)\n","                        )  # output has dim = (batch, number of classes)\n","\n","        loss = F.cross_entropy(output, y)  # 손실 함수 계산\n","        losses.append(loss.item())\n","\n","        # to compute accuracy\n","        # torch.max() -> 샘플에서 가장 큰 점수를 가진 클래스 값과 해당 클래스 인덱스를 반환\n","        # 반환된 튜플에서 두번째 값(인덱스)를 선택하여, 각 샘플의 예측된 클래스 인덱스를 y_pred에 저장\n","        y_pred = torch.max(output, 1)[1]\n","        # 해당 배치에서의 정확도\n","        step_score = accuracy_score(\n","            # GPU에 있던 데이터를 GPU로 옮김\n","            y.cpu().data.squeeze().numpy(),\n","            y_pred.cpu().data.squeeze().numpy(),\n","        )\n","        scores.append(step_score)  # computed on CPU\n","\n","        loss.backward()  # 역전파 수행 = 각 파라미터에 대한 기울기를 계산\n","        optimizer.step()  # 계산된 기울기를 기반으로 모델의 파라미터를 업데이트\n","\n","        # show information\n","        if (batch_idx + 1) % log_interval == 0:\n","            print(\n","                \"Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}, Accu: {:.2f}%\".format(\n","                    epoch + 1,\n","                    N_count,\n","                    len(train_loader.dataset),\n","                    100.0 * (batch_idx + 1) / len(train_loader),\n","                    loss.item(),\n","                    100 * step_score,\n","                )\n","            )\n","\n","    return losses, scores\n","\n","\n","def validation(model, device, optimizer, test_loader):\n","    # set model as testing mode\n","    cnn_encoder, rnn_decoder = model\n","    cnn_encoder.eval()\n","    rnn_decoder.eval()\n","\n","    test_loss = 0\n","    all_y = []\n","    all_y_pred = []\n","    with torch.no_grad():\n","        for X, y in test_loader:\n","            # distribute data to device\n","            X, y = X.to(device), y.to(device).view(\n","                -1,\n","            )\n","\n","            output = rnn_decoder(cnn_encoder(X))\n","\n","            loss = F.cross_entropy(output, y, reduction=\"sum\")\n","            test_loss += loss.item()  # sum up batch loss\n","            y_pred = output.max(1, keepdim=True)[\n","                1\n","            ]  # (y_pred != output) get the index of the max log-probability\n","\n","            # collect all y and y_pred in all batches\n","            all_y.extend(y)\n","            all_y_pred.extend(y_pred)\n","\n","    test_loss /= len(test_loader.dataset)\n","\n","    # compute accuracy\n","    all_y = torch.stack(all_y, dim=0)\n","    all_y_pred = torch.stack(all_y_pred, dim=0)\n","    test_score = accuracy_score(\n","        all_y.cpu().data.squeeze().numpy(), all_y_pred.cpu().data.squeeze().numpy()\n","    )\n","\n","    # show information\n","    print(\n","        \"\\nTest set ({:d} samples): Average loss: {:.4f}, Accuracy: {:.2f}%\\n\".format(\n","            len(all_y), test_loss, 100 * test_score\n","        )\n","    )\n","\n","    os.makedirs(save_model_path, exist_ok=True)\n","\n","    # save Pytorch models of best record\n","    torch.save(\n","        cnn_encoder.state_dict(),\n","        os.path.join(save_model_path, \"cnn_encoder_epoch{}.pth\".format(epoch + 1)),\n","    )  # save spatial_encoder\n","    torch.save(\n","        rnn_decoder.state_dict(),\n","        os.path.join(save_model_path, \"rnn_decoder_epoch{}.pth\".format(epoch + 1)),\n","    )  # save motion_encoder\n","    torch.save(\n","        optimizer.state_dict(),\n","        os.path.join(save_model_path, \"optimizer_epoch{}.pth\".format(epoch + 1)),\n","    )  # save optimizer\n","    print(\"Epoch {} model saved!\".format(epoch + 1))\n","\n","    return test_loss, test_score"],"metadata":{"id":"-0uQPYQqCJnE","executionInfo":{"status":"ok","timestamp":1741270078175,"user_tz":-540,"elapsed":9,"user":{"displayName":"somin shim","userId":"00972152430439357273"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["## main.py"],"metadata":{"id":"x93ioF4vu8FJ"}},{"cell_type":"markdown","source":["### load data"],"metadata":{"id":"_sJjJWoMvKSk"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","import torch.utils.data as data\n","import torchvision\n","from torch.autograd import Variable\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","\n","# 데이터 경로\n","data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset\"\n","train_data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset/train_dataset\"\n","test_data_path = \"/content/drive/MyDrive/DMS/data/train_test_split_dataset/test_dataset\"\n","save_model_path = \"/content/drive/MyDrive/DMS/ResNetCRNN_yawDD_with_divided_24frames_ckpt\"  # 학습된 모델 저장 경로\n","\n","# CNN(ResNet) 설정\n","CNN_fc_hidden1, CNN_fc_hidden2 = 1024, 768  # 첫번째, 두번째 fc layer 뉴런 개수\n","CNN_embed_dim = 512  # 2D CNN이 추출하는 특징 벡터 크기\n","res_size = 224  # ResNet 이미지 크기\n","dropout_p = 0.2  # 드롭아웃 비율\n","\n","# RNN 설정\n","# RNN 출력(512 차원) -> 256차원으로 변환\n","RNN_hidden_layers = 3  # 3-layer LSTM\n","# 각 time step 마다 RNN이 기억하는 상태 크기, RNN의 출력 크기도 기본적으로 512\n","RNN_hidden_nodes = 512\n","RNN_FC_dim = 256\n","\n","# 학습 파라미터\n","k = 2  # Normal, Yawning, PhoneCall, Text\n","epochs = 30 # 총 학습 횟수\n","batch_size = 32\n","learning_rate = 1e-3\n","log_interval = 5  # 몇 번의 배치마다 로그를 출력할지\n","\n","\n","use_cuda = torch.cuda.is_available()  # GPU 사용 여부 확인\n","device = torch.device(\"cuda\" if use_cuda else \"cpu\")  # use CPU or GPU\n","\n","# 데이터 로더 파라미터\n","params = (\n","    {\n","        \"batch_size\": batch_size,  # 한 번에 처리할 데이터 개수\n","        \"shuffle\": True,  # 데이터 섞기\n","        \"num_workers\": 4,  # 데이터를 로드하는 프로세스 개수 (병렬 처리))\n","        \"pin_memory\": True,  # CUDA 사용 시 메모리 핀 설정으로 속도 향상\n","        \"drop_last\": True # 마지막 배치 크기가 1이면 해당 배치를 버림\n","    }\n","    if use_cuda\n","    else {}\n",")\n","\n","# action_names = ['normal', 'phonecall', 'text', 'yawn']\n","action_names = ['normal', 'yawn']\n","\n","# convert labels -> category\n","le = LabelEncoder()\n","le.fit(action_names)\n","\n","# show how many classes there are\n","list(le.classes_)\n","\n","# convert category -> 1-hot\n","action_category = le.transform(action_names).reshape(-1, 1)\n","enc = OneHotEncoder()\n","enc.fit(action_category)\n","\n","train_fnames = ['normal_yawDD', 'yawn_yawDD']\n","test_fnames = ['normal_yawDD', 'yawn_yawDD']\n","\n","# train_fnames = os.listdir(train_data_path)\n","# test_fnames = os.listdir(test_data_path)\n","\n","train_actions = []\n","train_files = []\n","test_actions = []\n","test_files = []\n","\n","for label_dir in train_fnames: # normal_DMD, normal_yawDD, phonecall_DMD, text_DMD, yawn_yawDD\n","    label_dirs_path = os.path.join(train_data_path, label_dir)\n","    label = label_dir.split('_')[0]\n","\n","    for clipped_dirs in os.listdir(label_dirs_path):\n","        file_path = os.path.join(\"train_dataset\", label_dir, clipped_dirs)\n","        train_actions.append(label)  # 파일의 액션(Label) 저장\n","        train_files.append(file_path)  # 전체 파일 경로 저장\n","\n","for label_dir in test_fnames: # normal_DMD, normal_yawDD, phonecall_DMD, text_DMD, yawn_yawDD\n","    label_dirs_path = os.path.join(test_data_path, label_dir)\n","    label = label_dir.split('_')[0]\n","\n","    for clipped_dirs in os.listdir(label_dirs_path):\n","        file_path = os.path.join(\"test_dataset\", label_dir, clipped_dirs)\n","        test_actions.append(label)  # 파일의 액션(Label) 저장\n","        test_files.append(file_path)  # 전체 파일 경로 저장\n","\n","train_list = train_files\n","test_list = test_files\n","train_label = labels2cat(le, train_actions)\n","test_label = labels2cat(le, test_actions)"],"metadata":{"id":"xAl2D7eli28a","executionInfo":{"status":"ok","timestamp":1741270078205,"user_tz":-540,"elapsed":29,"user":{"displayName":"somin shim","userId":"00972152430439357273"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["print(len(train_list))\n","print(len(train_label))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DZXEgzToDcGR","executionInfo":{"status":"ok","timestamp":1741270078278,"user_tz":-540,"elapsed":72,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"29ea767a-38d1-4782-dbd6-92ff1e256aa5"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["577\n","577\n"]}]},{"cell_type":"code","source":["print(len(train_list))\n","print(len(train_label))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1iuWQvyxXv7","executionInfo":{"status":"ok","timestamp":1741270078281,"user_tz":-540,"elapsed":5,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"ff558eb1-2f29-49b2-8694-36b52db5bd90"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["577\n","577\n"]}]},{"cell_type":"code","source":["577%32"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6swum5vtag-F","executionInfo":{"status":"ok","timestamp":1741270078282,"user_tz":-540,"elapsed":5,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"2ff555a3-cffc-428c-9623-51d5b63fc184"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["np.unique(train_label)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5aOrQVLAKoAS","executionInfo":{"status":"ok","timestamp":1741270078282,"user_tz":-540,"elapsed":4,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"8f600192-d70d-40e6-fa97-c102089be5cd"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1])"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["import os\n","os.environ['CUDA_LAUNCH_BLOCKING'] = '1' # CUDA 오류를 즉시 감지하여 디버깅 가능\n","torch.backends.cudnn.enabled = False"],"metadata":{"id":"dgqKHSIuLsJ4","executionInfo":{"status":"ok","timestamp":1741270078282,"user_tz":-540,"elapsed":2,"user":{"displayName":"somin shim","userId":"00972152430439357273"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["# 데이터 변환\n","transform = transforms.Compose(\n","    [\n","        transforms.Resize([res_size, res_size]),  # 입력 이미지 크기 조정\n","        transforms.ToTensor(),  # 이미지를 텐서로 변환\n","        # ImageNet의 평균 및 표준편차를 사용하여 정규화\n","        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","    ]\n",")\n","\n","# 데이터셋 생성\n","train_set =  Dataset_CRNN_2x(data_path, train_list, train_label, transform=transform)\n","valid_set = Dataset_CRNN_2x(data_path, test_list, test_label, transform=transform)\n","\n","train_loader = data.DataLoader(train_set, **params)\n","valid_loader = data.DataLoader(valid_set, **params)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vBeMpfkDxcNQ","executionInfo":{"status":"ok","timestamp":1741270078284,"user_tz":-540,"elapsed":3,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"98b21613-67e2-484e-e5e9-f40a1baffafe"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["train_loader.__len__()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NrxLpRKBxgn8","executionInfo":{"status":"ok","timestamp":1741270078296,"user_tz":-540,"elapsed":12,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"405eb7a9-7e2c-4bc3-f73f-78991b15ed30"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["### training"],"metadata":{"id":"a9J9ypxjvPEH"}},{"cell_type":"code","source":["torch.cuda.device_count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cgFUxOawySiK","executionInfo":{"status":"ok","timestamp":1741270101069,"user_tz":-540,"elapsed":7,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"777a8c26-6cdf-4d68-ec51-721fb709a496"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["# Create model\n","cnn_encoder = ResCNNEncoder(\n","                            fc_hidden1=CNN_fc_hidden1,\n","                            fc_hidden2=CNN_fc_hidden2,\n","                            drop_p=dropout_p,\n","                            CNN_embed_dim=CNN_embed_dim,\n","                        ).to(device)\n","rnn_decoder = DecoderRNN(\n","                            CNN_embed_dim=CNN_embed_dim,\n","                            h_RNN_layers=RNN_hidden_layers,\n","                            h_RNN=RNN_hidden_nodes,\n","                            h_FC_dim=RNN_FC_dim,\n","                            drop_p=dropout_p,\n","                            num_classes=k,\n","                        ).to(device)\n","\n","# Parallelize model to multiple GPUs\n","if torch.cuda.device_count() > 1:\n","    print(\"Using\", torch.cuda.device_count(), \"GPUs!\")\n","    cnn_encoder = nn.DataParallel(cnn_encoder)\n","    rnn_decoder = nn.DataParallel(rnn_decoder)\n","\n","    # Combine all EncoderCNN + DecoderRNN parameters\n","    crnn_params = (\n","        list(cnn_encoder.module.fc1.parameters())\n","        + list(cnn_encoder.module.bn1.parameters())\n","        + list(cnn_encoder.module.fc2.parameters())\n","        + list(cnn_encoder.module.bn2.parameters())\n","        + list(cnn_encoder.module.fc3.parameters())\n","        + list(rnn_decoder.parameters())\n","    )\n","\n","elif torch.cuda.device_count() == 1:\n","    print(\"Using\", torch.cuda.device_count(), \"GPU!\")\n","    # Combine all EncoderCNN + DecoderRNN parameters\n","    crnn_params = (\n","        list(cnn_encoder.fc1.parameters())\n","        + list(cnn_encoder.bn1.parameters())\n","        + list(cnn_encoder.fc2.parameters())\n","        + list(cnn_encoder.bn2.parameters())\n","        + list(cnn_encoder.fc3.parameters())\n","        + list(rnn_decoder.parameters())\n","    )\n","\n","optimizer = torch.optim.Adam(crnn_params, lr=learning_rate)\n","\n","\n","# 학습 및 검증 손실과 정확도를 저장할 리스트 생성\n","epoch_train_losses = []\n","epoch_train_scores = []\n","epoch_test_losses = []\n","epoch_test_scores = []\n","\n","# 학습 진행\n","for epoch in range(epochs):\n","    # train, test model\n","    train_losses, train_scores = train(\n","        log_interval, [cnn_encoder, rnn_decoder], device, train_loader, optimizer, epoch\n","    )\n","    epoch_test_loss, epoch_test_score = validation(\n","        [cnn_encoder, rnn_decoder], device, optimizer, valid_loader\n","    )\n","\n","    # save results\n","    epoch_train_losses.append(train_losses)\n","    epoch_train_scores.append(train_scores)\n","    epoch_test_losses.append(epoch_test_loss)\n","    epoch_test_scores.append(epoch_test_score)\n","\n","    # save all train test results\n","    A = np.array(epoch_train_losses)\n","    B = np.array(epoch_train_scores)\n","    C = np.array(epoch_test_losses)\n","    D = np.array(epoch_test_scores)\n","    np.save(\"./CRNN_epoch_training_losses.npy\", A)\n","    np.save(\"./CRNN_epoch_training_scores.npy\", B)\n","    np.save(\"./CRNN_epoch_test_loss.npy\", C)\n","    np.save(\"./CRNN_epoch_test_score.npy\", D)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jAbL96qF75Xv","executionInfo":{"status":"ok","timestamp":1741277165394,"user_tz":-540,"elapsed":6855902,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"2658dae2-0bae-4fc8-b629-93049b800dc3"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet152_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet152_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/resnet152-394f9c45.pth\" to /root/.cache/torch/hub/checkpoints/resnet152-394f9c45.pth\n","100%|██████████| 230M/230M [00:01<00:00, 165MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Using 1 GPU!\n"]},{"output_type":"stream","name":"stderr","text":[" 56%|█████▌    | 5/9 [10:32<08:21, 125.49s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [160/288 (56%)]\tLoss: 0.651091, Accu: 65.62%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [16:24<00:00, 109.33s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.4996, Accuracy: 67.19%\n","\n","Epoch 1 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:33<01:01, 15.30s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 2 [160/288 (56%)]\tLoss: 0.591993, Accu: 75.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:24<00:00, 16.02s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.5193, Accuracy: 62.50%\n","\n","Epoch 2 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:38<01:03, 15.79s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 3 [160/288 (56%)]\tLoss: 0.345423, Accu: 81.25%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:29<00:00, 16.66s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.6886, Accuracy: 64.06%\n","\n","Epoch 3 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:45<01:05, 16.36s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 4 [160/288 (56%)]\tLoss: 0.208635, Accu: 93.75%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:36<00:00, 17.38s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.6302, Accuracy: 64.06%\n","\n","Epoch 4 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:37<01:02, 15.69s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 5 [160/288 (56%)]\tLoss: 0.288308, Accu: 87.50%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:28<00:00, 16.52s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.5364, Accuracy: 71.88%\n","\n","Epoch 5 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:34<01:01, 15.46s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 6 [160/288 (56%)]\tLoss: 0.330284, Accu: 87.50%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:26<00:00, 16.25s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.5018, Accuracy: 71.88%\n","\n","Epoch 6 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:37<01:02, 15.68s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 7 [160/288 (56%)]\tLoss: 0.288630, Accu: 84.38%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:28<00:00, 16.48s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.7097, Accuracy: 71.88%\n","\n","Epoch 7 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:38<01:03, 15.86s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 8 [160/288 (56%)]\tLoss: 0.316618, Accu: 90.62%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:29<00:00, 16.67s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.4580, Accuracy: 78.12%\n","\n","Epoch 8 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:34<01:01, 15.47s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 9 [160/288 (56%)]\tLoss: 0.173002, Accu: 93.75%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:26<00:00, 16.26s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.4771, Accuracy: 81.25%\n","\n","Epoch 9 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:39<01:03, 15.85s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 10 [160/288 (56%)]\tLoss: 0.170910, Accu: 90.62%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:30<00:00, 16.76s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.9348, Accuracy: 68.75%\n","\n","Epoch 10 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:32<01:01, 15.28s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 11 [160/288 (56%)]\tLoss: 0.050684, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:24<00:00, 16.00s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 1.0635, Accuracy: 62.50%\n","\n","Epoch 11 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:39<01:03, 15.86s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 12 [160/288 (56%)]\tLoss: 0.091670, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:30<00:00, 16.73s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.7220, Accuracy: 78.12%\n","\n","Epoch 12 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:38<01:03, 15.77s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 13 [160/288 (56%)]\tLoss: 0.078533, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:30<00:00, 16.67s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.6125, Accuracy: 78.12%\n","\n","Epoch 13 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:40<01:03, 15.93s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 14 [160/288 (56%)]\tLoss: 0.125857, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:31<00:00, 16.81s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.4702, Accuracy: 76.56%\n","\n","Epoch 14 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:35<01:02, 15.50s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 15 [160/288 (56%)]\tLoss: 0.037363, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:26<00:00, 16.27s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.8402, Accuracy: 75.00%\n","\n","Epoch 15 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:31<01:00, 15.16s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 16 [160/288 (56%)]\tLoss: 0.291026, Accu: 87.50%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:23<00:00, 15.89s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.7862, Accuracy: 75.00%\n","\n","Epoch 16 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:46<01:05, 16.42s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 17 [160/288 (56%)]\tLoss: 0.414969, Accu: 87.50%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:37<00:00, 17.47s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.6884, Accuracy: 71.88%\n","\n","Epoch 17 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:36<01:02, 15.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 18 [160/288 (56%)]\tLoss: 0.081276, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:27<00:00, 16.42s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.7050, Accuracy: 71.88%\n","\n","Epoch 18 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:33<01:01, 15.38s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 19 [160/288 (56%)]\tLoss: 0.082339, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:25<00:00, 16.13s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.7663, Accuracy: 67.19%\n","\n","Epoch 19 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:38<01:03, 15.82s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 20 [160/288 (56%)]\tLoss: 0.120453, Accu: 93.75%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:30<00:00, 16.68s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.8817, Accuracy: 76.56%\n","\n","Epoch 20 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:38<01:03, 15.76s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 21 [160/288 (56%)]\tLoss: 0.222611, Accu: 93.75%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:29<00:00, 16.60s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 1.0534, Accuracy: 68.75%\n","\n","Epoch 21 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:45<01:05, 16.37s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 22 [160/288 (56%)]\tLoss: 0.123150, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:36<00:00, 17.40s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.6852, Accuracy: 75.00%\n","\n","Epoch 22 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:38<01:03, 15.81s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 23 [160/288 (56%)]\tLoss: 0.023687, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:30<00:00, 16.68s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.9978, Accuracy: 68.75%\n","\n","Epoch 23 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:39<01:03, 15.91s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 24 [160/288 (56%)]\tLoss: 0.179693, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:31<00:00, 16.80s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.9157, Accuracy: 70.31%\n","\n","Epoch 24 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:39<01:03, 15.95s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 25 [160/288 (56%)]\tLoss: 0.081262, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:30<00:00, 16.75s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.7867, Accuracy: 71.88%\n","\n","Epoch 25 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:39<01:03, 15.83s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 26 [160/288 (56%)]\tLoss: 0.011133, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:30<00:00, 16.70s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 1.0622, Accuracy: 71.88%\n","\n","Epoch 26 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:44<01:05, 16.31s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 27 [160/288 (56%)]\tLoss: 0.167382, Accu: 93.75%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:35<00:00, 17.30s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 1.0174, Accuracy: 65.62%\n","\n","Epoch 27 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:43<01:04, 16.19s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 28 [160/288 (56%)]\tLoss: 0.048135, Accu: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:34<00:00, 17.13s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 0.9197, Accuracy: 73.44%\n","\n","Epoch 28 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:44<01:05, 16.33s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 29 [160/288 (56%)]\tLoss: 0.363350, Accu: 93.75%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:36<00:00, 17.36s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 1.2641, Accuracy: 65.62%\n","\n","Epoch 29 model saved!\n"]},{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/9 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"," 56%|█████▌    | 5/9 [01:37<01:02, 15.72s/it]"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 [160/288 (56%)]\tLoss: 0.119190, Accu: 96.88%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9/9 [02:28<00:00, 16.55s/it]\n","/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\n","Test set (64 samples): Average loss: 1.0831, Accuracy: 65.62%\n","\n","Epoch 30 model saved!\n"]}]},{"cell_type":"code","source":["# plot\n","fig = plt.figure(figsize=(10, 4))\n","plt.subplot(121)\n","plt.plot(np.arange(1, epochs + 1), A[:, -1])  # train loss (on epoch end)\n","plt.plot(np.arange(1, epochs + 1), C)  #  test loss (on epoch end)\n","plt.title(\"model loss\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"loss\")\n","plt.legend([\"train\", \"test\"], loc=\"upper left\")\n","# 2nd figure\n","plt.subplot(122)\n","plt.plot(np.arange(1, epochs + 1), B[:, -1])  # train accuracy (on epoch end)\n","plt.plot(np.arange(1, epochs + 1), D)  #  test accuracy (on epoch end)\n","plt.title(\"training scores\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"accuracy\")\n","plt.legend([\"train\", \"test\"], loc=\"upper left\")\n","title = \"./fig_UCF101_ResNetCRNN.png\"\n","plt.savefig(title, dpi=600)\n","# plt.close(fig)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"_DV93YaqFUG5","executionInfo":{"status":"ok","timestamp":1741277167554,"user_tz":-540,"elapsed":1698,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"4a6f0a01-5aae-495a-dd81-fc261605f6d7"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA04AAAGJCAYAAAC90mOkAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAA+3FJREFUeJzsnXd8FHX6x9+7m2x67wmB0HuTJk1RURRFxY4F4RTPwqlwej85u+eJ59kVxYZ4VjjBchYUUUQB6aggNZ2Q3vsmu/P7Y3Y2m5CyZbYl3/frta+dzM5857ubZGc+8zzP59FIkiQhEAgEAoFAIBAIBIIO0Xp6AgKBQCAQCAQCgUDg7QjhJBAIBAKBQCAQCARdIISTQCAQCAQCgUAgEHSBEE4CgUAgEAgEAoFA0AVCOAkEAoFAIBAIBAJBFwjhJBAIBAKBQCAQCARdIISTQCAQCAQCgUAgEHSBEE4CgUAgEAgEAoFA0AVCOAkEAoFAIBAIBAJBFwjhJBB4AVlZWWg0GlavXm33vps3b0aj0bB58+ZOt1u9ejUajYasrCyH5igQCAQC7yEtLY0FCxY4tO+MGTOYMWOGqvMRCHoCQjgJBAKBQCAQqMy2bdt45JFHqKio8PRUBAKBSvh5egICgUAgEAgE3Y1t27bx6KOPsmDBAiIjI1Uf/8iRI2i1jt3//vbbb1WejUDQMxARJ4FAIBAIBAIPYjKZaGhosGufgIAA/P39HTqeXq9Hr9c7tK+v48hnLRAoCOEkEACPPPIIGo2Go0ePcv311xMREUFcXBwPPvggkiSRm5vLJZdcQnh4OImJiTzzzDOnjFFUVMRNN91EQkICgYGBjB49mnfeeeeU7SoqKliwYAERERFERkZy4403dpjKcfjwYa644gqio6MJDAxk/PjxfP7556q+91deeYXhw4cTEBBAcnIyd9xxxynzOXbsGJdffjmJiYkEBgbSq1cvrrnmGiorKy3bbNy4kWnTphEZGUloaCiDBw/m73//u6pzFQgEAl/gkUce4d577wWgb9++aDSaVjWmGo2GxYsX8/7771u+fzds2ADA008/zZQpU4iJiSEoKIhx48bx8ccfn3KMtjVOSh3r1q1bWbp0KXFxcYSEhDB37lyKi4tb7du2xkmplV27di3//Oc/6dWrF4GBgZxzzjkcP378lGOvWLGCfv36ERQUxMSJE/npp59srpuy5VzR0NDAI488wqBBgwgMDCQpKYnLLruM9PR0yza1tbX89a9/JTU1lYCAAAYPHszTTz+NJEmtxurss87Ly+NPf/oTCQkJBAQEMHz4cFatWnXKnF966SWGDx9OcHAwUVFRjB8/ng8++KDL9yrofohUPYHAiquvvpqhQ4fy5JNP8uWXX/L4448THR3Na6+9xtlnn82//vUv3n//fe655x4mTJjAGWecAUB9fT0zZszg+PHjLF68mL59+/Lf//6XBQsWUFFRwV133QWAJElccskl/Pzzz9x6660MHTqUTz75hBtvvPGUuRw8eJCpU6eSkpLCfffdR0hICGvXruXSSy9l3bp1zJ071+n3+8gjj/Doo48yc+ZMbrvtNo4cOcKrr77Krl272Lp1K/7+/hgMBmbNmkVjYyN/+ctfSExMJC8vjy+++IKKigoiIiI4ePAgF110EaNGjeKxxx4jICCA48ePs3XrVqfnKBAIBL7GZZddxtGjR/nwww957rnniI2NBSAuLs6yzffff8/atWtZvHgxsbGxpKWlAfDCCy9w8cUXc91112EwGPjoo4+48sor+eKLL7jwwgu7PPZf/vIXoqKiePjhh8nKyuL5559n8eLFrFmzpst9n3zySbRaLffccw+VlZU89dRTXHfddezYscOyzauvvsrixYuZPn06S5YsISsri0svvZSoqCh69erV6fi2nCuMRiMXXXQRmzZt4pprruGuu+6iurqajRs3cuDAAfr3748kSVx88cX88MMP3HTTTYwZM4ZvvvmGe++9l7y8PJ577rlWx23vsy4sLOT000+3CKu4uDi+/vprbrrpJqqqqrj77rsBeOONN7jzzju54ooruOuuu2hoaOC3335jx44dXHvttV1+poJuhiQQCKSHH35YAqRbbrnFsq65uVnq1auXpNFopCeffNKyvry8XAoKCpJuvPFGy7rnn39eAqT33nvPss5gMEiTJ0+WQkNDpaqqKkmSJOnTTz+VAOmpp55qdZzp06dLgPT2229b1p9zzjnSyJEjpYaGBss6k8kkTZkyRRo4cKBl3Q8//CAB0g8//NDpe3z77bclQMrMzJQkSZKKiookvV4vnXfeeZLRaLRs9/LLL0uAtGrVKkmSJGnfvn0SIP33v//tcOznnntOAqTi4uJO5yAQCAQ9hX//+9+tvnOtASStVisdPHjwlNfq6upa/WwwGKQRI0ZIZ599dqv1ffr0aXUeUr7jZ86cKZlMJsv6JUuWSDqdTqqoqLCsO/PMM6UzzzzT8rNyHhk6dKjU2NhoWf/CCy9IgPT7779LkiRJjY2NUkxMjDRhwgSpqanJst3q1asloNWY7WHLuWLVqlUSID377LOnvKa8L+Vc+vjjj7d6/YorrpA0Go10/Phxy7qOPuubbrpJSkpKkkpKSlqtv+aaa6SIiAjL7+GSSy6Rhg8f3un7EvQcRKqeQGDFzTffbFnW6XSMHz8eSZK46aabLOsjIyMZPHgwGRkZlnVfffUViYmJzJs3z7LO39+fO++8k5qaGn788UfLdn5+ftx2222tjvOXv/yl1TzKysr4/vvvueqqq6iurqakpISSkhJKS0uZNWsWx44dIy8vz6n3+t1332EwGLj77rtbFRgvWrSI8PBwvvzySwAiIiIA+Oabb6irq2t3LKXw+bPPPsNkMjk1L4FAIOgJnHnmmQwbNuyU9UFBQZbl8vJyKisrmT59Onv37rVp3FtuuQWNRmP5efr06RiNRrKzs7vcd+HCha1qn6ZPnw5gOd/t3r2b0tJSFi1ahJ9fS9LSddddR1RUVJfj23KuWLduHbGxsaecFwHL+/rqq6/Q6XTceeedrV7/61//iiRJfP31163Wt/2sJUli3bp1zJkzB0mSLOfYkpISZs2aRWVlpeXzjoyM5MSJE+zatavL9yfo/gjhJBBY0bt371Y/R0REEBgYaEmzsF5fXl5u+Tk7O5uBAwee4nA0dOhQy+vKc1JSEqGhoa22Gzx4cKufjx8/jiRJPPjgg8TFxbV6PPzww4BcU+UMypzaHluv19OvXz/L63379mXp0qW8+eabxMbGMmvWLFasWNGqvunqq69m6tSp3HzzzSQkJHDNNdewdu1aIaIEAoGgA/r27dvu+i+++ILTTz+dwMBAoqOjiYuL49VXX231ndsZbc9jiqCxPmc5uq9yXhgwYECr7fz8/Cyphp1hy7kiPT2dwYMHtxJmbcnOziY5OZmwsLBW69uecxXaftbFxcVUVFTw+uuvn3KOXbhwIdByjv2///s/QkNDmThxIgMHDuSOO+4Qaeg9GFHjJBBYodPpbFoHnFKAqibKSeSee+5h1qxZ7W7T9sTlSp555hkWLFjAZ599xrfffsudd97J8uXL+eWXX+jVqxdBQUFs2bKFH374gS+//JINGzawZs0azj77bL799tsOP0OBQCDoqVhHlhR++uknLr74Ys444wxeeeUVkpKS8Pf35+2337bZjMCZc5arz3eeOle0/ayVc+z111/fbo0xwKhRowBZjB05coQvvviCDRs2sG7dOl555RUeeughHn30UZfMV+C9iIiTQKACffr04dixY6dEWA4fPmx5XXnOz8+npqam1XZHjhxp9XO/fv0AOd1v5syZ7T7a3mlzZM7tHdtgMJCZmWl5XWHkyJE88MADbNmyhZ9++om8vDxWrlxpeV2r1XLOOefw7LPP8scff/DPf/6T77//nh9++MGpeQoEAoEvYp0uZyvr1q0jMDCQb775hj/96U9ccMEFzJw50wWzcwzlvNDWaa+5udniGNgVXZ0r+vfvz5EjR2hqaup0HidPnqS6urrV+rbn3I6Ii4sjLCwMo9HY4Tk2Pj7esn1ISAhXX301b7/9Njk5OVx44YX885//FLbmPRAhnAQCFZg9ezYFBQWtXIuam5t56aWXCA0N5cwzz7Rs19zczKuvvmrZzmg08tJLL7UaLz4+nhkzZvDaa6+Rn59/yvHaWss6wsyZM9Hr9bz44out7ia+9dZbVFZWWtybqqqqaG5ubrXvyJEj0Wq1NDY2AnJNVlvGjBkDYNlGIBAIehIhISEAHbabaA+dTodGo8FoNFrWZWVl8emnn6o8O8cYP348MTExvPHGG63OC++//75NqYC2nCsuv/xySkpKePnll0/ZVjlXzZ49G6PReMo2zz33HBqNhgsuuKDTeeh0Oi6//HLWrVvHgQMHTnnd+hxbWlra6jW9Xs+wYcOQJKlTcSfonohUPYFABW655RZee+01FixYwJ49e0hLS+Pjjz9m69atPP/885bo0Jw5c5g6dSr33XcfWVlZDBs2jPXr17ebu75ixQqmTZvGyJEjWbRoEf369aOwsJDt27dz4sQJfv31V6fmHBcXx7Jly3j00Uc5//zzufjiizly5AivvPIKEyZM4PrrrwdkG9fFixdz5ZVXMmjQIJqbm3n33XctJx6Axx57jC1btnDhhRfSp08fioqKeOWVV+jVqxfTpk1zap4CgUDgi4wbNw6A+++/n2uuuQZ/f3/mzJljEVTtceGFF/Lss89y/vnnc+2111JUVMSKFSsYMGAAv/32m7um3iF6vZ5HHnmEv/zlL5x99tlcddVVZGVlsXr1avr3799llM2Wc8X8+fP5z3/+w9KlS9m5cyfTp0+ntraW7777jttvv51LLrmEOXPmcNZZZ3H//feTlZXF6NGj+fbbb/nss8+4++676d+/f5fv5cknn+SHH35g0qRJLFq0iGHDhlFWVsbevXv57rvvLCLvvPPOIzExkalTp5KQkMChQ4d4+eWXufDCC53O/BD4IB5y8xMIvArFjrytReqNN94ohYSEnLL9mWeeeYo9aWFhobRw4UIpNjZW0uv10siRI1vZiyuUlpZKN9xwgxQeHi5FRERIN9xwg8Xyu+326enp0vz586XExETJ399fSklJkS666CLp448/tmzjqB25wssvvywNGTJE8vf3lxISEqTbbrtNKi8vt7yekZEh/elPf5L69+8vBQYGStHR0dJZZ50lfffdd5ZtNm3aJF1yySVScnKypNfrpeTkZGnevHnS0aNHO52TQCAQdGf+8Y9/SCkpKZJWq231/QtId9xxR7v7vPXWW9LAgQOlgIAAaciQIdLbb79tOUdZ05Ed+a5du1pt1945oiM78rZtJzIzM9s9N7344otSnz59pICAAGnixInS1q1bpXHjxknnn39+p5+HreeKuro66f7775f69u0r+fv7S4mJidIVV1whpaenW7aprq6WlixZIiUnJ0v+/v7SwIEDpX//+9+trNglqfPPurCwULrjjjuk1NRUy3HOOecc6fXXX7ds89prr0lnnHGGFBMTIwUEBEj9+/eX7r33XqmysrLT9yronmgkyYUV7gKBQCAQCASCbo3JZCIuLo7LLruMN954w9PTEQhchqhxEggEAoFAIBDYRENDwykue//5z38oKytjxowZnpmUQOAmRMRJIBAIBAKBQGATmzdvZsmSJVx55ZXExMSwd+9e3nrrLYYOHcqePXtaNdAVCLobwhxCIBAIBAKBQGATaWlppKam8uKLL1JWVkZ0dDTz58/nySefFKJJ0O0RESeBQCAQCAQCgUAg6AJR4yQQCAQCgUAgEAgEXSCEk0AgEAgEAoFAIBB0QY+rcTKZTJw8eZKwsLAuG7UJBAKBQF0kSaK6uprk5GS0WnHvTkGcmwQCgcAz2HNe6nHC6eTJk6Smpnp6GgKBQNCjyc3NpVevXp6ehtcgzk0CgUDgWWw5L/U44RQWFgbIH054eLiHZyMQCAQ9i6qqKlJT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\n"},"metadata":{}}]},{"cell_type":"code","source":["train_result_path = \"/content/drive/MyDrive/DMS/ResNetCRNN_yawDD_24f_train_result_test\"\n","# Loss 그래프\n","plt.subplot(121)\n","plt.plot(np.arange(1, epochs + 1), A.mean(axis=1))  # train loss(각 에포크의 평균)\n","plt.plot(np.arange(1, epochs + 1), C)  # test loss\n","plt.title(\"Model Loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend([\"Train\", \"Test\"], loc=\"upper left\")\n","\n","# Accuracy 그래프\n","plt.subplot(122)\n","plt.plot(\n","    np.arange(1, epochs + 1), B.mean(axis=1)\n",")  # train accuracy (각 에포크의 평균)\n","plt.plot(np.arange(1, epochs + 1), D)  # test accuracy\n","plt.title(\"Training Scores\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend([\"Train\", \"Test\"], loc=\"upper left\")\n","plt.show()\n","\n","# 그래프 저장\n","os.makedirs(train_result_path, exist_ok=True)\n","plot_save_path = os.path.join(train_result_path, \"training_results.png\")\n","plt.savefig(plot_save_path, dpi=600)\n","\n","print(f\"\\n✅ 학습 그래프 저장 완료 ({plot_save_path})\\n\")"],"metadata":{"id":"bn4Y-gw8N01T","colab":{"base_uri":"https://localhost:8080/","height":543},"executionInfo":{"status":"ok","timestamp":1741277168472,"user_tz":-540,"elapsed":917,"user":{"displayName":"somin shim","userId":"00972152430439357273"}},"outputId":"8307bbd8-acaa-459c-cdec-d037108448e1"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","✅ 학습 그래프 저장 완료 (/content/drive/MyDrive/DMS/ResNetCRNN_yawDD_24f_train_result_test/training_results.png)\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"DUBuyoYvFWUw"},"execution_count":null,"outputs":[]}]}