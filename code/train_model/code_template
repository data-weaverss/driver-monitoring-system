{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":18501,"status":"ok","timestamp":1747550801862,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"},"user_tz":-540},"id":"J68SdBzNjphV","colab":{"base_uri":"https://localhost:8080/"},"outputId":"699664e2-52f8-4e01-a910-d812336f95e3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"markdown","metadata":{"id":"wUDOtyCzmZth"},"source":["## **학습 & 테스트 프로세스 요약**\n","| 단계 | 학습 (Train) | 테스트 (Test) |\n","|------|------------|-------------|\n","| **1. 데이터 입력** | CSV 파일 (이미 추출된 특징값) | 동영상 |\n","| **2. 특징 추출** | CSV에서 불러오기 | 동영상 → 프레임 추출 → 12개 묶음 → 특징 추출 |\n","| **3. 데이터 변환** | `(배치, 12, 5)` 형태로 변환 | `(1, 12, 5)` 형태로 변환 |\n","| **4. 모델 학습/예측** | LSTM 모델 학습 | LSTM 모델을 이용해 예측 |\n","| **5. 결과 저장** | `.pth` 파일로 저장 | 예측값 출력 |\n"]},{"cell_type":"markdown","metadata":{"id":"Fk84YrSckNTx"},"source":["# 1. 학습"]},{"cell_type":"markdown","metadata":{"id":"QJKfO0xhkSSz"},"source":["1. 추출된 feature 로드\n","2. LSTM Input 형식으로 변환\n","3. LSTM 학습"]},{"cell_type":"markdown","metadata":{"id":"FJuBF9S3WK2y"},"source":["## 라이브러리 임포트"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qtMzGHiCkMEO"},"outputs":[],"source":["import os\n","import datetime\n","from tqdm import tqdm\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, classification_report\n","from collections import Counter\n","import random\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","from torch.utils.data import DataLoader, TensorDataset\n","import torch.utils.data as data\n","import torch.optim as optim\n","import torchvision\n","from torch.autograd import Variable\n","\n","from sklearn.metrics import accuracy_score\n","\n","import matplotlib.pyplot as plt\n","import cv2\n","from IPython.display import display\n","from PIL import Image\n","\n","from dataclasses import dataclass, field\n","from typing import Tuple, List\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","from enum import Enum\n","\n","class ModelType(Enum):\n","  BEST = \"best\"\n","  LAST = \"last\"\n","\n","class DataType(Enum):\n","  TRAIN = \"train\"\n","  VAL = \"val\"\n","  TEST = \"test\"\n","\n","base_dir = \"/content/drive/MyDrive/DMS\"\n"]},{"cell_type":"markdown","metadata":{"id":"1Srd-RY9pcZE"},"source":["## 1-2. LSTM Input 형식으로 변환"]},{"cell_type":"markdown","metadata":{"id":"JwkJmAOOFgDF"},"source":["### Config 설정"]},{"cell_type":"code","source":["from dataclasses import dataclass\n","\n","@dataclass\n","class Config:\n","    case_name: str = \"LSTM\" # 바꿔야하는 부분\n","\n","    # 모델 구조\n","    lstm_num_layers: int = 3\n","    lstm_hidden_size: int = 512\n","    fc_hidden_size: int = 256\n","    dropout_rate: float = 0.2 # input-to-hidden (between layers)\n","    bidirectional: bool = False\n","\n","    # 학습 설정\n","    batch_size: int = 32\n","    epochs: int = 100\n","    learning_rate: float = 3e-4\n","    optimizer: str = \"adam\" # or \"sgd\", \"adamw\"\n","\n","    # 입력 데이터\n","    sequence_length: int = 12\n","    sliding_window_step: int = 12 # sliding window 사용 x -> seuqnce_length와 같은 값으로 설정\n","    features: list = field(default_factory=lambda: [\"mar\", \"ear\", \"yaw\", \"pitch\", \"phone_detected\"])\n","    labels: list = field(default_factory=lambda: [\"normal\", \"phonecall\", \"text\", \"yawn\"])\n","\n","    apply_yaw_inversion: bool = False\n","    apply_noise_jittering: bool = False\n","\n","    # 학습 제어 - 조기 종료 / 러닝레이트 스케줄러\n","    use_early_stopping: bool = False  # 조기 종료 사용 여부\n","    use_lr_scheduler: bool = False    # 학습률 스케줄러 사용 여부\n","    early_stopping_patience: int = 20 # early stopping 기준 epoch\n","    reduce_lr_factor: float = 0.5 # learning rate 감소 비율\n","    reduce_lr_patience: int = 7 # learning rate 감소 기준 epoch\n","\n","    # 랜덤시드 설정\n","    random_seed: int = 24\n","\n","    def __post_init__(self):\n","      self.results_save_path = f\"{base_dir}/runs/{self.case_name}\"\n","      self.model_save_path = f\"{self.results_save_path}/weights\"\n","\n","      os.makedirs(self.results_save_path, exist_ok=True)\n","      os.makedirs(self.model_save_path, exist_ok=True)\n","\n","      if self.sequence_length == 12:\n","        df_path = f'{base_dir}/data/splits/12frame_windows'\n","        self.group_col = 'groups_12'\n","      elif self.sequence_length == 24:\n","        df_path = f'{base_dir}/data/splits/24frame_windows'\n","        self.group_col = 'groups_24'\n","\n","      self.train = pd.read_csv(os.path.join(df_path, \"final_train.csv\"))\n","      self.validation = pd.read_csv(os.path.join(df_path, \"final_val.csv\"))\n","      self.test = pd.read_csv(os.path.join(df_path, \"final_test.csv\"))\n","\n","      # label_mapping\n","      self.label_encoding = {}\n","      self.label_decoding = {}\n","      for i, label in enumerate(self.labels):\n","          self.label_encoding[label] = i\n","          self.label_decoding[i] = label\n","\n","      # 디바이스 설정\n","      self.use_cuda = torch.cuda.is_available()\n","      self.device = torch.device(\"cuda\" if self.use_cuda else \"cpu\")\n","\n","cfg = Config()\n","# print(cfg.case_name) # 사용 예시"],"metadata":{"id":"5hKlc4kUp4l9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def set_random_seed(seed):\n","    torch.manual_seed(seed)  # PyTorch CPU 연산에 대한 시드 설정\n","    torch.cuda.manual_seed(seed)  # CUDA 연산에 대한 시드 설정 (GPU 사용 시)\n","    torch.cuda.manual_seed_all(seed)  # 여러 GPU를 사용하는 경우 모든 GPU에 동일한 시드 설정\n","    np.random.seed(seed)  # NumPy 연산에 대한 시드 설정\n","    random.seed(seed)  # Python 기본 random 모듈의 시드 설정\n","    torch.backends.cudnn.deterministic = True  # CuDNN 연산의 결정론적 동작 보장\n","    torch.backends.cudnn.benchmark = False  # 성능 최적화 비활성화 (재현성 보장)\n","\n","set_random_seed(cfg.random_seed)"],"metadata":{"id":"nnUAKflRWPoq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pRHMOaLpW7Y2"},"source":["### 데이터 로드"]},{"cell_type":"markdown","source":["### train, val, test 데이터셋 로드"],"metadata":{"id":"R1vpZJH9TRky"}},{"cell_type":"code","source":["train_df = cfg.train.copy()\n","val_df = cfg.validation.copy()\n","test_df = cfg.test.copy()"],"metadata":{"id":"LaskMuLUQ89h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# train normal undersampling\n","train_df = train_df[((train_df['label'] == 'normal') &\n","                    (train_df[cfg.group_col].isin([0, 1]))) |\n","                    (train_df['label'] != 'normal')]"],"metadata":{"id":"eHUoDw4U9kQR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OdLSCKeSrZAE"},"source":["### generate_sequence_dataset"]},{"cell_type":"code","source":["def generate_sequence_dataset(\n","    df: pd.DataFrame\n",") -> Tuple[np.ndarray, np.ndarray, List[Tuple]]:\n","    sequences, labels, metadata = [], [], []\n","\n","    for (label, clip_id), clip_df in df.groupby(['label', 'clip_id']):\n","        clip_df = clip_df.sort_values('frame_no')\n","        frame_values = clip_df[cfg.features].values\n","\n","        if len(frame_values) < cfg.sequence_length:\n","            continue\n","\n","        for i in range(0, len(frame_values) - cfg.sequence_length + 1, cfg.sliding_window_step):\n","            seq = frame_values[i:i + cfg.sequence_length]\n","            if seq.shape[0] == cfg.sequence_length:\n","                sequences.append(seq)\n","                labels.append(cfg.label_encoding[label])\n","                # 학습 후 오분류 데이터 확인을 위한 시작 프레임 번호 저장\n","                metadata.append((label, clip_id, clip_df.iloc[i]['frame_no']))\n","\n","    return TensorDataset(torch.tensor(sequences, dtype=torch.float32), torch.tensor(labels, dtype=torch.long)), metadata"],"metadata":{"id":"SbY5UTS4T39f"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iGaRQUVjFDPA"},"source":["### DataLoader"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"safri8zEE8Qs"},"outputs":[],"source":["train_params = {\n","    \"batch_size\": cfg.batch_size,\n","    \"shuffle\": True,\n","    \"num_workers\": 4,\n","    \"pin_memory\": cfg.use_cuda,\n","    \"persistent_workers\": cfg.use_cuda,\n","    \"prefetch_factor\": 2 if cfg.use_cuda else None,\n","}\n","\n","test_params = {\n","    \"batch_size\": cfg.batch_size,\n","    \"shuffle\": False,\n","    \"num_workers\": 0,\n","    \"pin_memory\": cfg.use_cuda\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3155,"status":"ok","timestamp":1747564841428,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"},"user_tz":-540},"id":"kkBxlRECyZZs","outputId":"a63efbdd-7115-44f8-8e13-37bdcca33640"},"outputs":[{"output_type":"stream","name":"stdout","text":["Batch Shape: torch.Size([32, 12, 5]) torch.Size([32])\n","Batch Shape: torch.Size([32, 12, 5]) torch.Size([32])\n","Batch Shape: torch.Size([32, 12, 5]) torch.Size([32])\n"]}],"source":["# DataLoader 생성 (배치 단위로 데이터를 나누기 위해 사용)\n","train_dataset, train_metadata = generate_sequence_dataset(train_df)\n","val_dataset, val_metadata = generate_sequence_dataset(val_df)\n","test_dataset, test_metadata = generate_sequence_dataset(test_df)\n","\n","train_loader = DataLoader(train_dataset, **train_params)\n","val_loader = DataLoader(val_dataset, **test_params)\n","test_loader = DataLoader(test_dataset, **test_params)\n","\n","# 배치 단위 확인\n","for x_batch, y_batch in train_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인\n","\n","for x_batch, y_batch in val_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인\n","\n","for x_batch, y_batch in test_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인"]},{"cell_type":"markdown","metadata":{"id":"fROYd8X1zYa7"},"source":["## 1-3. LSTM 학습 설정"]},{"cell_type":"markdown","source":["### 모델 정의"],"metadata":{"id":"KnLIHJVEBYwV"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"AOK3mN2xHwtt"},"outputs":[],"source":["# LSTM 모델 정의\n","class DecoderRNN(nn.Module):\n","    def __init__(self):\n","        super(DecoderRNN, self).__init__()\n","\n","        self.RNN_input_size = len(cfg.features)\n","        self.h_RNN_layers = cfg.lstm_num_layers\n","        self.h_RNN = cfg.lstm_hidden_size\n","        self.h_FC_dim = cfg.fc_hidden_size\n","        self.drop_p = cfg.dropout_rate\n","        self.num_classes = len(cfg.labels)\n","        self.bidirectional = cfg.bidirectional\n","\n","        self.LSTM = nn.LSTM(\n","            input_size=self.RNN_input_size,\n","            hidden_size=self.h_RNN,\n","            num_layers=self.h_RNN_layers,\n","            batch_first=True,\n","            bidirectional=self.bidirectional\n","        )\n","\n","        # bidirectional에 따라 출력 크기 달라짐\n","        lstm_output_dim = self.h_RNN * (2 if self.bidirectional else 1)\n","\n","        self.fc1 = nn.Linear(lstm_output_dim, self.h_FC_dim)\n","        self.bn1 = nn.BatchNorm1d(self.h_FC_dim)  # Batch Normalization 추가\n","        self.fc2 = nn.Linear(self.h_FC_dim, self.num_classes)\n","        self.dropout = nn.Dropout(p=self.drop_p)\n","\n","    def forward(self, x_RNN):\n","        self.LSTM.flatten_parameters()\n","        RNN_out, _ = self.LSTM(x_RNN, None)\n","\n","        # FC layers\n","        x = self.fc1(RNN_out[:, -1, :])  # 마지막 타임스텝 사용\n","        x = self.bn1(x)\n","        x = F.relu(x)\n","        x = self.dropout(x)\n","        x = self.fc2(x)\n","\n","        return x  # CrossEntropyLoss 사용 (Softmax 없음)"]},{"cell_type":"markdown","metadata":{"id":"RXocvVKtkOMG"},"source":["### optimizer"]},{"cell_type":"markdown","source":["- 모델 구조 비교: Adam 고정\n","- 정규화/튜닝 단계: Adam, AdamW, SGD 비교\n","- 최종 성능 극대화: weight decay, scheduler, mixed precision 등과 조합 실험"],"metadata":{"id":"JX_Y9TybhXI6"}},{"cell_type":"code","source":["def get_optimizer(model):\n","    if cfg.optimizer.lower() == \"adam\":\n","        return optim.Adam(model.parameters(), lr=cfg.learning_rate)\n","    elif cfg.optimizer.lower() == \"sgd\":\n","        return optim.SGD(model.parameters(), lr=cfg.learning_rate, momentum=0.9)\n","    elif cfg.optimizer.lower() == \"adamw\":\n","        return optim.AdamW(model.parameters(), lr=cfg.learning_rate)\n","    else:\n","        raise ValueError(f\"Unsupported optimizer: {cfg.optimizer}\")\n","\n","def get_criterion():\n","  return nn.CrossEntropyLoss()"],"metadata":{"id":"3gHz7kiLhVVh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 학습 스케줄러 설정"],"metadata":{"id":"HjZoYJFvffDM"}},{"cell_type":"code","source":["def get_scheduler(optimizer):\n","    return optim.lr_scheduler.ReduceLROnPlateau(\n","        optimizer,\n","        mode=\"min\",  # 'min' for loss, 'max' for accuracy/f1\n","        factor=cfg.reduce_lr_factor,\n","        patience=cfg.reduce_lr_patience,\n",")"],"metadata":{"id":"svwn6KqlfiK_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ne6SnCpE5sMd"},"source":["### Early Stopping 설정"]},{"cell_type":"code","source":["class EarlyStopping:\n","    def __init__(self, mode: str = \"min\"):\n","        self.patience = cfg.early_stopping_patience\n","        self.mode = mode\n","        self.best_score = np.inf if mode == \"min\" else -np.inf\n","        self.counter = 0\n","        self.early_stop = False\n","\n","    def step(self, current_score: float) -> bool:\n","        \"\"\"\n","        평가 점수(current_score)를 받아 early stopping 여부를 업데이트함.\n","        Returns:\n","            True if training should stop\n","        \"\"\"\n","        if self.mode == \"min\":\n","            is_improvement = current_score < self.best_score\n","        else:  # \"max\"\n","            is_improvement = current_score > self.best_score\n","\n","        if is_improvement:\n","            self.best_score = current_score\n","            self.counter = 0\n","        else:\n","            self.counter += 1\n","            if self.counter >= self.patience:\n","                self.early_stop = True\n","\n","        return self.early_stop"],"metadata":{"id":"cOHa2ZkNgW2U"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0XTNDoMjMh0Q"},"source":["## 1-4 학습 진행"]},{"cell_type":"markdown","metadata":{"id":"uX8o8vwQMlXU"},"source":["-  Gradient Clipping 추가 (torch.nn.utils.clip_grad_norm_()) → 폭발적인 기울기(Gradient Explosion) 방지\n","- 모델 저장 기능 추가 (torch.save()) → Best Loss 갱신 시 자동 저장"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0R88mx_dea0I"},"outputs":[],"source":["def save_model(model, optimizer, epoch, loss, model_type): # model_type: \"best\", \"last\"\n","    model_filename = f\"{cfg.model_save_path}/{model_type}_model.pth\"  # 저장 파일명\n","\n","    torch.save({\n","        'epoch': epoch,\n","        'model_state_dict': model.state_dict(),\n","        'optimizer_state_dict': optimizer.state_dict(),\n","        'loss': loss\n","    }, model_filename)\n","\n","    print(f\"💾 Model Updated! Saved at {model_filename} (Loss: {loss:.4f})\")\n","\n","def save_training_results(\n","        train_losses,\n","        train_scores,\n","        val_losses,\n","        val_scores,\n","        ):\n","    \"\"\"\n","    학습 과정의 손실(loss)과 정확도(score)를 저장하는 함수\n","    \"\"\"\n","    results_df = pd.DataFrame({\n","        \"epoch\": list(range(1, len(train_losses) + 1)),\n","        \"train_loss\": train_losses,\n","        \"train_accuracy\": train_scores,\n","        \"val_loss\": val_losses,\n","        \"val_accuracy\": val_scores,\n","    })\n","\n","    results_df.to_csv(f\"{cfg.results_save_path}/training_results.csv\", index=False)\n","    print(f\"💾 Training results saved at {cfg.results_save_path}/training_results.csv\")"]},{"cell_type":"markdown","metadata":{"id":"B3TL3Dy7bxnt"},"source":["### epoch마다 validation data로 성능평가\n","- 다음 기술을 적용하는 기준: Validation data Loss\n","    - validation data 기준으로 best model 선정\n","    - 모델 저장 (Best Loss 갱신 시)"]},{"cell_type":"markdown","source":["### train & validate"],"metadata":{"id":"ve-1oy5X7SVB"}},{"cell_type":"code","source":["def train(model, device, train_loader, optimizer, criterion, epoch):\n","    model.train()\n","    losses, scores = [], []\n","\n","    for X, y in tqdm(train_loader, desc=f\"Epoch {epoch+1} [Train]\"):\n","        X, y = X.to(device), y.to(device).long()\n","\n","        optimizer.zero_grad()\n","        output = model(X)\n","        loss = criterion(output, y)\n","\n","        loss.backward()\n","\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)  #  Gradient Clipping\n","        optimizer.step()\n","\n","        losses.append(loss.item())\n","\n","        # 정확도 계산\n","        y_pred = torch.argmax(output, dim=1)\n","        acc = accuracy_score(y.cpu().numpy(), y_pred.cpu().numpy())\n","        scores.append(acc)\n","\n","    avg_loss = sum(losses) / len(losses)\n","    avg_acc = sum(scores) / len(scores) * 100\n","\n","    print(f\"✅ Train Epoch {epoch+1} Finished - Avg Loss: {avg_loss:.4f}, Avg Acc: {avg_acc:.2f}%\")\n","\n","    return avg_loss, avg_acc  # 학습 Loss 및 Accuracy 반환\n","\n","def validate(model, device, criterion, val_loader):\n","    model.eval()\n","    losses, scores = [], []\n","\n","    with torch.no_grad():\n","        for X, y in val_loader:\n","            X, y = X.to(device), y.to(device).long()\n","            output = model(X)\n","            loss = criterion(output, y)\n","\n","            losses.append(loss.item())\n","\n","            y_pred = torch.argmax(output, dim=1)\n","            acc = accuracy_score(y.cpu().numpy(), y_pred.cpu().numpy())\n","            scores.append(acc)\n","\n","    avg_loss = sum(losses) / len(losses)\n","    avg_acc = sum(scores) / len(scores) * 100\n","\n","    print(f\"✅ Validation Finished - Avg Loss: {avg_loss:.4f}, Avg Acc: {avg_acc:.2f}%\")\n","\n","    return avg_loss, avg_acc  # 검증 Loss 및 Accuracy 반환"],"metadata":{"id":"cb6g45rd7Td3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 전체 학습 실행 코드\n","def train_and_validate(model, train_loader, val_loader, optimizer, criterion, scheduler=None):\n","    best_loss = np.inf\n","\n","    train_losses, train_scores = [], []\n","    val_losses, val_scores = [], []\n","\n","    for epoch in range(cfg.epochs):\n","        # 학습 단계\n","        train_loss, train_score = train(\n","            model=model,\n","            device=cfg.device,\n","            train_loader=train_loader,\n","            optimizer=optimizer,\n","            criterion=criterion,\n","            epoch=epoch\n","        )\n","\n","        val_loss, val_score = validate(\n","            model=model,\n","            device=cfg.device,\n","            criterion=criterion,\n","            val_loader=val_loader\n","        )\n","\n","        train_losses.append(train_loss)\n","        train_scores.append(train_score)\n","        val_losses.append(val_loss)\n","        val_scores.append(val_score)\n","\n","        # 학습률 감소 적용\n","        if cfg.use_lr_scheduler:\n","          pass\n","\n","        # Best model 저장\n","        if val_loss < best_loss:\n","            best_loss = val_loss\n","            patience_counter = 0\n","\n","            save_model(\n","                model=model,\n","                optimizer=optimizer,\n","                epoch=epoch,\n","                loss=best_loss,\n","                model_type=\"best\"\n","            )\n","\n","            print(f\"Best Loss Updated! : {best_loss}\")\n","\n","        # Early Stopping 체크\n","        if cfg.use_early_stopping:\n","          pass\n","\n","    # 마지막 모델 저장\n","    save_model(\n","      model=model,\n","      optimizer=optimizer,\n","      epoch=epoch,\n","      loss=val_loss,\n","      model_type=\"last\"\n","    )\n","\n","    # 학습 결과 저장\n","    save_training_results(\n","      train_losses,\n","      train_scores,\n","      val_losses,\n","      val_scores\n","    )\n","\n","    return train_losses, train_scores, val_losses, val_scores"],"metadata":{"id":"IWnfoFlV9LHG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = DecoderRNN()\n","model.to(cfg.device)\n","\n","optimizer = get_optimizer(model)\n","criterion = get_criterion()\n","\n","scheduler = get_scheduler(optimizer, cfg) if cfg.use_lr_scheduler else None\n","\n","train_losses, train_scores, valid_losses, valid_scores = train_and_validate(\n","    model, train_loader, val_loader, optimizer, criterion, scheduler)"],"metadata":{"id":"dgg3e6fPLpl4","executionInfo":{"status":"error","timestamp":1747564679183,"user_tz":-540,"elapsed":97142,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}},"colab":{"base_uri":"https://localhost:8080/","height":760},"outputId":"f229c924-eba8-4ef1-d93d-3f0d7c25a1a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Epoch 1 [Train]: 100%|██████████| 76/76 [00:09<00:00,  8.12it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 1 Finished - Avg Loss: 1.4081, Avg Acc: 13.20%\n","✅ Validation Finished - Avg Loss: 1.3968, Avg Acc: 21.95%\n","💾 Model Updated! Saved at /content/drive/MyDrive/DMS/runs/LSTM/weights/best_model.pth (Loss: 1.3968)\n","Best Loss Updated! : 1.3967537636106664\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 2 [Train]: 100%|██████████| 76/76 [00:09<00:00,  8.32it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 2 Finished - Avg Loss: 1.4081, Avg Acc: 13.86%\n","✅ Validation Finished - Avg Loss: 1.4076, Avg Acc: 16.96%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 3 [Train]: 100%|██████████| 76/76 [00:08<00:00,  8.56it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 3 Finished - Avg Loss: 1.4079, Avg Acc: 12.75%\n","✅ Validation Finished - Avg Loss: 1.4056, Avg Acc: 11.96%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 4 [Train]: 100%|██████████| 76/76 [00:09<00:00,  7.99it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 4 Finished - Avg Loss: 1.4080, Avg Acc: 12.66%\n","✅ Validation Finished - Avg Loss: 1.4049, Avg Acc: 12.88%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 5 [Train]: 100%|██████████| 76/76 [00:09<00:00,  7.79it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 5 Finished - Avg Loss: 1.4084, Avg Acc: 13.08%\n","✅ Validation Finished - Avg Loss: 1.4050, Avg Acc: 12.81%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 6 [Train]: 100%|██████████| 76/76 [00:10<00:00,  7.12it/s]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Train Epoch 6 Finished - Avg Loss: 1.4080, Avg Acc: 13.12%\n","✅ Validation Finished - Avg Loss: 1.4056, Avg Acc: 13.30%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 7 [Train]:  43%|████▎     | 33/76 [00:04<00:05,  7.93it/s]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-160-987a3c7ced6a>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mscheduler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_scheduler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcfg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mcfg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muse_lr_scheduler\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m train_losses, train_scores, valid_losses, valid_scores = train_and_validate(\n\u001b[0m\u001b[1;32m     10\u001b[0m     model, train_loader, val_loader, optimizer, criterion, scheduler)\n","\u001b[0;32m<ipython-input-159-f550057e4eea>\u001b[0m in \u001b[0;36mtrain_and_validate\u001b[0;34m(model, train_loader, val_loader, optimizer, criterion, scheduler)\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcfg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0;31m# 학습 단계\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m         train_loss, train_score = train(\n\u001b[0m\u001b[1;32m     11\u001b[0m             \u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcfg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-158-71e7be4eb399>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(model, device, train_loader, optimizer, criterion, epoch)\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1737\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1739\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1740\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1741\u001b[0m     \u001b[0;31m# torchrec tests the code consistency with the following code\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1748\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1749\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1750\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1751\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1752\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-153-ab870502e1b9>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x_RNN)\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_RNN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLSTM\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten_parameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m         \u001b[0mRNN_out\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_RNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m         \u001b[0;31m# FC layers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1737\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1739\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1740\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1741\u001b[0m     \u001b[0;31m# torchrec tests the code consistency with the following code\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1748\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1749\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1750\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1751\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1752\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/nn/modules/rnn.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, hx)\u001b[0m\n\u001b[1;32m   1122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbatch_sizes\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1124\u001b[0;31m             result = _VF.lstm(\n\u001b[0m\u001b[1;32m   1125\u001b[0m                 \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1126\u001b[0m                 \u001b[0mhx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"HGuUoHMge_Ln"},"source":["# 2. 결과 시각화"]},{"cell_type":"markdown","source":["## loss, accuracy 시각화"],"metadata":{"id":"RolazQpE-q0S"}},{"cell_type":"code","source":["def plot_train_test_results(\n","    train_losses,\n","    train_scores,\n","    val_losses,\n","    val_scores,\n","    ):\n","    \"\"\"\n","    학습 및 검증 과정의 Loss 및 Accuracy를 시각화하는 함수 (Train + Val).\n","    \"\"\"\n","    epochs = np.arange(1, len(train_losses) + 1)\n","\n","    fig = plt.figure(figsize=(12, 5))\n","\n","    # Loss 그래프\n","    plt.subplot(1, 2, 1)\n","    plt.plot(epochs, train_losses, marker=\"o\", markersize=3, linestyle=\"-\", label=\"Train Loss\")\n","    plt.plot(epochs, val_losses, marker=\"s\", markersize=3, linestyle=\"--\", label=\"Validation Loss\")\n","    plt.title(\"Loss per Epoch\")\n","    plt.xlabel(\"Epochs\")\n","    plt.ylabel(\"Loss\")\n","    plt.legend()\n","    plt.grid(True)\n","\n","    # Accuracy 그래프\n","    plt.subplot(1, 2, 2)\n","    plt.plot(epochs, train_scores, marker=\"o\", markersize=3, linestyle=\"-\", label=\"Train Accuracy\")\n","    plt.plot(epochs, val_scores, marker=\"s\", markersize=3, linestyle=\"--\", label=\"Validation Accuracy\")\n","    plt.title(\"Accuracy per Epoch\")\n","    plt.xlabel(\"Epochs\")\n","    plt.ylabel(\"Accuracy (%)\")\n","    plt.legend()\n","    plt.grid(True)\n","\n","    plt.tight_layout()\n","\n","    plot_path = os.path.join(cfg.results_save_path, f\"trainval_curve.png\")\n","    plt.savefig(plot_path, dpi=300)\n","    plt.show()\n","\n","    print(f\"📈 학습 결과 시각화 저장 완료: {plot_path}\")\n","\n","plot_train_test_results(\n","    train_losses,\n","    train_scores,\n","    valid_losses,\n","    valid_scores,\n",")"],"metadata":{"id":"2CeWO3uU-tfD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RvogPajT106l"},"source":["## confusion matrix, classification_report 시각화"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PgKzQHFH84m0"},"outputs":[],"source":["# 모델 로드 함수\n","def load_model(model, device, model_type=ModelType.BEST):\n","    \"\"\"저장된 모델을 불러오는 함수\"\"\"\n","    model_path = os.path.join(cfg.model_save_path, f\"{model_type.value}_model.pth\")\n","    checkpoint = torch.load(model_path, map_location=device)\n","    model.load_state_dict(checkpoint[\"model_state_dict\"])\n","    model.to(device)\n","    model.eval()\n","    print(f\"✅ Model Loaded from {model_path}\")\n","    return model\n","\n","# Confusion Matrix 시각화 함수\n","def plot_confusion_matrix_and_report(\n","    y_true,\n","    y_pred,\n","    data_type,\n","    model_type=ModelType.BEST\n","    ):\n","    \"\"\"\n","    Confusion Matrix를 그리는 함수\n","    \"\"\"\n","    # == confusion matrix ==\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(6, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=cfg.labels, yticklabels=cfg.labels)\n","    plt.xlabel(\"Predicted Label\")\n","    plt.ylabel(\"True Label\")\n","    plt.title(\"Confusion Matrix\")\n","\n","    file_prefix = f\"{model_type.value}_{data_type.value}\"\n","    cm_path = os.path.join(cfg.results_save_path, f\"{file_prefix}_confusion_matrix.png\")\n","    plt.savefig(cm_path, dpi=300)  # 이미지 저장\n","    plt.show()\n","    plt.close()\n","    print(f\"✅ Confusion Matrix saved at: {cm_path}\")\n","\n","    # == classification report ==\n","    report = classification_report(y_true, y_pred, target_names=cfg.labels, output_dict=True)\n","    report_df = pd.DataFrame(report).transpose()\n","\n","    # 시각화\n","    fig, ax = plt.subplots(figsize=(10, len(report_df) * 0.6))\n","    ax.axis('off')\n","\n","    table = ax.table(\n","        cellText=report_df.round(3).values,\n","        colLabels=report_df.columns,\n","        rowLabels=report_df.index,\n","        loc='center',\n","        cellLoc='center'\n","    )\n","\n","    # 헤더 설정\n","    for j in range(len(report_df.columns)):\n","        cell = table[0, j]\n","        cell.set_facecolor('#d0d0d0')\n","        cell.set_fontsize(13)\n","        cell.set_text_props(weight='bold')\n","\n","    # 셀 스타일 조정\n","    for i in range(len(report_df)):\n","        for j in range(len(report_df.columns)):\n","            cell = table[i + 1, j]\n","            cell.set_fontsize(12)\n","            cell.set_height(0.09)\n","            cell.set_facecolor('#a9a9a9' if i % 2 == 0 else '#ffffff')\n","\n","    # 행 라벨 스타일 조정\n","    for i in range(len(report_df)):\n","        row_label = table[i + 1, -1] if (i + 1, -1) in table._cells else table[i + 1, 0]\n","        row_label.set_fontsize(12)\n","        row_label.set_text_props(weight='bold')\n","        row_label.set_height(0.09)\n","\n","    cr_path = os.path.join(cfg.results_save_path, f\"{file_prefix}_classification_report.png\")\n","    plt.savefig(cr_path, dpi=300, bbox_inches='tight')\n","    plt.show()\n","    plt.close()\n","    print(f\"📋 Classification Report table saved at: {cr_path}\")\n","\n","\n","def evaluate_model(model, device, data_loader, data_type, model_type=ModelType.BEST):\n","    \"\"\"\n","    모델을 평가\n","    \"\"\"\n","    model.eval()\n","    all_preds = []\n","    all_labels = []\n","    all_probs = []\n","\n","    with torch.no_grad():\n","        for x_batch, y_batch in data_loader:\n","            x_batch, y_batch = x_batch.to(device), y_batch.to(device)\n","\n","            logits = model(x_batch)  # (batch, num_classes)\n","            probs = F.softmax(logits, dim=1)  # 확률로 변환\n","\n","            y_pred_classes = torch.argmax(probs, dim=1)\n","\n","            all_preds.extend(y_pred_classes.cpu().numpy())\n","            all_labels.extend(y_batch.cpu().numpy())\n","            all_probs.extend(probs.cpu().numpy())  # 각 샘플의 확률 벡터 저장\n","\n","    # Confusion Matrix 출력\n","    plot_confusion_matrix_and_report(all_labels, all_preds, data_type, model_type)\n","\n","    return all_labels, all_preds, np.array(all_probs)"]},{"cell_type":"code","source":["model = load_model(model, cfg.device) # best model load"],"metadata":{"id":"x70cCjt985w2"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":888},"id":"5A0UX6Guuf14","outputId":"2b2cae48-b862-41f4-8fea-887d5f259957","executionInfo":{"status":"ok","timestamp":1747564866130,"user_tz":-540,"elapsed":20425,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["✅ Confusion Matrix saved at: /content/drive/MyDrive/DMS/runs/LSTM/best_train_confusion_matrix.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x420 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["📋 Classification Report table saved at: /content/drive/MyDrive/DMS/runs/LSTM/best_train_classification_report.png\n"]}],"source":["# 평가하기 위해서 shuffle=False 로 구성된 DataLoader를 따로 만들어야 함\n","train_loader_eval = DataLoader(\n","    train_dataset,\n","    batch_size=cfg.batch_size,\n","    shuffle=False,         # 중요: 순서 유지\n","    num_workers=0,\n","    pin_memory=cfg.use_cuda\n",")\n","\n","train_labels, train_preds, train_probs = evaluate_model(model, cfg.device, train_loader_eval, DataType.TRAIN)"]},{"cell_type":"code","source":["val_labels, val_preds, val_probs = evaluate_model(model, cfg.device, val_loader, DataType.VAL)"],"metadata":{"id":"9HvP8lJo-W60"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PHssvdxb9X9f"},"outputs":[],"source":["test_labels, test_preds, test_probs = evaluate_model(model, cfg.device, test_loader, DataType.TEST)"]},{"cell_type":"markdown","source":["## 오분류 데이터 확인하기"],"metadata":{"id":"VgHCkPUE6S7o"}},{"cell_type":"markdown","source":["#### 클래스별 확신 높은 오분류 top-10 인덱스 추출"],"metadata":{"id":"DqyTjLKD_0ML"}},{"cell_type":"code","source":["def get_top_wrong_by_class(y_true, y_pred, y_prob, top_k=10, label_decoding=cfg.label_decoding):\n","    \"\"\"\n","    각 클래스에서 확신(confidence)이 높은 오분류 top-k 샘플 인덱스를 반환\n","\n","    Returns:\n","        result_dict: {class_name: [index1, index2, ...]} 형태\n","    \"\"\"\n","    num_classes = len(label_decoding)\n","    wrong_by_class = {label_decoding[c]: [] for c in range(num_classes)}\n","\n","    for i, (t, p) in enumerate(zip(y_true, y_pred)):\n","        if t != p:\n","            pred_confidence = y_prob[i][p]\n","            pred_class_name = label_decoding[p]\n","            wrong_by_class[pred_class_name].append((i, pred_confidence))\n","\n","    # 각 클래스별 confidence 높은 순으로 정렬 후 top-k만 추출\n","    result_dict = {}\n","    for class_name, wrong_list in wrong_by_class.items():\n","        top_k_sorted = sorted(wrong_list, key=lambda x: x[1], reverse=True)[:top_k]\n","        result_dict[class_name] = [idx for idx, _ in top_k_sorted]\n","\n","    return result_dict"],"metadata":{"id":"kgX9mmWY_3nM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 오분류 데이터 프레임 시각화"],"metadata":{"id":"xxSgk8b8Sl51"}},{"cell_type":"code","source":["def show_misclassified_sequence(y_true, y_pred, metadata, data_df, index):\n","    \"\"\"\n","    잘못 분류된 샘플 중 하나의 시퀀스를 시각화하는 함수\n","\n","    Args:\n","        y_true (list): 실제 정답 라벨들\n","        y_pred (list): 모델이 예측한 라벨들\n","        metadata (list of tuples): (label, clip_id, start_frame_index)\n","        data_df (pd.DataFrame): 전체 프레임 데이터프레임 (frame_path 포함)\n","        index (int): 보고 싶은 틀린 샘플의 인덱스 (0부터 시작)\n","    \"\"\"\n","    true_label = y_true[index]\n","    pred_label = y_pred[index]\n","    label, clip_id, start_frame = metadata[index]\n","\n","    true_label = cfg.label_decoding[true_label]\n","    pred_label = cfg.label_decoding[pred_label]\n","\n","    print(f\"\\n🔍 오분류 예시 #{index}\")\n","    print(f\"Clip ID: {clip_id}, Start Frame: {start_frame}\")\n","    print(f\"True Label: {true_label}, Predicted: {pred_label}\")\n","\n","    # 해당 시퀀스 프레임 추출\n","    frame_range = list(range(start_frame, start_frame + cfg.sequence_length))\n","    clip_df = data_df[(data_df[\"label\"] == true_label) &\n","                      (data_df[\"clip_id\"] == clip_id) &\n","                      (data_df[\"frame_no\"].isin(frame_range))].sort_values(\"frame_no\")\n","    frame_paths = clip_df[\"frame_path\"].tolist()\n","    print(f\"첫번째 프레임의 frame_path: \", frame_paths[0])\n","\n","    # 시각화\n","    n = len(frame_paths)\n","    fig, axes = plt.subplots(1, n, figsize=(n * 2, 2.5))\n","    if n == 1:\n","        axes = [axes]\n","\n","    for i, (ax, path) in enumerate(zip(axes, frame_paths)):\n","        try:\n","            img = Image.open(path)\n","            ax.imshow(img)\n","            ax.set_title(f\"#{i + start_frame}\")\n","            ax.axis('off')\n","        except Exception:\n","            ax.text(0.5, 0.5, 'Image Load Fail', ha='center', va='center')\n","            ax.axis('off')\n","\n","    plt.suptitle(f\"Wrong Prediction\\nTrue: {true_label} / Pred: {pred_label}\", fontsize=14)\n","    plt.tight_layout()\n","    plt.show()"],"metadata":{"id":"3IeTfW1Z4KeM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["get_top_wrong_by_class(train_labels, train_preds, train_probs)"],"metadata":{"id":"KFWZP2OTAWGh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 예를 들어 7490번째 틀린 예측을 보고 싶을 때\n","show_misclassified_sequence(\n","    y_true=train_labels,\n","    y_pred=train_preds,\n","    metadata=train_metadata,\n","    data_df=train_df,\n","    index=7490\n",")"],"metadata":{"id":"W1x4bk6C7GFM"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}