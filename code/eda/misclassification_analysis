{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":19567,"status":"ok","timestamp":1748144766974,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"},"user_tz":-540},"id":"J68SdBzNjphV","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3118e43d-705f-4208-ac0a-d12ca7c3878d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"markdown","metadata":{"id":"Fk84YrSckNTx"},"source":["# 데이터 및 모델 로드"]},{"cell_type":"markdown","metadata":{"id":"FJuBF9S3WK2y"},"source":["## 라이브러리 임포트"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"qtMzGHiCkMEO","executionInfo":{"status":"ok","timestamp":1748144815912,"user_tz":-540,"elapsed":11752,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"outputs":[],"source":["import os\n","import datetime\n","from tqdm import tqdm\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, classification_report\n","from collections import Counter\n","import random\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","from torch.utils.data import DataLoader, TensorDataset\n","import torch.utils.data as data\n","import torch.optim as optim\n","import torchvision\n","from torch.autograd import Variable\n","\n","from sklearn.metrics import accuracy_score\n","\n","import matplotlib.pyplot as plt\n","import cv2\n","from IPython.display import display\n","from PIL import Image\n","\n","from dataclasses import dataclass, field\n","from typing import Tuple, List\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","from enum import Enum\n","\n","class ModelType(Enum):\n","  BEST = \"best\"\n","  LAST = \"last\"\n","\n","class DataType(Enum):\n","  TRAIN = \"train\"\n","  VAL = \"val\"\n","  TEST = \"test\"\n","\n","base_dir = \"/content/drive/MyDrive/DMS\"\n"]},{"cell_type":"markdown","metadata":{"id":"1Srd-RY9pcZE"},"source":["## 1-2. LSTM Input 형식으로 변환"]},{"cell_type":"markdown","metadata":{"id":"JwkJmAOOFgDF"},"source":["### Config 설정"]},{"cell_type":"code","source":["from dataclasses import dataclass\n","\n","@dataclass\n","class Config:\n","    # 모델 구조\n","    lstm_num_layers: int = 3\n","    lstm_hidden_size: int = 512\n","    fc_hidden_size: int = 256\n","    dropout_rate: float = 0.2 # input-to-hidden (between layers)\n","    bidirectional: bool = True\n","\n","    # 학습 설정\n","    batch_size: int = 32\n","    epochs: int = 100\n","    learning_rate: float = 3e-4\n","    optimizer: str = \"adam\" # or \"sgd\", \"adamw\"\n","\n","    # 입력 데이터\n","    sequence_length: int = 12\n","    sliding_window_step: int = 12 # sliding window 사용 x -> seuqnce_length와 같은 값으로 설정\n","    features: list = field(default_factory=lambda: [\"mar\", \"ear\", \"yaw\", \"pitch\", \"phone_detected\"])\n","    labels: list = field(default_factory=lambda: [\"normal\", \"phonecall\", \"text\", \"yawn\"])\n","\n","    apply_yaw_inversion: bool = False\n","    apply_noise_jittering: bool = False\n","\n","    # 학습 제어 - 조기 종료 / 러닝레이트 스케줄러\n","    use_early_stopping: bool = False  # 조기 종료 사용 여부\n","    use_lr_scheduler: bool = False    # 학습률 스케줄러 사용 여부\n","    early_stopping_patience: int = 20 # early stopping 기준 epoch\n","    reduce_lr_factor: float = 0.5 # learning rate 감소 비율\n","    reduce_lr_patience: int = 7 # learning rate 감소 기준 epoch\n","\n","    # 랜덤시드 설정\n","    random_seed: int = 24\n","\n","    def __post_init__(self):\n","      if self.sequence_length == 12:\n","        df_path = f'{base_dir}/data/splits/12frame_windows'\n","        self.group_col = 'groups_12'\n","      elif self.sequence_length == 24:\n","        df_path = f'{base_dir}/data/splits/24frame_windows'\n","        self.group_col = 'groups_24'\n","\n","      self.train = pd.read_csv(os.path.join(df_path, \"final_train.csv\"))\n","      self.validation = pd.read_csv(os.path.join(df_path, \"final_val.csv\"))\n","      self.test = pd.read_csv(os.path.join(df_path, \"final_test.csv\"))\n","\n","      # label_mapping\n","      self.label_encoding = {}\n","      self.label_decoding = {}\n","      for i, label in enumerate(self.labels):\n","          self.label_encoding[label] = i\n","          self.label_decoding[i] = label\n","\n","      # 디바이스 설정\n","      self.use_cuda = torch.cuda.is_available()\n","      self.device = torch.device(\"cuda\" if self.use_cuda else \"cpu\")\n","\n","cfg = Config()\n","# print(cfg.case_name) # 사용 예시"],"metadata":{"id":"5hKlc4kUp4l9","executionInfo":{"status":"ok","timestamp":1748144910873,"user_tz":-540,"elapsed":5704,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def set_random_seed(seed):\n","    torch.manual_seed(seed)  # PyTorch CPU 연산에 대한 시드 설정\n","    torch.cuda.manual_seed(seed)  # CUDA 연산에 대한 시드 설정 (GPU 사용 시)\n","    torch.cuda.manual_seed_all(seed)  # 여러 GPU를 사용하는 경우 모든 GPU에 동일한 시드 설정\n","    np.random.seed(seed)  # NumPy 연산에 대한 시드 설정\n","    random.seed(seed)  # Python 기본 random 모듈의 시드 설정\n","    torch.backends.cudnn.deterministic = True  # CuDNN 연산의 결정론적 동작 보장\n","    torch.backends.cudnn.benchmark = False  # 성능 최적화 비활성화 (재현성 보장)\n","\n","set_random_seed(cfg.random_seed)"],"metadata":{"id":"nnUAKflRWPoq","executionInfo":{"status":"ok","timestamp":1748145333652,"user_tz":-540,"elapsed":50,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pRHMOaLpW7Y2"},"source":["### 데이터 로드"]},{"cell_type":"markdown","source":["### train, val, test 데이터셋 로드"],"metadata":{"id":"R1vpZJH9TRky"}},{"cell_type":"code","source":["train_df = cfg.train.copy()\n","val_df = cfg.validation.copy()\n","test_df = cfg.test.copy()"],"metadata":{"id":"LaskMuLUQ89h","executionInfo":{"status":"ok","timestamp":1748145336186,"user_tz":-540,"elapsed":18,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# train normal undersampling\n","train_df = train_df[((train_df['label'] == 'normal') &\n","                    (train_df[cfg.group_col].isin([1, 2]))) |\n","                    (train_df['label'] != 'normal')]"],"metadata":{"id":"eHUoDw4U9kQR","executionInfo":{"status":"ok","timestamp":1748145337628,"user_tz":-540,"elapsed":29,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OdLSCKeSrZAE"},"source":["### generate_sequence_dataset"]},{"cell_type":"code","source":["def generate_sequence_dataset(\n","    df: pd.DataFrame\n",") -> Tuple[np.ndarray, np.ndarray, List[Tuple]]:\n","    sequences, labels, metadata = [], [], []\n","\n","    for (label, clip_id), clip_df in df.groupby(['label', 'clip_id']):\n","        clip_df = clip_df.sort_values('frame_no')\n","        frame_values = clip_df[cfg.features].values\n","\n","        if len(frame_values) < cfg.sequence_length:\n","            continue\n","\n","        for i in range(0, len(frame_values) - cfg.sequence_length + 1, cfg.sliding_window_step):\n","            seq = frame_values[i:i + cfg.sequence_length]\n","            if seq.shape[0] == cfg.sequence_length:\n","                sequences.append(seq)\n","                labels.append(cfg.label_encoding[label])\n","                # 학습 후 오분류 데이터 확인을 위한 시작 프레임 번호 저장\n","                metadata.append((label, clip_id, clip_df.iloc[i]['frame_no']))\n","\n","    return TensorDataset(torch.tensor(sequences, dtype=torch.float32), torch.tensor(labels, dtype=torch.long)), metadata"],"metadata":{"id":"SbY5UTS4T39f","executionInfo":{"status":"ok","timestamp":1748145344525,"user_tz":-540,"elapsed":17,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iGaRQUVjFDPA"},"source":["### DataLoader"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"safri8zEE8Qs","executionInfo":{"status":"ok","timestamp":1748145346624,"user_tz":-540,"elapsed":5,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"outputs":[],"source":["train_params = {\n","    \"batch_size\": cfg.batch_size,\n","    \"shuffle\": True,\n","    \"num_workers\": 4,\n","    \"pin_memory\": cfg.use_cuda,\n","    \"persistent_workers\": cfg.use_cuda,\n","    \"prefetch_factor\": 2 if cfg.use_cuda else None,\n","}\n","\n","test_params = {\n","    \"batch_size\": cfg.batch_size,\n","    \"shuffle\": False,\n","    \"num_workers\": 0,\n","    \"pin_memory\": cfg.use_cuda\n","}"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2416,"status":"ok","timestamp":1748145350627,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"},"user_tz":-540},"id":"kkBxlRECyZZs","outputId":"7f0e6450-f79a-40cf-d40f-941fb43a2662"},"outputs":[{"output_type":"stream","name":"stdout","text":["Batch Shape: torch.Size([32, 12, 5]) torch.Size([32])\n","Batch Shape: torch.Size([32, 12, 5]) torch.Size([32])\n","Batch Shape: torch.Size([32, 12, 5]) torch.Size([32])\n"]}],"source":["# DataLoader 생성 (배치 단위로 데이터를 나누기 위해 사용)\n","train_dataset, train_metadata = generate_sequence_dataset(train_df)\n","val_dataset, val_metadata = generate_sequence_dataset(val_df)\n","test_dataset, test_metadata = generate_sequence_dataset(test_df)\n","\n","train_loader = DataLoader(train_dataset, **train_params)\n","val_loader = DataLoader(val_dataset, **test_params)\n","test_loader = DataLoader(test_dataset, **test_params)\n","\n","# 배치 단위 확인\n","for x_batch, y_batch in train_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인\n","\n","for x_batch, y_batch in val_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인\n","\n","for x_batch, y_batch in test_loader:\n","    print(\"Batch Shape:\", x_batch.shape, y_batch.shape)  # (batch_size, timestep, feature), (batch_size,)\n","    break  # 한 배치만 확인"]},{"cell_type":"markdown","metadata":{"id":"fROYd8X1zYa7"},"source":["## 1-3. LSTM 학습 설정"]},{"cell_type":"markdown","source":["### 모델 정의"],"metadata":{"id":"KnLIHJVEBYwV"}},{"cell_type":"code","source":["# Attention 모듈 정의\n","class Attention(nn.Module):\n","    def __init__(self, hidden_dim):\n","        super(Attention, self).__init__()\n","        self.attn = nn.Linear(hidden_dim, hidden_dim)\n","        self.context = nn.Linear(hidden_dim, 1, bias=False)\n","\n","    def forward(self, lstm_output):\n","        # lstm_output: [B, T, H]\n","        score = torch.tanh(self.attn(lstm_output))         # [B, T, H]\n","        attn_weights = torch.softmax(self.context(score), dim=1)  # [B, T, 1]\n","        attended_output = torch.sum(attn_weights * lstm_output, dim=1)  # [B, H]\n","        return attended_output, attn_weights  # context vector, weights\n"],"metadata":{"id":"LGtL2qsUnhI0","executionInfo":{"status":"ok","timestamp":1748148007337,"user_tz":-540,"elapsed":21,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","execution_count":39,"metadata":{"id":"AOK3mN2xHwtt","executionInfo":{"status":"ok","timestamp":1748148008783,"user_tz":-540,"elapsed":3,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"outputs":[],"source":["# LSTM 모델 정의\n","class DecoderRNN(nn.Module):\n","    def __init__(self):\n","        super(DecoderRNN, self).__init__()\n","\n","        self.RNN_input_size = len(cfg.features)\n","        self.h_RNN_layers = cfg.lstm_num_layers\n","        self.h_RNN = cfg.lstm_hidden_size\n","        self.h_FC_dim = cfg.fc_hidden_size\n","        self.drop_p = cfg.dropout_rate\n","        self.num_classes = len(cfg.labels)\n","        self.bidirectional = True\n","\n","        # 첫 번째 layer: Bidirectional LSTM\n","        self.lstm_first = nn.LSTM(\n","            input_size=self.RNN_input_size,\n","            hidden_size=self.h_RNN,\n","            num_layers=1,\n","            batch_first=True,\n","            bidirectional=True\n","        )\n","\n","        # 이후 layer들: 단방향 LSTM\n","        self.lstm_rest = nn.LSTM(\n","            input_size=self.h_RNN * 2,  # bidirectional이므로 *2\n","            hidden_size=self.h_RNN,\n","            num_layers=self.h_RNN_layers - 1,\n","            batch_first=True,\n","            bidirectional=False\n","        )\n","\n","        self.attention = Attention(self.h_RNN) # Attention 추가\n","\n","        self.fc1 = nn.Linear(self.h_RNN, self.h_FC_dim)\n","        self.bn1 = nn.BatchNorm1d(self.h_FC_dim)  # Batch Normalization 추가\n","        self.fc2 = nn.Linear(self.h_FC_dim, self.num_classes)\n","        self.dropout = nn.Dropout(p=self.drop_p)\n","\n","    def forward(self, x_RNN):\n","        self.lstm_first.flatten_parameters()\n","        out, _ = self.lstm_first(x_RNN)  # (batch, seq_len, hidden*2)\n","\n","        self.lstm_rest.flatten_parameters()\n","        out, _ = self.lstm_rest(out)  # (batch, seq_len, hidden)\n","\n","        attn_out, attn_weights = self.attention(out)  # attn_out: [B, H]\n","\n","        # FC layers\n","        x = self.fc1(attn_out)\n","        x = self.bn1(x)\n","        x = F.relu(x)\n","        x = self.dropout(x)\n","        x = self.fc2(x)\n","\n","        return x, attn_weights  # CrossEntropyLoss 사용 (Softmax 없음), attn_weights 함께 반환"]},{"cell_type":"code","source":["# LSTM 모델 정의\n","class DecoderRNN(nn.Module):\n","    def __init__(self):\n","        super(DecoderRNN, self).__init__()\n","\n","        self.RNN_input_size = len(cfg.features)\n","        self.h_RNN_layers = cfg.lstm_num_layers\n","        self.h_RNN = cfg.lstm_hidden_size\n","        self.h_FC_dim = cfg.fc_hidden_size\n","        self.drop_p = cfg.dropout_rate\n","        self.num_classes = len(cfg.labels)\n","        self.bidirectional = True\n","\n","        self.LSTM = nn.LSTM(\n","            input_size=self.RNN_input_size,\n","            hidden_size=self.h_RNN,\n","            num_layers=self.h_RNN_layers,\n","            batch_first=True,\n","            bidirectional=self.bidirectional\n","        )\n","\n","        # bidirectional에 따라 출력 크기 달라짐\n","        lstm_output_dim = self.h_RNN * (2 if self.bidirectional else 1)\n","\n","        self.fc1 = nn.Linear(lstm_output_dim, self.h_FC_dim)\n","        self.bn1 = nn.BatchNorm1d(self.h_FC_dim)  # Batch Normalization 추가\n","        self.fc2 = nn.Linear(self.h_FC_dim, self.num_classes)\n","        self.dropout = nn.Dropout(p=self.drop_p)\n","\n","    def forward(self, x_RNN):\n","        self.LSTM.flatten_parameters()\n","        RNN_out, _ = self.LSTM(x_RNN, None)\n","\n","        # FC layers\n","        x = self.fc1(RNN_out[:, -1, :])  # 마지막 타임스텝 사용\n","        x = self.bn1(x)\n","        x = F.relu(x)\n","        x = self.dropout(x)\n","        x = self.fc2(x)\n","\n","        return x  # CrossEntropyLoss 사용 (Softmax 없음)"],"metadata":{"id":"BGa2knmatmqG","executionInfo":{"status":"ok","timestamp":1748147980508,"user_tz":-540,"elapsed":20,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":35,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HGuUoHMge_Ln"},"source":["# best model load"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"PgKzQHFH84m0","executionInfo":{"status":"ok","timestamp":1748148032821,"user_tz":-540,"elapsed":50,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"outputs":[],"source":["def evaluate_model(model, device, data_loader, data_type, model_type=ModelType.BEST):\n","    \"\"\"\n","    모델을 평가\n","    \"\"\"\n","    model.eval()\n","    all_preds = []\n","    all_labels = []\n","    all_probs = []\n","\n","    with torch.no_grad():\n","        for x_batch, y_batch in data_loader:\n","            x_batch, y_batch = x_batch.to(device), y_batch.to(device)\n","\n","            logits = model(x_batch)  # (batch, num_classes)\n","            # 튜플 처리\n","            if isinstance(logits, tuple):\n","                logits = logits[0]\n","            probs = F.softmax(logits, dim=1)  # 확률로 변환\n","\n","            y_pred_classes = torch.argmax(probs, dim=1)\n","\n","            all_preds.extend(y_pred_classes.cpu().numpy())\n","            all_labels.extend(y_batch.cpu().numpy())\n","            all_probs.extend(probs.cpu().numpy())  # 각 샘플의 확률 벡터 저장\n","\n","    return all_labels, all_preds, np.array(all_probs)\n","\n","# 모델 로드 함수\n","def load_model(model, device, model_type=ModelType.BEST):\n","    \"\"\"저장된 모델을 불러오는 함수\"\"\"\n","    model_path = os.path.join(base_dir, \"runs\", \"bi-lstm_attention\", \"weights\", f\"{model_type.value}_model.pth\")\n","    checkpoint = torch.load(model_path, map_location=device)\n","    model.load_state_dict(checkpoint[\"model_state_dict\"])\n","    model.to(device)\n","    model.eval()\n","    print(f\"✅ Model Loaded from {model_path}\")\n","    return model"]},{"cell_type":"code","source":["# 평가하기 위해서 shuffle=False 로 구성된 DataLoader를 따로 만들어야 함\n","train_loader_eval = DataLoader(\n","    train_dataset,\n","    batch_size=cfg.batch_size,\n","    shuffle=False,         # 중요: 순서 유지\n","    num_workers=0,\n","    pin_memory=cfg.use_cuda\n",")"],"metadata":{"id":"cMxX-taavG7T","executionInfo":{"status":"ok","timestamp":1748147935224,"user_tz":-540,"elapsed":17,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["model = DecoderRNN()\n","lstm_model = load_model(model, cfg.device) # best model load\n","\n","train_labels, train_preds, train_probs = evaluate_model(lstm_model, cfg.device, train_loader_eval, DataType.TRAIN)\n","\n","num_classes = train_probs.shape[1] if isinstance(train_probs, np.ndarray) else len(train_probs[0])\n","columns = ['prob_class_' + str(i) for i in range(num_classes)]\n","\n","lstm = pd.DataFrame(train_probs, columns=columns)\n","lstm['label'] = train_labels\n","lstm['prediction'] = train_preds"],"metadata":{"id":"9HvP8lJo-W60","executionInfo":{"status":"ok","timestamp":1748147942861,"user_tz":-540,"elapsed":742,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"29b0ca04-0f0a-4012-d199-533bf0927836"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Model Loaded from /content/drive/MyDrive/DMS/runs/lstm/weights/best_model.pth\n"]}]},{"cell_type":"code","source":["model = DecoderRNN()\n","bilstm_model = load_model(model, cfg.device) # best model load\n","\n","train_labels, train_preds, train_probs = evaluate_model(bilstm_model, cfg.device, train_loader_eval, DataType.TRAIN)\n","\n","num_classes = train_probs.shape[1] if isinstance(train_probs, np.ndarray) else len(train_probs[0])\n","columns = ['prob_class_' + str(i) for i in range(num_classes)]\n","\n","bilstm = pd.DataFrame(train_probs, columns=columns)\n","bilstm['label'] = train_labels\n","bilstm['prediction'] = train_preds"],"metadata":{"id":"ZxRqrZ-yyXpE","executionInfo":{"status":"ok","timestamp":1748148003107,"user_tz":-540,"elapsed":1459,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f82d7e25-c6cc-4932-82e3-58fee6a3215c"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Model Loaded from /content/drive/MyDrive/DMS/runs/bi-lstm/weights/best_model.pth\n"]}]},{"cell_type":"code","source":["model = DecoderRNN()\n","bilstm_attention_model = load_model(model, cfg.device) # best model load\n","\n","train_labels, train_preds, train_probs = evaluate_model(bilstm_attention_model, cfg.device, train_loader_eval, DataType.TRAIN)\n","\n","num_classes = train_probs.shape[1] if isinstance(train_probs, np.ndarray) else len(train_probs[0])\n","columns = ['prob_class_' + str(i) for i in range(num_classes)]\n","\n","bilstm_att = pd.DataFrame(train_probs, columns=columns)\n","bilstm_att['label'] = train_labels\n","bilstm_att['prediction'] = train_preds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hm4DkAKoydnA","executionInfo":{"status":"ok","timestamp":1748148039583,"user_tz":-540,"elapsed":948,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}},"outputId":"3713063b-c95c-42a7-8140-919bfbff6857"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Model Loaded from /content/drive/MyDrive/DMS/runs/bi-lstm_attention/weights/best_model.pth\n"]}]},{"cell_type":"code","source":["save_path = '/content/drive/MyDrive/DMS/data/eda'\n","lstm.to_csv(os.path.join(save_path, 'misclassification_analysis_train_lstm.csv'), index=False)\n","bilstm.to_csv(os.path.join(save_path, 'misclassification_analysis_train_bilstm.csv'), index=False)\n","bilstm_att.to_csv(os.path.join(save_path, 'misclassification_analysis_train_bilstm_att.csv'), index=False)"],"metadata":{"id":"dWlSV86308DC","executionInfo":{"status":"ok","timestamp":1748148045460,"user_tz":-540,"elapsed":130,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["def get_common_misclassified_samples(*model_dfs):\n","    \"\"\"\n","    여러 모델에서 공통적으로 같은 예측을 하면서 틀린 샘플 인덱스를 찾아 반환\n","\n","    Args:\n","        model_dfs: LSTM, BiLSTM, BiLSTM+Attention 등 각 모델의 DataFrame\n","\n","    Returns:\n","        공통적으로 틀린 샘플 인덱스 리스트, 예측 클래스\n","    \"\"\"\n","    # 모델마다 틀리면서 예측도 같은 샘플 추출\n","    misclassified_sets = []\n","\n","    for df in model_dfs:\n","        wrong = df[df['label'] != df['prediction']]\n","        # (index, predicted_class) 형태로 저장\n","        wrong_set = set(zip(wrong.index, wrong['prediction']))\n","        misclassified_sets.append(wrong_set)\n","\n","    # 모든 모델에서 공통으로 틀린 (index, prediction) 쌍 추출\n","    common_wrong = set.intersection(*misclassified_sets)\n","\n","    # 결과 정리\n","    common_indices = [i for i, _ in common_wrong]\n","    common_predictions = {i: pred for i, pred in common_wrong}\n","\n","    return common_indices, common_predictions"],"metadata":{"id":"UnpdSVrR1bDY","executionInfo":{"status":"ok","timestamp":1748147779720,"user_tz":-540,"elapsed":18,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["common_idxs, common_preds = get_common_misclassified_samples(\n","    lstm, bilstm, bilstm_att\n",")\n","\n","print(\"공통적으로 틀리면서 동일하게 예측한 샘플 수:\", len(common_idxs))\n","\n","for idx in common_idxs[:5]:  # 상위 5개 샘플만 출력\n","    print(f\"Index: {idx}, Prediction: {cfg.label_decoding[common_preds[idx]]}, True Label: {cfg.label_decoding[lstm.loc[idx, 'label']]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CmozAF-h1yvK","executionInfo":{"status":"ok","timestamp":1748148050952,"user_tz":-540,"elapsed":16,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}},"outputId":"9969f24c-2ab1-48a7-fb4b-ec26b74df79a"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["공통적으로 틀리면서 동일하게 예측한 샘플 수: 124\n","Index: 414, Prediction: text, True Label: normal\n","Index: 1620, Prediction: text, True Label: normal\n","Index: 3926, Prediction: normal, True Label: text\n","Index: 3950, Prediction: normal, True Label: text\n","Index: 3688, Prediction: normal, True Label: text\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from collections import defaultdict\n","\n","def get_misclassification_summary(model_dfs, label_decoding):\n","    \"\"\"\n","    여러 모델에서 공통적으로 틀린 샘플을 분석하여,\n","    (정답 클래스 → 예측 클래스) 형태의 오분류 통계를 출력\n","\n","    Args:\n","        model_dfs (list): 각 모델의 prediction dataframe (label, prediction 포함)\n","        label_decoding (dict): {int: label_name} 매핑\n","\n","    Returns:\n","        pd.DataFrame: 오분류 매트릭스 (rows: true, cols: predicted)\n","    \"\"\"\n","    # 공통적으로 틀린 샘플 찾기\n","    misclassified_sets = []\n","    for df in model_dfs:\n","        wrong = df[df[\"label\"] != df[\"prediction\"]]\n","        wrong_set = set(zip(wrong.index, wrong[\"prediction\"]))\n","        misclassified_sets.append(wrong_set)\n","\n","    common_wrong = set.intersection(*misclassified_sets)\n","    common_indices = [i for i, _ in common_wrong]\n","\n","    # 오분류 카운트 수집\n","    counter = defaultdict(int)\n","    for i in common_indices:\n","        true_label = model_dfs[0].loc[i, \"label\"]\n","        pred_label = model_dfs[0].loc[i, \"prediction\"]\n","        counter[(true_label, pred_label)] += 1\n","\n","    # 통계표 생성\n","    all_labels = sorted(set(model_dfs[0][\"label\"].unique()) | set(model_dfs[0][\"prediction\"].unique()))\n","    label_names = [label_decoding[l] for l in all_labels]\n","\n","    matrix = pd.DataFrame(0, index=label_names, columns=label_names)\n","\n","    for (true, pred), count in counter.items():\n","        true_name = label_decoding[true]\n","        pred_name = label_decoding[pred]\n","        matrix.loc[true_name, pred_name] = count\n","\n","    return matrix\n","\n","# 예: 각 모델의 validation 결과 df\n","summary_df = get_misclassification_summary(\n","    [lstm, bilstm, bilstm_att],\n","    cfg.label_decoding\n",")\n","display(summary_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"Pto9h1fY08aX","executionInfo":{"status":"ok","timestamp":1748149505123,"user_tz":-540,"elapsed":53,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}},"outputId":"2e120680-9007-4e56-d361-87579b3ac8c1"},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":["           normal  phonecall  text  yawn\n","normal          0          0    24     5\n","phonecall       0          0     0     0\n","text           76          0     0     0\n","yawn           18          0     1     0"],"text/html":["\n","  <div id=\"df-00af18bb-aa5a-4c4a-838f-8af054a69754\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>normal</th>\n","      <th>phonecall</th>\n","      <th>text</th>\n","      <th>yawn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>normal</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>24</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>phonecall</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>text</th>\n","      <td>76</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>yawn</th>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00af18bb-aa5a-4c4a-838f-8af054a69754')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-00af18bb-aa5a-4c4a-838f-8af054a69754 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-00af18bb-aa5a-4c4a-838f-8af054a69754');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6f3ab062-da2c-4a50-84fd-20e31524b9b4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f3ab062-da2c-4a50-84fd-20e31524b9b4')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6f3ab062-da2c-4a50-84fd-20e31524b9b4 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_10812f2b-ca72-480f-9eae-2d8ed6d1fd3a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_10812f2b-ca72-480f-9eae-2d8ed6d1fd3a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('summary_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"summary_df","summary":"{\n  \"name\": \"summary_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"normal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36,\n        \"min\": 0,\n        \"max\": 76,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          76,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"phonecall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 0,\n        \"max\": 24,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yawn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["def show_misclassified_sequence(y_true, y_pred, metadata, data_df, index):\n","    \"\"\"\n","    잘못 분류된 샘플 중 하나의 시퀀스를 시각화하는 함수\n","\n","    Args:\n","        y_true (list): 실제 정답 라벨들\n","        y_pred (list): 모델이 예측한 라벨들\n","        metadata (list of tuples): (label, clip_id, start_frame_index)\n","        data_df (pd.DataFrame): 전체 프레임 데이터프레임 (frame_path 포함)\n","        index (int): 보고 싶은 틀린 샘플의 인덱스 (0부터 시작)\n","    \"\"\"\n","    true_label = y_true[index]\n","    pred_label = y_pred[index]\n","    label, clip_id, start_frame = metadata[index]\n","\n","    true_label = cfg.label_decoding[true_label]\n","    pred_label = cfg.label_decoding[pred_label]\n","\n","    print(f\"Clip ID: {clip_id}, Start Frame: {start_frame}\")\n","    print(f\"True Label: {true_label}, Predicted: {pred_label}\")\n","\n","    # 해당 시퀀스 프레임 추출\n","    frame_range = list(range(start_frame, start_frame + cfg.sequence_length))\n","    clip_df = data_df[(data_df[\"label\"] == true_label) &\n","                      (data_df[\"clip_id\"] == clip_id) &\n","                      (data_df[\"frame_no\"].isin(frame_range))].sort_values(\"frame_no\")\n","    frame_paths = clip_df[\"frame_path\"].tolist()\n","    print(f\"첫번째 프레임의 frame_path: \", frame_paths[0])\n","\n","    # 시각화\n","    n = len(frame_paths)\n","    fig, axes = plt.subplots(1, n, figsize=(n * 2, 2.5))\n","    if n == 1:\n","        axes = [axes]\n","\n","    for i, (ax, path) in enumerate(zip(axes, frame_paths)):\n","        try:\n","            img = Image.open(path)\n","            ax.imshow(img)\n","            ax.set_title(f\"#{i + start_frame}\")\n","            ax.axis('off')\n","        except Exception:\n","            ax.text(0.5, 0.5, 'Image Load Fail', ha='center', va='center')\n","            ax.axis('off')\n","\n","    plt.suptitle(f\"Wrong Prediction\\nTrue: {true_label} / Pred: {pred_label}\", fontsize=14)\n","    plt.tight_layout()\n","    plt.show()"],"metadata":{"id":"26jd4Sn52PTw","executionInfo":{"status":"ok","timestamp":1748148254976,"user_tz":-540,"elapsed":64,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["for index in common_idxs:\n","  show_misclassified_sequence(train_labels, train_preds, train_metadata, train_df, index)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1YDmgKCZv07oo8lyNeW7sftfmhA6jXsD6"},"id":"yEEEtl2f2RS1","executionInfo":{"status":"ok","timestamp":1748149121959,"user_tz":-540,"elapsed":816682,"user":{"displayName":"Sol Lee","userId":"06456628920237989185"}},"outputId":"64b70d2c-b37c-4fd7-ba7f-6eb8b359005e"},"execution_count":45,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}],"metadata":{"colab":{"provenance":[{"file_id":"1BFHLFMpc6UkSvpC8qDe4V-lJMVyH0i8U","timestamp":1748021457962},{"file_id":"1GX_r2zevlYLlEc96hTEHzMbX6zZuRs2x","timestamp":1747977385113}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}